
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model SystemSettings
 * 
 */
export type SystemSettings = $Result.DefaultSelection<Prisma.$SystemSettingsPayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model FireStation
 * 
 */
export type FireStation = $Result.DefaultSelection<Prisma.$FireStationPayload>
/**
 * Model Vehicle
 * 
 */
export type Vehicle = $Result.DefaultSelection<Prisma.$VehiclePayload>
/**
 * Model FireLevel
 * 
 */
export type FireLevel = $Result.DefaultSelection<Prisma.$FireLevelPayload>
/**
 * Model FireLevelRequirement
 * 
 */
export type FireLevelRequirement = $Result.DefaultSelection<Prisma.$FireLevelRequirementPayload>
/**
 * Model FireIncident
 * 
 */
export type FireIncident = $Result.DefaultSelection<Prisma.$FireIncidentPayload>
/**
 * Model FireAddressLevel
 * 
 */
export type FireAddressLevel = $Result.DefaultSelection<Prisma.$FireAddressLevelPayload>
/**
 * Model Report
 * 
 */
export type Report = $Result.DefaultSelection<Prisma.$ReportPayload>
/**
 * Model UserActivity
 * 
 */
export type UserActivity = $Result.DefaultSelection<Prisma.$UserActivityPayload>
/**
 * Model FireHistory
 * 
 */
export type FireHistory = $Result.DefaultSelection<Prisma.$FireHistoryPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const UserRole: {
  ADMIN: 'ADMIN',
  CENTRAL_DISPATCHER: 'CENTRAL_DISPATCHER',
  STATION_DISPATCHER: 'STATION_DISPATCHER'
};

export type UserRole = (typeof UserRole)[keyof typeof UserRole]


export const VehicleType: {
  FIRE_TRUCK: 'FIRE_TRUCK',
  LADDER_TRUCK: 'LADDER_TRUCK',
  RESCUE_VEHICLE: 'RESCUE_VEHICLE',
  WATER_TANKER: 'WATER_TANKER',
  COMMAND_VEHICLE: 'COMMAND_VEHICLE'
};

export type VehicleType = (typeof VehicleType)[keyof typeof VehicleType]


export const VehicleStatus: {
  AVAILABLE: 'AVAILABLE',
  ON_DUTY: 'ON_DUTY',
  MAINTENANCE: 'MAINTENANCE'
};

export type VehicleStatus = (typeof VehicleStatus)[keyof typeof VehicleStatus]


export const IncidentStatus: {
  PENDING: 'PENDING',
  IN_PROGRESS: 'IN_PROGRESS',
  RESOLVED: 'RESOLVED',
  CANCELLED: 'CANCELLED'
};

export type IncidentStatus = (typeof IncidentStatus)[keyof typeof IncidentStatus]

}

export type UserRole = $Enums.UserRole

export const UserRole: typeof $Enums.UserRole

export type VehicleType = $Enums.VehicleType

export const VehicleType: typeof $Enums.VehicleType

export type VehicleStatus = $Enums.VehicleStatus

export const VehicleStatus: typeof $Enums.VehicleStatus

export type IncidentStatus = $Enums.IncidentStatus

export const IncidentStatus: typeof $Enums.IncidentStatus

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more SystemSettings
 * const systemSettings = await prisma.systemSettings.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more SystemSettings
   * const systemSettings = await prisma.systemSettings.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.systemSettings`: Exposes CRUD operations for the **SystemSettings** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SystemSettings
    * const systemSettings = await prisma.systemSettings.findMany()
    * ```
    */
  get systemSettings(): Prisma.SystemSettingsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.fireStation`: Exposes CRUD operations for the **FireStation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FireStations
    * const fireStations = await prisma.fireStation.findMany()
    * ```
    */
  get fireStation(): Prisma.FireStationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.vehicle`: Exposes CRUD operations for the **Vehicle** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Vehicles
    * const vehicles = await prisma.vehicle.findMany()
    * ```
    */
  get vehicle(): Prisma.VehicleDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.fireLevel`: Exposes CRUD operations for the **FireLevel** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FireLevels
    * const fireLevels = await prisma.fireLevel.findMany()
    * ```
    */
  get fireLevel(): Prisma.FireLevelDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.fireLevelRequirement`: Exposes CRUD operations for the **FireLevelRequirement** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FireLevelRequirements
    * const fireLevelRequirements = await prisma.fireLevelRequirement.findMany()
    * ```
    */
  get fireLevelRequirement(): Prisma.FireLevelRequirementDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.fireIncident`: Exposes CRUD operations for the **FireIncident** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FireIncidents
    * const fireIncidents = await prisma.fireIncident.findMany()
    * ```
    */
  get fireIncident(): Prisma.FireIncidentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.fireAddressLevel`: Exposes CRUD operations for the **FireAddressLevel** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FireAddressLevels
    * const fireAddressLevels = await prisma.fireAddressLevel.findMany()
    * ```
    */
  get fireAddressLevel(): Prisma.FireAddressLevelDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.report`: Exposes CRUD operations for the **Report** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reports
    * const reports = await prisma.report.findMany()
    * ```
    */
  get report(): Prisma.ReportDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userActivity`: Exposes CRUD operations for the **UserActivity** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserActivities
    * const userActivities = await prisma.userActivity.findMany()
    * ```
    */
  get userActivity(): Prisma.UserActivityDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.fireHistory`: Exposes CRUD operations for the **FireHistory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FireHistories
    * const fireHistories = await prisma.fireHistory.findMany()
    * ```
    */
  get fireHistory(): Prisma.FireHistoryDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.6.0
   * Query Engine version: f676762280b54cd07c770017ed3711ddde35f37a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    SystemSettings: 'SystemSettings',
    User: 'User',
    FireStation: 'FireStation',
    Vehicle: 'Vehicle',
    FireLevel: 'FireLevel',
    FireLevelRequirement: 'FireLevelRequirement',
    FireIncident: 'FireIncident',
    FireAddressLevel: 'FireAddressLevel',
    Report: 'Report',
    UserActivity: 'UserActivity',
    FireHistory: 'FireHistory'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "systemSettings" | "user" | "fireStation" | "vehicle" | "fireLevel" | "fireLevelRequirement" | "fireIncident" | "fireAddressLevel" | "report" | "userActivity" | "fireHistory"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      SystemSettings: {
        payload: Prisma.$SystemSettingsPayload<ExtArgs>
        fields: Prisma.SystemSettingsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SystemSettingsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemSettingsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SystemSettingsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemSettingsPayload>
          }
          findFirst: {
            args: Prisma.SystemSettingsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemSettingsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SystemSettingsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemSettingsPayload>
          }
          findMany: {
            args: Prisma.SystemSettingsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemSettingsPayload>[]
          }
          create: {
            args: Prisma.SystemSettingsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemSettingsPayload>
          }
          createMany: {
            args: Prisma.SystemSettingsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SystemSettingsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemSettingsPayload>[]
          }
          delete: {
            args: Prisma.SystemSettingsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemSettingsPayload>
          }
          update: {
            args: Prisma.SystemSettingsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemSettingsPayload>
          }
          deleteMany: {
            args: Prisma.SystemSettingsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SystemSettingsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SystemSettingsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemSettingsPayload>[]
          }
          upsert: {
            args: Prisma.SystemSettingsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemSettingsPayload>
          }
          aggregate: {
            args: Prisma.SystemSettingsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSystemSettings>
          }
          groupBy: {
            args: Prisma.SystemSettingsGroupByArgs<ExtArgs>
            result: $Utils.Optional<SystemSettingsGroupByOutputType>[]
          }
          count: {
            args: Prisma.SystemSettingsCountArgs<ExtArgs>
            result: $Utils.Optional<SystemSettingsCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      FireStation: {
        payload: Prisma.$FireStationPayload<ExtArgs>
        fields: Prisma.FireStationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FireStationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FireStationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FireStationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FireStationPayload>
          }
          findFirst: {
            args: Prisma.FireStationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FireStationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FireStationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FireStationPayload>
          }
          findMany: {
            args: Prisma.FireStationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FireStationPayload>[]
          }
          create: {
            args: Prisma.FireStationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FireStationPayload>
          }
          createMany: {
            args: Prisma.FireStationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FireStationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FireStationPayload>[]
          }
          delete: {
            args: Prisma.FireStationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FireStationPayload>
          }
          update: {
            args: Prisma.FireStationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FireStationPayload>
          }
          deleteMany: {
            args: Prisma.FireStationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FireStationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FireStationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FireStationPayload>[]
          }
          upsert: {
            args: Prisma.FireStationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FireStationPayload>
          }
          aggregate: {
            args: Prisma.FireStationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFireStation>
          }
          groupBy: {
            args: Prisma.FireStationGroupByArgs<ExtArgs>
            result: $Utils.Optional<FireStationGroupByOutputType>[]
          }
          count: {
            args: Prisma.FireStationCountArgs<ExtArgs>
            result: $Utils.Optional<FireStationCountAggregateOutputType> | number
          }
        }
      }
      Vehicle: {
        payload: Prisma.$VehiclePayload<ExtArgs>
        fields: Prisma.VehicleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VehicleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VehiclePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VehicleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VehiclePayload>
          }
          findFirst: {
            args: Prisma.VehicleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VehiclePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VehicleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VehiclePayload>
          }
          findMany: {
            args: Prisma.VehicleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VehiclePayload>[]
          }
          create: {
            args: Prisma.VehicleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VehiclePayload>
          }
          createMany: {
            args: Prisma.VehicleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VehicleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VehiclePayload>[]
          }
          delete: {
            args: Prisma.VehicleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VehiclePayload>
          }
          update: {
            args: Prisma.VehicleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VehiclePayload>
          }
          deleteMany: {
            args: Prisma.VehicleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VehicleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.VehicleUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VehiclePayload>[]
          }
          upsert: {
            args: Prisma.VehicleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VehiclePayload>
          }
          aggregate: {
            args: Prisma.VehicleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVehicle>
          }
          groupBy: {
            args: Prisma.VehicleGroupByArgs<ExtArgs>
            result: $Utils.Optional<VehicleGroupByOutputType>[]
          }
          count: {
            args: Prisma.VehicleCountArgs<ExtArgs>
            result: $Utils.Optional<VehicleCountAggregateOutputType> | number
          }
        }
      }
      FireLevel: {
        payload: Prisma.$FireLevelPayload<ExtArgs>
        fields: Prisma.FireLevelFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FireLevelFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FireLevelPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FireLevelFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FireLevelPayload>
          }
          findFirst: {
            args: Prisma.FireLevelFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FireLevelPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FireLevelFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FireLevelPayload>
          }
          findMany: {
            args: Prisma.FireLevelFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FireLevelPayload>[]
          }
          create: {
            args: Prisma.FireLevelCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FireLevelPayload>
          }
          createMany: {
            args: Prisma.FireLevelCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FireLevelCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FireLevelPayload>[]
          }
          delete: {
            args: Prisma.FireLevelDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FireLevelPayload>
          }
          update: {
            args: Prisma.FireLevelUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FireLevelPayload>
          }
          deleteMany: {
            args: Prisma.FireLevelDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FireLevelUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FireLevelUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FireLevelPayload>[]
          }
          upsert: {
            args: Prisma.FireLevelUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FireLevelPayload>
          }
          aggregate: {
            args: Prisma.FireLevelAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFireLevel>
          }
          groupBy: {
            args: Prisma.FireLevelGroupByArgs<ExtArgs>
            result: $Utils.Optional<FireLevelGroupByOutputType>[]
          }
          count: {
            args: Prisma.FireLevelCountArgs<ExtArgs>
            result: $Utils.Optional<FireLevelCountAggregateOutputType> | number
          }
        }
      }
      FireLevelRequirement: {
        payload: Prisma.$FireLevelRequirementPayload<ExtArgs>
        fields: Prisma.FireLevelRequirementFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FireLevelRequirementFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FireLevelRequirementPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FireLevelRequirementFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FireLevelRequirementPayload>
          }
          findFirst: {
            args: Prisma.FireLevelRequirementFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FireLevelRequirementPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FireLevelRequirementFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FireLevelRequirementPayload>
          }
          findMany: {
            args: Prisma.FireLevelRequirementFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FireLevelRequirementPayload>[]
          }
          create: {
            args: Prisma.FireLevelRequirementCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FireLevelRequirementPayload>
          }
          createMany: {
            args: Prisma.FireLevelRequirementCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FireLevelRequirementCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FireLevelRequirementPayload>[]
          }
          delete: {
            args: Prisma.FireLevelRequirementDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FireLevelRequirementPayload>
          }
          update: {
            args: Prisma.FireLevelRequirementUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FireLevelRequirementPayload>
          }
          deleteMany: {
            args: Prisma.FireLevelRequirementDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FireLevelRequirementUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FireLevelRequirementUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FireLevelRequirementPayload>[]
          }
          upsert: {
            args: Prisma.FireLevelRequirementUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FireLevelRequirementPayload>
          }
          aggregate: {
            args: Prisma.FireLevelRequirementAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFireLevelRequirement>
          }
          groupBy: {
            args: Prisma.FireLevelRequirementGroupByArgs<ExtArgs>
            result: $Utils.Optional<FireLevelRequirementGroupByOutputType>[]
          }
          count: {
            args: Prisma.FireLevelRequirementCountArgs<ExtArgs>
            result: $Utils.Optional<FireLevelRequirementCountAggregateOutputType> | number
          }
        }
      }
      FireIncident: {
        payload: Prisma.$FireIncidentPayload<ExtArgs>
        fields: Prisma.FireIncidentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FireIncidentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FireIncidentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FireIncidentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FireIncidentPayload>
          }
          findFirst: {
            args: Prisma.FireIncidentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FireIncidentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FireIncidentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FireIncidentPayload>
          }
          findMany: {
            args: Prisma.FireIncidentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FireIncidentPayload>[]
          }
          create: {
            args: Prisma.FireIncidentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FireIncidentPayload>
          }
          createMany: {
            args: Prisma.FireIncidentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FireIncidentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FireIncidentPayload>[]
          }
          delete: {
            args: Prisma.FireIncidentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FireIncidentPayload>
          }
          update: {
            args: Prisma.FireIncidentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FireIncidentPayload>
          }
          deleteMany: {
            args: Prisma.FireIncidentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FireIncidentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FireIncidentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FireIncidentPayload>[]
          }
          upsert: {
            args: Prisma.FireIncidentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FireIncidentPayload>
          }
          aggregate: {
            args: Prisma.FireIncidentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFireIncident>
          }
          groupBy: {
            args: Prisma.FireIncidentGroupByArgs<ExtArgs>
            result: $Utils.Optional<FireIncidentGroupByOutputType>[]
          }
          count: {
            args: Prisma.FireIncidentCountArgs<ExtArgs>
            result: $Utils.Optional<FireIncidentCountAggregateOutputType> | number
          }
        }
      }
      FireAddressLevel: {
        payload: Prisma.$FireAddressLevelPayload<ExtArgs>
        fields: Prisma.FireAddressLevelFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FireAddressLevelFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FireAddressLevelPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FireAddressLevelFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FireAddressLevelPayload>
          }
          findFirst: {
            args: Prisma.FireAddressLevelFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FireAddressLevelPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FireAddressLevelFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FireAddressLevelPayload>
          }
          findMany: {
            args: Prisma.FireAddressLevelFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FireAddressLevelPayload>[]
          }
          create: {
            args: Prisma.FireAddressLevelCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FireAddressLevelPayload>
          }
          createMany: {
            args: Prisma.FireAddressLevelCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FireAddressLevelCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FireAddressLevelPayload>[]
          }
          delete: {
            args: Prisma.FireAddressLevelDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FireAddressLevelPayload>
          }
          update: {
            args: Prisma.FireAddressLevelUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FireAddressLevelPayload>
          }
          deleteMany: {
            args: Prisma.FireAddressLevelDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FireAddressLevelUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FireAddressLevelUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FireAddressLevelPayload>[]
          }
          upsert: {
            args: Prisma.FireAddressLevelUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FireAddressLevelPayload>
          }
          aggregate: {
            args: Prisma.FireAddressLevelAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFireAddressLevel>
          }
          groupBy: {
            args: Prisma.FireAddressLevelGroupByArgs<ExtArgs>
            result: $Utils.Optional<FireAddressLevelGroupByOutputType>[]
          }
          count: {
            args: Prisma.FireAddressLevelCountArgs<ExtArgs>
            result: $Utils.Optional<FireAddressLevelCountAggregateOutputType> | number
          }
        }
      }
      Report: {
        payload: Prisma.$ReportPayload<ExtArgs>
        fields: Prisma.ReportFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReportFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReportFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>
          }
          findFirst: {
            args: Prisma.ReportFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReportFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>
          }
          findMany: {
            args: Prisma.ReportFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>[]
          }
          create: {
            args: Prisma.ReportCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>
          }
          createMany: {
            args: Prisma.ReportCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ReportCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>[]
          }
          delete: {
            args: Prisma.ReportDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>
          }
          update: {
            args: Prisma.ReportUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>
          }
          deleteMany: {
            args: Prisma.ReportDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReportUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ReportUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>[]
          }
          upsert: {
            args: Prisma.ReportUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>
          }
          aggregate: {
            args: Prisma.ReportAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReport>
          }
          groupBy: {
            args: Prisma.ReportGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReportGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReportCountArgs<ExtArgs>
            result: $Utils.Optional<ReportCountAggregateOutputType> | number
          }
        }
      }
      UserActivity: {
        payload: Prisma.$UserActivityPayload<ExtArgs>
        fields: Prisma.UserActivityFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserActivityFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserActivityPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserActivityFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserActivityPayload>
          }
          findFirst: {
            args: Prisma.UserActivityFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserActivityPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserActivityFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserActivityPayload>
          }
          findMany: {
            args: Prisma.UserActivityFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserActivityPayload>[]
          }
          create: {
            args: Prisma.UserActivityCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserActivityPayload>
          }
          createMany: {
            args: Prisma.UserActivityCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserActivityCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserActivityPayload>[]
          }
          delete: {
            args: Prisma.UserActivityDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserActivityPayload>
          }
          update: {
            args: Prisma.UserActivityUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserActivityPayload>
          }
          deleteMany: {
            args: Prisma.UserActivityDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserActivityUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserActivityUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserActivityPayload>[]
          }
          upsert: {
            args: Prisma.UserActivityUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserActivityPayload>
          }
          aggregate: {
            args: Prisma.UserActivityAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserActivity>
          }
          groupBy: {
            args: Prisma.UserActivityGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserActivityGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserActivityCountArgs<ExtArgs>
            result: $Utils.Optional<UserActivityCountAggregateOutputType> | number
          }
        }
      }
      FireHistory: {
        payload: Prisma.$FireHistoryPayload<ExtArgs>
        fields: Prisma.FireHistoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FireHistoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FireHistoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FireHistoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FireHistoryPayload>
          }
          findFirst: {
            args: Prisma.FireHistoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FireHistoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FireHistoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FireHistoryPayload>
          }
          findMany: {
            args: Prisma.FireHistoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FireHistoryPayload>[]
          }
          create: {
            args: Prisma.FireHistoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FireHistoryPayload>
          }
          createMany: {
            args: Prisma.FireHistoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FireHistoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FireHistoryPayload>[]
          }
          delete: {
            args: Prisma.FireHistoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FireHistoryPayload>
          }
          update: {
            args: Prisma.FireHistoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FireHistoryPayload>
          }
          deleteMany: {
            args: Prisma.FireHistoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FireHistoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FireHistoryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FireHistoryPayload>[]
          }
          upsert: {
            args: Prisma.FireHistoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FireHistoryPayload>
          }
          aggregate: {
            args: Prisma.FireHistoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFireHistory>
          }
          groupBy: {
            args: Prisma.FireHistoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<FireHistoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.FireHistoryCountArgs<ExtArgs>
            result: $Utils.Optional<FireHistoryCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    systemSettings?: SystemSettingsOmit
    user?: UserOmit
    fireStation?: FireStationOmit
    vehicle?: VehicleOmit
    fireLevel?: FireLevelOmit
    fireLevelRequirement?: FireLevelRequirementOmit
    fireIncident?: FireIncidentOmit
    fireAddressLevel?: FireAddressLevelOmit
    report?: ReportOmit
    userActivity?: UserActivityOmit
    fireHistory?: FireHistoryOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    reportedFires: number
    assignedFires: number
    reports: number
    activities: number
    systemUpdates: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reportedFires?: boolean | UserCountOutputTypeCountReportedFiresArgs
    assignedFires?: boolean | UserCountOutputTypeCountAssignedFiresArgs
    reports?: boolean | UserCountOutputTypeCountReportsArgs
    activities?: boolean | UserCountOutputTypeCountActivitiesArgs
    systemUpdates?: boolean | UserCountOutputTypeCountSystemUpdatesArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReportedFiresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FireIncidentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAssignedFiresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FireIncidentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReportWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountActivitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserActivityWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSystemUpdatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SystemSettingsWhereInput
  }


  /**
   * Count Type FireStationCountOutputType
   */

  export type FireStationCountOutputType = {
    users: number
    vehicles: number
    incidents: number
  }

  export type FireStationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | FireStationCountOutputTypeCountUsersArgs
    vehicles?: boolean | FireStationCountOutputTypeCountVehiclesArgs
    incidents?: boolean | FireStationCountOutputTypeCountIncidentsArgs
  }

  // Custom InputTypes
  /**
   * FireStationCountOutputType without action
   */
  export type FireStationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FireStationCountOutputType
     */
    select?: FireStationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * FireStationCountOutputType without action
   */
  export type FireStationCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * FireStationCountOutputType without action
   */
  export type FireStationCountOutputTypeCountVehiclesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VehicleWhereInput
  }

  /**
   * FireStationCountOutputType without action
   */
  export type FireStationCountOutputTypeCountIncidentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FireIncidentWhereInput
  }


  /**
   * Count Type VehicleCountOutputType
   */

  export type VehicleCountOutputType = {
    incidents: number
  }

  export type VehicleCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    incidents?: boolean | VehicleCountOutputTypeCountIncidentsArgs
  }

  // Custom InputTypes
  /**
   * VehicleCountOutputType without action
   */
  export type VehicleCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VehicleCountOutputType
     */
    select?: VehicleCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * VehicleCountOutputType without action
   */
  export type VehicleCountOutputTypeCountIncidentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FireIncidentWhereInput
  }


  /**
   * Count Type FireLevelCountOutputType
   */

  export type FireLevelCountOutputType = {
    incidents: number
    requirements: number
    addressLevels: number
  }

  export type FireLevelCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    incidents?: boolean | FireLevelCountOutputTypeCountIncidentsArgs
    requirements?: boolean | FireLevelCountOutputTypeCountRequirementsArgs
    addressLevels?: boolean | FireLevelCountOutputTypeCountAddressLevelsArgs
  }

  // Custom InputTypes
  /**
   * FireLevelCountOutputType without action
   */
  export type FireLevelCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FireLevelCountOutputType
     */
    select?: FireLevelCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * FireLevelCountOutputType without action
   */
  export type FireLevelCountOutputTypeCountIncidentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FireIncidentWhereInput
  }

  /**
   * FireLevelCountOutputType without action
   */
  export type FireLevelCountOutputTypeCountRequirementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FireLevelRequirementWhereInput
  }

  /**
   * FireLevelCountOutputType without action
   */
  export type FireLevelCountOutputTypeCountAddressLevelsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FireAddressLevelWhereInput
  }


  /**
   * Count Type FireIncidentCountOutputType
   */

  export type FireIncidentCountOutputType = {
    vehicles: number
    reports: number
    history: number
  }

  export type FireIncidentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    vehicles?: boolean | FireIncidentCountOutputTypeCountVehiclesArgs
    reports?: boolean | FireIncidentCountOutputTypeCountReportsArgs
    history?: boolean | FireIncidentCountOutputTypeCountHistoryArgs
  }

  // Custom InputTypes
  /**
   * FireIncidentCountOutputType without action
   */
  export type FireIncidentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FireIncidentCountOutputType
     */
    select?: FireIncidentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * FireIncidentCountOutputType without action
   */
  export type FireIncidentCountOutputTypeCountVehiclesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VehicleWhereInput
  }

  /**
   * FireIncidentCountOutputType without action
   */
  export type FireIncidentCountOutputTypeCountReportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReportWhereInput
  }

  /**
   * FireIncidentCountOutputType without action
   */
  export type FireIncidentCountOutputTypeCountHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FireHistoryWhereInput
  }


  /**
   * Models
   */

  /**
   * Model SystemSettings
   */

  export type AggregateSystemSettings = {
    _count: SystemSettingsCountAggregateOutputType | null
    _avg: SystemSettingsAvgAggregateOutputType | null
    _sum: SystemSettingsSumAggregateOutputType | null
    _min: SystemSettingsMinAggregateOutputType | null
    _max: SystemSettingsMaxAggregateOutputType | null
  }

  export type SystemSettingsAvgAggregateOutputType = {
    id: number | null
    defaultLatitude: number | null
    defaultLongitude: number | null
    defaultZoom: number | null
    updatedById: number | null
  }

  export type SystemSettingsSumAggregateOutputType = {
    id: number | null
    defaultLatitude: number | null
    defaultLongitude: number | null
    defaultZoom: number | null
    updatedById: number | null
  }

  export type SystemSettingsMinAggregateOutputType = {
    id: number | null
    defaultCityName: string | null
    defaultLatitude: number | null
    defaultLongitude: number | null
    defaultZoom: number | null
    updatedAt: Date | null
    updatedById: number | null
  }

  export type SystemSettingsMaxAggregateOutputType = {
    id: number | null
    defaultCityName: string | null
    defaultLatitude: number | null
    defaultLongitude: number | null
    defaultZoom: number | null
    updatedAt: Date | null
    updatedById: number | null
  }

  export type SystemSettingsCountAggregateOutputType = {
    id: number
    defaultCityName: number
    defaultLatitude: number
    defaultLongitude: number
    defaultZoom: number
    updatedAt: number
    updatedById: number
    _all: number
  }


  export type SystemSettingsAvgAggregateInputType = {
    id?: true
    defaultLatitude?: true
    defaultLongitude?: true
    defaultZoom?: true
    updatedById?: true
  }

  export type SystemSettingsSumAggregateInputType = {
    id?: true
    defaultLatitude?: true
    defaultLongitude?: true
    defaultZoom?: true
    updatedById?: true
  }

  export type SystemSettingsMinAggregateInputType = {
    id?: true
    defaultCityName?: true
    defaultLatitude?: true
    defaultLongitude?: true
    defaultZoom?: true
    updatedAt?: true
    updatedById?: true
  }

  export type SystemSettingsMaxAggregateInputType = {
    id?: true
    defaultCityName?: true
    defaultLatitude?: true
    defaultLongitude?: true
    defaultZoom?: true
    updatedAt?: true
    updatedById?: true
  }

  export type SystemSettingsCountAggregateInputType = {
    id?: true
    defaultCityName?: true
    defaultLatitude?: true
    defaultLongitude?: true
    defaultZoom?: true
    updatedAt?: true
    updatedById?: true
    _all?: true
  }

  export type SystemSettingsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SystemSettings to aggregate.
     */
    where?: SystemSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemSettings to fetch.
     */
    orderBy?: SystemSettingsOrderByWithRelationInput | SystemSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SystemSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SystemSettings
    **/
    _count?: true | SystemSettingsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SystemSettingsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SystemSettingsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SystemSettingsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SystemSettingsMaxAggregateInputType
  }

  export type GetSystemSettingsAggregateType<T extends SystemSettingsAggregateArgs> = {
        [P in keyof T & keyof AggregateSystemSettings]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSystemSettings[P]>
      : GetScalarType<T[P], AggregateSystemSettings[P]>
  }




  export type SystemSettingsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SystemSettingsWhereInput
    orderBy?: SystemSettingsOrderByWithAggregationInput | SystemSettingsOrderByWithAggregationInput[]
    by: SystemSettingsScalarFieldEnum[] | SystemSettingsScalarFieldEnum
    having?: SystemSettingsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SystemSettingsCountAggregateInputType | true
    _avg?: SystemSettingsAvgAggregateInputType
    _sum?: SystemSettingsSumAggregateInputType
    _min?: SystemSettingsMinAggregateInputType
    _max?: SystemSettingsMaxAggregateInputType
  }

  export type SystemSettingsGroupByOutputType = {
    id: number
    defaultCityName: string
    defaultLatitude: number
    defaultLongitude: number
    defaultZoom: number
    updatedAt: Date
    updatedById: number | null
    _count: SystemSettingsCountAggregateOutputType | null
    _avg: SystemSettingsAvgAggregateOutputType | null
    _sum: SystemSettingsSumAggregateOutputType | null
    _min: SystemSettingsMinAggregateOutputType | null
    _max: SystemSettingsMaxAggregateOutputType | null
  }

  type GetSystemSettingsGroupByPayload<T extends SystemSettingsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SystemSettingsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SystemSettingsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SystemSettingsGroupByOutputType[P]>
            : GetScalarType<T[P], SystemSettingsGroupByOutputType[P]>
        }
      >
    >


  export type SystemSettingsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    defaultCityName?: boolean
    defaultLatitude?: boolean
    defaultLongitude?: boolean
    defaultZoom?: boolean
    updatedAt?: boolean
    updatedById?: boolean
    updatedBy?: boolean | SystemSettings$updatedByArgs<ExtArgs>
  }, ExtArgs["result"]["systemSettings"]>

  export type SystemSettingsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    defaultCityName?: boolean
    defaultLatitude?: boolean
    defaultLongitude?: boolean
    defaultZoom?: boolean
    updatedAt?: boolean
    updatedById?: boolean
    updatedBy?: boolean | SystemSettings$updatedByArgs<ExtArgs>
  }, ExtArgs["result"]["systemSettings"]>

  export type SystemSettingsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    defaultCityName?: boolean
    defaultLatitude?: boolean
    defaultLongitude?: boolean
    defaultZoom?: boolean
    updatedAt?: boolean
    updatedById?: boolean
    updatedBy?: boolean | SystemSettings$updatedByArgs<ExtArgs>
  }, ExtArgs["result"]["systemSettings"]>

  export type SystemSettingsSelectScalar = {
    id?: boolean
    defaultCityName?: boolean
    defaultLatitude?: boolean
    defaultLongitude?: boolean
    defaultZoom?: boolean
    updatedAt?: boolean
    updatedById?: boolean
  }

  export type SystemSettingsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "defaultCityName" | "defaultLatitude" | "defaultLongitude" | "defaultZoom" | "updatedAt" | "updatedById", ExtArgs["result"]["systemSettings"]>
  export type SystemSettingsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    updatedBy?: boolean | SystemSettings$updatedByArgs<ExtArgs>
  }
  export type SystemSettingsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    updatedBy?: boolean | SystemSettings$updatedByArgs<ExtArgs>
  }
  export type SystemSettingsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    updatedBy?: boolean | SystemSettings$updatedByArgs<ExtArgs>
  }

  export type $SystemSettingsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SystemSettings"
    objects: {
      updatedBy: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      defaultCityName: string
      defaultLatitude: number
      defaultLongitude: number
      defaultZoom: number
      updatedAt: Date
      updatedById: number | null
    }, ExtArgs["result"]["systemSettings"]>
    composites: {}
  }

  type SystemSettingsGetPayload<S extends boolean | null | undefined | SystemSettingsDefaultArgs> = $Result.GetResult<Prisma.$SystemSettingsPayload, S>

  type SystemSettingsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SystemSettingsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SystemSettingsCountAggregateInputType | true
    }

  export interface SystemSettingsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SystemSettings'], meta: { name: 'SystemSettings' } }
    /**
     * Find zero or one SystemSettings that matches the filter.
     * @param {SystemSettingsFindUniqueArgs} args - Arguments to find a SystemSettings
     * @example
     * // Get one SystemSettings
     * const systemSettings = await prisma.systemSettings.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SystemSettingsFindUniqueArgs>(args: SelectSubset<T, SystemSettingsFindUniqueArgs<ExtArgs>>): Prisma__SystemSettingsClient<$Result.GetResult<Prisma.$SystemSettingsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SystemSettings that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SystemSettingsFindUniqueOrThrowArgs} args - Arguments to find a SystemSettings
     * @example
     * // Get one SystemSettings
     * const systemSettings = await prisma.systemSettings.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SystemSettingsFindUniqueOrThrowArgs>(args: SelectSubset<T, SystemSettingsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SystemSettingsClient<$Result.GetResult<Prisma.$SystemSettingsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SystemSettings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemSettingsFindFirstArgs} args - Arguments to find a SystemSettings
     * @example
     * // Get one SystemSettings
     * const systemSettings = await prisma.systemSettings.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SystemSettingsFindFirstArgs>(args?: SelectSubset<T, SystemSettingsFindFirstArgs<ExtArgs>>): Prisma__SystemSettingsClient<$Result.GetResult<Prisma.$SystemSettingsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SystemSettings that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemSettingsFindFirstOrThrowArgs} args - Arguments to find a SystemSettings
     * @example
     * // Get one SystemSettings
     * const systemSettings = await prisma.systemSettings.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SystemSettingsFindFirstOrThrowArgs>(args?: SelectSubset<T, SystemSettingsFindFirstOrThrowArgs<ExtArgs>>): Prisma__SystemSettingsClient<$Result.GetResult<Prisma.$SystemSettingsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SystemSettings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemSettingsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SystemSettings
     * const systemSettings = await prisma.systemSettings.findMany()
     * 
     * // Get first 10 SystemSettings
     * const systemSettings = await prisma.systemSettings.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const systemSettingsWithIdOnly = await prisma.systemSettings.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SystemSettingsFindManyArgs>(args?: SelectSubset<T, SystemSettingsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SystemSettingsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SystemSettings.
     * @param {SystemSettingsCreateArgs} args - Arguments to create a SystemSettings.
     * @example
     * // Create one SystemSettings
     * const SystemSettings = await prisma.systemSettings.create({
     *   data: {
     *     // ... data to create a SystemSettings
     *   }
     * })
     * 
     */
    create<T extends SystemSettingsCreateArgs>(args: SelectSubset<T, SystemSettingsCreateArgs<ExtArgs>>): Prisma__SystemSettingsClient<$Result.GetResult<Prisma.$SystemSettingsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SystemSettings.
     * @param {SystemSettingsCreateManyArgs} args - Arguments to create many SystemSettings.
     * @example
     * // Create many SystemSettings
     * const systemSettings = await prisma.systemSettings.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SystemSettingsCreateManyArgs>(args?: SelectSubset<T, SystemSettingsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SystemSettings and returns the data saved in the database.
     * @param {SystemSettingsCreateManyAndReturnArgs} args - Arguments to create many SystemSettings.
     * @example
     * // Create many SystemSettings
     * const systemSettings = await prisma.systemSettings.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SystemSettings and only return the `id`
     * const systemSettingsWithIdOnly = await prisma.systemSettings.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SystemSettingsCreateManyAndReturnArgs>(args?: SelectSubset<T, SystemSettingsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SystemSettingsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SystemSettings.
     * @param {SystemSettingsDeleteArgs} args - Arguments to delete one SystemSettings.
     * @example
     * // Delete one SystemSettings
     * const SystemSettings = await prisma.systemSettings.delete({
     *   where: {
     *     // ... filter to delete one SystemSettings
     *   }
     * })
     * 
     */
    delete<T extends SystemSettingsDeleteArgs>(args: SelectSubset<T, SystemSettingsDeleteArgs<ExtArgs>>): Prisma__SystemSettingsClient<$Result.GetResult<Prisma.$SystemSettingsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SystemSettings.
     * @param {SystemSettingsUpdateArgs} args - Arguments to update one SystemSettings.
     * @example
     * // Update one SystemSettings
     * const systemSettings = await prisma.systemSettings.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SystemSettingsUpdateArgs>(args: SelectSubset<T, SystemSettingsUpdateArgs<ExtArgs>>): Prisma__SystemSettingsClient<$Result.GetResult<Prisma.$SystemSettingsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SystemSettings.
     * @param {SystemSettingsDeleteManyArgs} args - Arguments to filter SystemSettings to delete.
     * @example
     * // Delete a few SystemSettings
     * const { count } = await prisma.systemSettings.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SystemSettingsDeleteManyArgs>(args?: SelectSubset<T, SystemSettingsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SystemSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemSettingsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SystemSettings
     * const systemSettings = await prisma.systemSettings.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SystemSettingsUpdateManyArgs>(args: SelectSubset<T, SystemSettingsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SystemSettings and returns the data updated in the database.
     * @param {SystemSettingsUpdateManyAndReturnArgs} args - Arguments to update many SystemSettings.
     * @example
     * // Update many SystemSettings
     * const systemSettings = await prisma.systemSettings.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SystemSettings and only return the `id`
     * const systemSettingsWithIdOnly = await prisma.systemSettings.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SystemSettingsUpdateManyAndReturnArgs>(args: SelectSubset<T, SystemSettingsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SystemSettingsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SystemSettings.
     * @param {SystemSettingsUpsertArgs} args - Arguments to update or create a SystemSettings.
     * @example
     * // Update or create a SystemSettings
     * const systemSettings = await prisma.systemSettings.upsert({
     *   create: {
     *     // ... data to create a SystemSettings
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SystemSettings we want to update
     *   }
     * })
     */
    upsert<T extends SystemSettingsUpsertArgs>(args: SelectSubset<T, SystemSettingsUpsertArgs<ExtArgs>>): Prisma__SystemSettingsClient<$Result.GetResult<Prisma.$SystemSettingsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SystemSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemSettingsCountArgs} args - Arguments to filter SystemSettings to count.
     * @example
     * // Count the number of SystemSettings
     * const count = await prisma.systemSettings.count({
     *   where: {
     *     // ... the filter for the SystemSettings we want to count
     *   }
     * })
    **/
    count<T extends SystemSettingsCountArgs>(
      args?: Subset<T, SystemSettingsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SystemSettingsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SystemSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemSettingsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SystemSettingsAggregateArgs>(args: Subset<T, SystemSettingsAggregateArgs>): Prisma.PrismaPromise<GetSystemSettingsAggregateType<T>>

    /**
     * Group by SystemSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemSettingsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SystemSettingsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SystemSettingsGroupByArgs['orderBy'] }
        : { orderBy?: SystemSettingsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SystemSettingsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSystemSettingsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SystemSettings model
   */
  readonly fields: SystemSettingsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SystemSettings.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SystemSettingsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    updatedBy<T extends SystemSettings$updatedByArgs<ExtArgs> = {}>(args?: Subset<T, SystemSettings$updatedByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SystemSettings model
   */
  interface SystemSettingsFieldRefs {
    readonly id: FieldRef<"SystemSettings", 'Int'>
    readonly defaultCityName: FieldRef<"SystemSettings", 'String'>
    readonly defaultLatitude: FieldRef<"SystemSettings", 'Float'>
    readonly defaultLongitude: FieldRef<"SystemSettings", 'Float'>
    readonly defaultZoom: FieldRef<"SystemSettings", 'Int'>
    readonly updatedAt: FieldRef<"SystemSettings", 'DateTime'>
    readonly updatedById: FieldRef<"SystemSettings", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * SystemSettings findUnique
   */
  export type SystemSettingsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSettings
     */
    select?: SystemSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemSettings
     */
    omit?: SystemSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SystemSettingsInclude<ExtArgs> | null
    /**
     * Filter, which SystemSettings to fetch.
     */
    where: SystemSettingsWhereUniqueInput
  }

  /**
   * SystemSettings findUniqueOrThrow
   */
  export type SystemSettingsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSettings
     */
    select?: SystemSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemSettings
     */
    omit?: SystemSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SystemSettingsInclude<ExtArgs> | null
    /**
     * Filter, which SystemSettings to fetch.
     */
    where: SystemSettingsWhereUniqueInput
  }

  /**
   * SystemSettings findFirst
   */
  export type SystemSettingsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSettings
     */
    select?: SystemSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemSettings
     */
    omit?: SystemSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SystemSettingsInclude<ExtArgs> | null
    /**
     * Filter, which SystemSettings to fetch.
     */
    where?: SystemSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemSettings to fetch.
     */
    orderBy?: SystemSettingsOrderByWithRelationInput | SystemSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SystemSettings.
     */
    cursor?: SystemSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SystemSettings.
     */
    distinct?: SystemSettingsScalarFieldEnum | SystemSettingsScalarFieldEnum[]
  }

  /**
   * SystemSettings findFirstOrThrow
   */
  export type SystemSettingsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSettings
     */
    select?: SystemSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemSettings
     */
    omit?: SystemSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SystemSettingsInclude<ExtArgs> | null
    /**
     * Filter, which SystemSettings to fetch.
     */
    where?: SystemSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemSettings to fetch.
     */
    orderBy?: SystemSettingsOrderByWithRelationInput | SystemSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SystemSettings.
     */
    cursor?: SystemSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SystemSettings.
     */
    distinct?: SystemSettingsScalarFieldEnum | SystemSettingsScalarFieldEnum[]
  }

  /**
   * SystemSettings findMany
   */
  export type SystemSettingsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSettings
     */
    select?: SystemSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemSettings
     */
    omit?: SystemSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SystemSettingsInclude<ExtArgs> | null
    /**
     * Filter, which SystemSettings to fetch.
     */
    where?: SystemSettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemSettings to fetch.
     */
    orderBy?: SystemSettingsOrderByWithRelationInput | SystemSettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SystemSettings.
     */
    cursor?: SystemSettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemSettings.
     */
    skip?: number
    distinct?: SystemSettingsScalarFieldEnum | SystemSettingsScalarFieldEnum[]
  }

  /**
   * SystemSettings create
   */
  export type SystemSettingsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSettings
     */
    select?: SystemSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemSettings
     */
    omit?: SystemSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SystemSettingsInclude<ExtArgs> | null
    /**
     * The data needed to create a SystemSettings.
     */
    data: XOR<SystemSettingsCreateInput, SystemSettingsUncheckedCreateInput>
  }

  /**
   * SystemSettings createMany
   */
  export type SystemSettingsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SystemSettings.
     */
    data: SystemSettingsCreateManyInput | SystemSettingsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SystemSettings createManyAndReturn
   */
  export type SystemSettingsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSettings
     */
    select?: SystemSettingsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SystemSettings
     */
    omit?: SystemSettingsOmit<ExtArgs> | null
    /**
     * The data used to create many SystemSettings.
     */
    data: SystemSettingsCreateManyInput | SystemSettingsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SystemSettingsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SystemSettings update
   */
  export type SystemSettingsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSettings
     */
    select?: SystemSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemSettings
     */
    omit?: SystemSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SystemSettingsInclude<ExtArgs> | null
    /**
     * The data needed to update a SystemSettings.
     */
    data: XOR<SystemSettingsUpdateInput, SystemSettingsUncheckedUpdateInput>
    /**
     * Choose, which SystemSettings to update.
     */
    where: SystemSettingsWhereUniqueInput
  }

  /**
   * SystemSettings updateMany
   */
  export type SystemSettingsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SystemSettings.
     */
    data: XOR<SystemSettingsUpdateManyMutationInput, SystemSettingsUncheckedUpdateManyInput>
    /**
     * Filter which SystemSettings to update
     */
    where?: SystemSettingsWhereInput
    /**
     * Limit how many SystemSettings to update.
     */
    limit?: number
  }

  /**
   * SystemSettings updateManyAndReturn
   */
  export type SystemSettingsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSettings
     */
    select?: SystemSettingsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SystemSettings
     */
    omit?: SystemSettingsOmit<ExtArgs> | null
    /**
     * The data used to update SystemSettings.
     */
    data: XOR<SystemSettingsUpdateManyMutationInput, SystemSettingsUncheckedUpdateManyInput>
    /**
     * Filter which SystemSettings to update
     */
    where?: SystemSettingsWhereInput
    /**
     * Limit how many SystemSettings to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SystemSettingsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * SystemSettings upsert
   */
  export type SystemSettingsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSettings
     */
    select?: SystemSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemSettings
     */
    omit?: SystemSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SystemSettingsInclude<ExtArgs> | null
    /**
     * The filter to search for the SystemSettings to update in case it exists.
     */
    where: SystemSettingsWhereUniqueInput
    /**
     * In case the SystemSettings found by the `where` argument doesn't exist, create a new SystemSettings with this data.
     */
    create: XOR<SystemSettingsCreateInput, SystemSettingsUncheckedCreateInput>
    /**
     * In case the SystemSettings was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SystemSettingsUpdateInput, SystemSettingsUncheckedUpdateInput>
  }

  /**
   * SystemSettings delete
   */
  export type SystemSettingsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSettings
     */
    select?: SystemSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemSettings
     */
    omit?: SystemSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SystemSettingsInclude<ExtArgs> | null
    /**
     * Filter which SystemSettings to delete.
     */
    where: SystemSettingsWhereUniqueInput
  }

  /**
   * SystemSettings deleteMany
   */
  export type SystemSettingsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SystemSettings to delete
     */
    where?: SystemSettingsWhereInput
    /**
     * Limit how many SystemSettings to delete.
     */
    limit?: number
  }

  /**
   * SystemSettings.updatedBy
   */
  export type SystemSettings$updatedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * SystemSettings without action
   */
  export type SystemSettingsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSettings
     */
    select?: SystemSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemSettings
     */
    omit?: SystemSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SystemSettingsInclude<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
    fireStationId: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
    fireStationId: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    username: string | null
    password: string | null
    role: $Enums.UserRole | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
    fireStationId: number | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    username: string | null
    password: string | null
    role: $Enums.UserRole | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
    fireStationId: number | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    username: number
    password: number
    role: number
    name: number
    createdAt: number
    updatedAt: number
    fireStationId: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
    fireStationId?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
    fireStationId?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    username?: true
    password?: true
    role?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    fireStationId?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    username?: true
    password?: true
    role?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    fireStationId?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    username?: true
    password?: true
    role?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    fireStationId?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    username: string
    password: string
    role: $Enums.UserRole
    name: string
    createdAt: Date
    updatedAt: Date
    fireStationId: number | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    password?: boolean
    role?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    fireStationId?: boolean
    fireStation?: boolean | User$fireStationArgs<ExtArgs>
    reportedFires?: boolean | User$reportedFiresArgs<ExtArgs>
    assignedFires?: boolean | User$assignedFiresArgs<ExtArgs>
    reports?: boolean | User$reportsArgs<ExtArgs>
    activities?: boolean | User$activitiesArgs<ExtArgs>
    systemUpdates?: boolean | User$systemUpdatesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    password?: boolean
    role?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    fireStationId?: boolean
    fireStation?: boolean | User$fireStationArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    password?: boolean
    role?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    fireStationId?: boolean
    fireStation?: boolean | User$fireStationArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    username?: boolean
    password?: boolean
    role?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    fireStationId?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "username" | "password" | "role" | "name" | "createdAt" | "updatedAt" | "fireStationId", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    fireStation?: boolean | User$fireStationArgs<ExtArgs>
    reportedFires?: boolean | User$reportedFiresArgs<ExtArgs>
    assignedFires?: boolean | User$assignedFiresArgs<ExtArgs>
    reports?: boolean | User$reportsArgs<ExtArgs>
    activities?: boolean | User$activitiesArgs<ExtArgs>
    systemUpdates?: boolean | User$systemUpdatesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    fireStation?: boolean | User$fireStationArgs<ExtArgs>
  }
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    fireStation?: boolean | User$fireStationArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      fireStation: Prisma.$FireStationPayload<ExtArgs> | null
      reportedFires: Prisma.$FireIncidentPayload<ExtArgs>[]
      assignedFires: Prisma.$FireIncidentPayload<ExtArgs>[]
      reports: Prisma.$ReportPayload<ExtArgs>[]
      activities: Prisma.$UserActivityPayload<ExtArgs>[]
      systemUpdates: Prisma.$SystemSettingsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      username: string
      password: string
      role: $Enums.UserRole
      name: string
      createdAt: Date
      updatedAt: Date
      fireStationId: number | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    fireStation<T extends User$fireStationArgs<ExtArgs> = {}>(args?: Subset<T, User$fireStationArgs<ExtArgs>>): Prisma__FireStationClient<$Result.GetResult<Prisma.$FireStationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    reportedFires<T extends User$reportedFiresArgs<ExtArgs> = {}>(args?: Subset<T, User$reportedFiresArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FireIncidentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    assignedFires<T extends User$assignedFiresArgs<ExtArgs> = {}>(args?: Subset<T, User$assignedFiresArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FireIncidentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    reports<T extends User$reportsArgs<ExtArgs> = {}>(args?: Subset<T, User$reportsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    activities<T extends User$activitiesArgs<ExtArgs> = {}>(args?: Subset<T, User$activitiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserActivityPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    systemUpdates<T extends User$systemUpdatesArgs<ExtArgs> = {}>(args?: Subset<T, User$systemUpdatesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SystemSettingsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly username: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'UserRole'>
    readonly name: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly fireStationId: FieldRef<"User", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.fireStation
   */
  export type User$fireStationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FireStation
     */
    select?: FireStationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FireStation
     */
    omit?: FireStationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FireStationInclude<ExtArgs> | null
    where?: FireStationWhereInput
  }

  /**
   * User.reportedFires
   */
  export type User$reportedFiresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FireIncident
     */
    select?: FireIncidentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FireIncident
     */
    omit?: FireIncidentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FireIncidentInclude<ExtArgs> | null
    where?: FireIncidentWhereInput
    orderBy?: FireIncidentOrderByWithRelationInput | FireIncidentOrderByWithRelationInput[]
    cursor?: FireIncidentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FireIncidentScalarFieldEnum | FireIncidentScalarFieldEnum[]
  }

  /**
   * User.assignedFires
   */
  export type User$assignedFiresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FireIncident
     */
    select?: FireIncidentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FireIncident
     */
    omit?: FireIncidentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FireIncidentInclude<ExtArgs> | null
    where?: FireIncidentWhereInput
    orderBy?: FireIncidentOrderByWithRelationInput | FireIncidentOrderByWithRelationInput[]
    cursor?: FireIncidentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FireIncidentScalarFieldEnum | FireIncidentScalarFieldEnum[]
  }

  /**
   * User.reports
   */
  export type User$reportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Report
     */
    omit?: ReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    where?: ReportWhereInput
    orderBy?: ReportOrderByWithRelationInput | ReportOrderByWithRelationInput[]
    cursor?: ReportWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReportScalarFieldEnum | ReportScalarFieldEnum[]
  }

  /**
   * User.activities
   */
  export type User$activitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserActivity
     */
    select?: UserActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserActivity
     */
    omit?: UserActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserActivityInclude<ExtArgs> | null
    where?: UserActivityWhereInput
    orderBy?: UserActivityOrderByWithRelationInput | UserActivityOrderByWithRelationInput[]
    cursor?: UserActivityWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserActivityScalarFieldEnum | UserActivityScalarFieldEnum[]
  }

  /**
   * User.systemUpdates
   */
  export type User$systemUpdatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemSettings
     */
    select?: SystemSettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SystemSettings
     */
    omit?: SystemSettingsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SystemSettingsInclude<ExtArgs> | null
    where?: SystemSettingsWhereInput
    orderBy?: SystemSettingsOrderByWithRelationInput | SystemSettingsOrderByWithRelationInput[]
    cursor?: SystemSettingsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SystemSettingsScalarFieldEnum | SystemSettingsScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model FireStation
   */

  export type AggregateFireStation = {
    _count: FireStationCountAggregateOutputType | null
    _avg: FireStationAvgAggregateOutputType | null
    _sum: FireStationSumAggregateOutputType | null
    _min: FireStationMinAggregateOutputType | null
    _max: FireStationMaxAggregateOutputType | null
  }

  export type FireStationAvgAggregateOutputType = {
    id: number | null
    latitude: number | null
    longitude: number | null
  }

  export type FireStationSumAggregateOutputType = {
    id: number | null
    latitude: number | null
    longitude: number | null
  }

  export type FireStationMinAggregateOutputType = {
    id: number | null
    name: string | null
    address: string | null
    latitude: number | null
    longitude: number | null
    phoneNumber: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FireStationMaxAggregateOutputType = {
    id: number | null
    name: string | null
    address: string | null
    latitude: number | null
    longitude: number | null
    phoneNumber: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FireStationCountAggregateOutputType = {
    id: number
    name: number
    address: number
    latitude: number
    longitude: number
    phoneNumber: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type FireStationAvgAggregateInputType = {
    id?: true
    latitude?: true
    longitude?: true
  }

  export type FireStationSumAggregateInputType = {
    id?: true
    latitude?: true
    longitude?: true
  }

  export type FireStationMinAggregateInputType = {
    id?: true
    name?: true
    address?: true
    latitude?: true
    longitude?: true
    phoneNumber?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FireStationMaxAggregateInputType = {
    id?: true
    name?: true
    address?: true
    latitude?: true
    longitude?: true
    phoneNumber?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FireStationCountAggregateInputType = {
    id?: true
    name?: true
    address?: true
    latitude?: true
    longitude?: true
    phoneNumber?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type FireStationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FireStation to aggregate.
     */
    where?: FireStationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FireStations to fetch.
     */
    orderBy?: FireStationOrderByWithRelationInput | FireStationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FireStationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FireStations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FireStations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FireStations
    **/
    _count?: true | FireStationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FireStationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FireStationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FireStationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FireStationMaxAggregateInputType
  }

  export type GetFireStationAggregateType<T extends FireStationAggregateArgs> = {
        [P in keyof T & keyof AggregateFireStation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFireStation[P]>
      : GetScalarType<T[P], AggregateFireStation[P]>
  }




  export type FireStationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FireStationWhereInput
    orderBy?: FireStationOrderByWithAggregationInput | FireStationOrderByWithAggregationInput[]
    by: FireStationScalarFieldEnum[] | FireStationScalarFieldEnum
    having?: FireStationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FireStationCountAggregateInputType | true
    _avg?: FireStationAvgAggregateInputType
    _sum?: FireStationSumAggregateInputType
    _min?: FireStationMinAggregateInputType
    _max?: FireStationMaxAggregateInputType
  }

  export type FireStationGroupByOutputType = {
    id: number
    name: string
    address: string
    latitude: number
    longitude: number
    phoneNumber: string | null
    createdAt: Date
    updatedAt: Date
    _count: FireStationCountAggregateOutputType | null
    _avg: FireStationAvgAggregateOutputType | null
    _sum: FireStationSumAggregateOutputType | null
    _min: FireStationMinAggregateOutputType | null
    _max: FireStationMaxAggregateOutputType | null
  }

  type GetFireStationGroupByPayload<T extends FireStationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FireStationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FireStationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FireStationGroupByOutputType[P]>
            : GetScalarType<T[P], FireStationGroupByOutputType[P]>
        }
      >
    >


  export type FireStationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    address?: boolean
    latitude?: boolean
    longitude?: boolean
    phoneNumber?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    users?: boolean | FireStation$usersArgs<ExtArgs>
    vehicles?: boolean | FireStation$vehiclesArgs<ExtArgs>
    incidents?: boolean | FireStation$incidentsArgs<ExtArgs>
    _count?: boolean | FireStationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["fireStation"]>

  export type FireStationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    address?: boolean
    latitude?: boolean
    longitude?: boolean
    phoneNumber?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["fireStation"]>

  export type FireStationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    address?: boolean
    latitude?: boolean
    longitude?: boolean
    phoneNumber?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["fireStation"]>

  export type FireStationSelectScalar = {
    id?: boolean
    name?: boolean
    address?: boolean
    latitude?: boolean
    longitude?: boolean
    phoneNumber?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type FireStationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "address" | "latitude" | "longitude" | "phoneNumber" | "createdAt" | "updatedAt", ExtArgs["result"]["fireStation"]>
  export type FireStationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | FireStation$usersArgs<ExtArgs>
    vehicles?: boolean | FireStation$vehiclesArgs<ExtArgs>
    incidents?: boolean | FireStation$incidentsArgs<ExtArgs>
    _count?: boolean | FireStationCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type FireStationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type FireStationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $FireStationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FireStation"
    objects: {
      users: Prisma.$UserPayload<ExtArgs>[]
      vehicles: Prisma.$VehiclePayload<ExtArgs>[]
      incidents: Prisma.$FireIncidentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      address: string
      latitude: number
      longitude: number
      phoneNumber: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["fireStation"]>
    composites: {}
  }

  type FireStationGetPayload<S extends boolean | null | undefined | FireStationDefaultArgs> = $Result.GetResult<Prisma.$FireStationPayload, S>

  type FireStationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FireStationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FireStationCountAggregateInputType | true
    }

  export interface FireStationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FireStation'], meta: { name: 'FireStation' } }
    /**
     * Find zero or one FireStation that matches the filter.
     * @param {FireStationFindUniqueArgs} args - Arguments to find a FireStation
     * @example
     * // Get one FireStation
     * const fireStation = await prisma.fireStation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FireStationFindUniqueArgs>(args: SelectSubset<T, FireStationFindUniqueArgs<ExtArgs>>): Prisma__FireStationClient<$Result.GetResult<Prisma.$FireStationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one FireStation that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FireStationFindUniqueOrThrowArgs} args - Arguments to find a FireStation
     * @example
     * // Get one FireStation
     * const fireStation = await prisma.fireStation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FireStationFindUniqueOrThrowArgs>(args: SelectSubset<T, FireStationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FireStationClient<$Result.GetResult<Prisma.$FireStationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FireStation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FireStationFindFirstArgs} args - Arguments to find a FireStation
     * @example
     * // Get one FireStation
     * const fireStation = await prisma.fireStation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FireStationFindFirstArgs>(args?: SelectSubset<T, FireStationFindFirstArgs<ExtArgs>>): Prisma__FireStationClient<$Result.GetResult<Prisma.$FireStationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FireStation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FireStationFindFirstOrThrowArgs} args - Arguments to find a FireStation
     * @example
     * // Get one FireStation
     * const fireStation = await prisma.fireStation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FireStationFindFirstOrThrowArgs>(args?: SelectSubset<T, FireStationFindFirstOrThrowArgs<ExtArgs>>): Prisma__FireStationClient<$Result.GetResult<Prisma.$FireStationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more FireStations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FireStationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FireStations
     * const fireStations = await prisma.fireStation.findMany()
     * 
     * // Get first 10 FireStations
     * const fireStations = await prisma.fireStation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const fireStationWithIdOnly = await prisma.fireStation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FireStationFindManyArgs>(args?: SelectSubset<T, FireStationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FireStationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a FireStation.
     * @param {FireStationCreateArgs} args - Arguments to create a FireStation.
     * @example
     * // Create one FireStation
     * const FireStation = await prisma.fireStation.create({
     *   data: {
     *     // ... data to create a FireStation
     *   }
     * })
     * 
     */
    create<T extends FireStationCreateArgs>(args: SelectSubset<T, FireStationCreateArgs<ExtArgs>>): Prisma__FireStationClient<$Result.GetResult<Prisma.$FireStationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many FireStations.
     * @param {FireStationCreateManyArgs} args - Arguments to create many FireStations.
     * @example
     * // Create many FireStations
     * const fireStation = await prisma.fireStation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FireStationCreateManyArgs>(args?: SelectSubset<T, FireStationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FireStations and returns the data saved in the database.
     * @param {FireStationCreateManyAndReturnArgs} args - Arguments to create many FireStations.
     * @example
     * // Create many FireStations
     * const fireStation = await prisma.fireStation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FireStations and only return the `id`
     * const fireStationWithIdOnly = await prisma.fireStation.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FireStationCreateManyAndReturnArgs>(args?: SelectSubset<T, FireStationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FireStationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a FireStation.
     * @param {FireStationDeleteArgs} args - Arguments to delete one FireStation.
     * @example
     * // Delete one FireStation
     * const FireStation = await prisma.fireStation.delete({
     *   where: {
     *     // ... filter to delete one FireStation
     *   }
     * })
     * 
     */
    delete<T extends FireStationDeleteArgs>(args: SelectSubset<T, FireStationDeleteArgs<ExtArgs>>): Prisma__FireStationClient<$Result.GetResult<Prisma.$FireStationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one FireStation.
     * @param {FireStationUpdateArgs} args - Arguments to update one FireStation.
     * @example
     * // Update one FireStation
     * const fireStation = await prisma.fireStation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FireStationUpdateArgs>(args: SelectSubset<T, FireStationUpdateArgs<ExtArgs>>): Prisma__FireStationClient<$Result.GetResult<Prisma.$FireStationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more FireStations.
     * @param {FireStationDeleteManyArgs} args - Arguments to filter FireStations to delete.
     * @example
     * // Delete a few FireStations
     * const { count } = await prisma.fireStation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FireStationDeleteManyArgs>(args?: SelectSubset<T, FireStationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FireStations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FireStationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FireStations
     * const fireStation = await prisma.fireStation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FireStationUpdateManyArgs>(args: SelectSubset<T, FireStationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FireStations and returns the data updated in the database.
     * @param {FireStationUpdateManyAndReturnArgs} args - Arguments to update many FireStations.
     * @example
     * // Update many FireStations
     * const fireStation = await prisma.fireStation.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more FireStations and only return the `id`
     * const fireStationWithIdOnly = await prisma.fireStation.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FireStationUpdateManyAndReturnArgs>(args: SelectSubset<T, FireStationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FireStationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one FireStation.
     * @param {FireStationUpsertArgs} args - Arguments to update or create a FireStation.
     * @example
     * // Update or create a FireStation
     * const fireStation = await prisma.fireStation.upsert({
     *   create: {
     *     // ... data to create a FireStation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FireStation we want to update
     *   }
     * })
     */
    upsert<T extends FireStationUpsertArgs>(args: SelectSubset<T, FireStationUpsertArgs<ExtArgs>>): Prisma__FireStationClient<$Result.GetResult<Prisma.$FireStationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of FireStations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FireStationCountArgs} args - Arguments to filter FireStations to count.
     * @example
     * // Count the number of FireStations
     * const count = await prisma.fireStation.count({
     *   where: {
     *     // ... the filter for the FireStations we want to count
     *   }
     * })
    **/
    count<T extends FireStationCountArgs>(
      args?: Subset<T, FireStationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FireStationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FireStation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FireStationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FireStationAggregateArgs>(args: Subset<T, FireStationAggregateArgs>): Prisma.PrismaPromise<GetFireStationAggregateType<T>>

    /**
     * Group by FireStation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FireStationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FireStationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FireStationGroupByArgs['orderBy'] }
        : { orderBy?: FireStationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FireStationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFireStationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FireStation model
   */
  readonly fields: FireStationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FireStation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FireStationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends FireStation$usersArgs<ExtArgs> = {}>(args?: Subset<T, FireStation$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    vehicles<T extends FireStation$vehiclesArgs<ExtArgs> = {}>(args?: Subset<T, FireStation$vehiclesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VehiclePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    incidents<T extends FireStation$incidentsArgs<ExtArgs> = {}>(args?: Subset<T, FireStation$incidentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FireIncidentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FireStation model
   */
  interface FireStationFieldRefs {
    readonly id: FieldRef<"FireStation", 'Int'>
    readonly name: FieldRef<"FireStation", 'String'>
    readonly address: FieldRef<"FireStation", 'String'>
    readonly latitude: FieldRef<"FireStation", 'Float'>
    readonly longitude: FieldRef<"FireStation", 'Float'>
    readonly phoneNumber: FieldRef<"FireStation", 'String'>
    readonly createdAt: FieldRef<"FireStation", 'DateTime'>
    readonly updatedAt: FieldRef<"FireStation", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * FireStation findUnique
   */
  export type FireStationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FireStation
     */
    select?: FireStationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FireStation
     */
    omit?: FireStationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FireStationInclude<ExtArgs> | null
    /**
     * Filter, which FireStation to fetch.
     */
    where: FireStationWhereUniqueInput
  }

  /**
   * FireStation findUniqueOrThrow
   */
  export type FireStationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FireStation
     */
    select?: FireStationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FireStation
     */
    omit?: FireStationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FireStationInclude<ExtArgs> | null
    /**
     * Filter, which FireStation to fetch.
     */
    where: FireStationWhereUniqueInput
  }

  /**
   * FireStation findFirst
   */
  export type FireStationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FireStation
     */
    select?: FireStationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FireStation
     */
    omit?: FireStationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FireStationInclude<ExtArgs> | null
    /**
     * Filter, which FireStation to fetch.
     */
    where?: FireStationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FireStations to fetch.
     */
    orderBy?: FireStationOrderByWithRelationInput | FireStationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FireStations.
     */
    cursor?: FireStationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FireStations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FireStations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FireStations.
     */
    distinct?: FireStationScalarFieldEnum | FireStationScalarFieldEnum[]
  }

  /**
   * FireStation findFirstOrThrow
   */
  export type FireStationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FireStation
     */
    select?: FireStationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FireStation
     */
    omit?: FireStationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FireStationInclude<ExtArgs> | null
    /**
     * Filter, which FireStation to fetch.
     */
    where?: FireStationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FireStations to fetch.
     */
    orderBy?: FireStationOrderByWithRelationInput | FireStationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FireStations.
     */
    cursor?: FireStationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FireStations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FireStations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FireStations.
     */
    distinct?: FireStationScalarFieldEnum | FireStationScalarFieldEnum[]
  }

  /**
   * FireStation findMany
   */
  export type FireStationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FireStation
     */
    select?: FireStationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FireStation
     */
    omit?: FireStationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FireStationInclude<ExtArgs> | null
    /**
     * Filter, which FireStations to fetch.
     */
    where?: FireStationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FireStations to fetch.
     */
    orderBy?: FireStationOrderByWithRelationInput | FireStationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FireStations.
     */
    cursor?: FireStationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FireStations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FireStations.
     */
    skip?: number
    distinct?: FireStationScalarFieldEnum | FireStationScalarFieldEnum[]
  }

  /**
   * FireStation create
   */
  export type FireStationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FireStation
     */
    select?: FireStationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FireStation
     */
    omit?: FireStationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FireStationInclude<ExtArgs> | null
    /**
     * The data needed to create a FireStation.
     */
    data: XOR<FireStationCreateInput, FireStationUncheckedCreateInput>
  }

  /**
   * FireStation createMany
   */
  export type FireStationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FireStations.
     */
    data: FireStationCreateManyInput | FireStationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FireStation createManyAndReturn
   */
  export type FireStationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FireStation
     */
    select?: FireStationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FireStation
     */
    omit?: FireStationOmit<ExtArgs> | null
    /**
     * The data used to create many FireStations.
     */
    data: FireStationCreateManyInput | FireStationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FireStation update
   */
  export type FireStationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FireStation
     */
    select?: FireStationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FireStation
     */
    omit?: FireStationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FireStationInclude<ExtArgs> | null
    /**
     * The data needed to update a FireStation.
     */
    data: XOR<FireStationUpdateInput, FireStationUncheckedUpdateInput>
    /**
     * Choose, which FireStation to update.
     */
    where: FireStationWhereUniqueInput
  }

  /**
   * FireStation updateMany
   */
  export type FireStationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FireStations.
     */
    data: XOR<FireStationUpdateManyMutationInput, FireStationUncheckedUpdateManyInput>
    /**
     * Filter which FireStations to update
     */
    where?: FireStationWhereInput
    /**
     * Limit how many FireStations to update.
     */
    limit?: number
  }

  /**
   * FireStation updateManyAndReturn
   */
  export type FireStationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FireStation
     */
    select?: FireStationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FireStation
     */
    omit?: FireStationOmit<ExtArgs> | null
    /**
     * The data used to update FireStations.
     */
    data: XOR<FireStationUpdateManyMutationInput, FireStationUncheckedUpdateManyInput>
    /**
     * Filter which FireStations to update
     */
    where?: FireStationWhereInput
    /**
     * Limit how many FireStations to update.
     */
    limit?: number
  }

  /**
   * FireStation upsert
   */
  export type FireStationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FireStation
     */
    select?: FireStationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FireStation
     */
    omit?: FireStationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FireStationInclude<ExtArgs> | null
    /**
     * The filter to search for the FireStation to update in case it exists.
     */
    where: FireStationWhereUniqueInput
    /**
     * In case the FireStation found by the `where` argument doesn't exist, create a new FireStation with this data.
     */
    create: XOR<FireStationCreateInput, FireStationUncheckedCreateInput>
    /**
     * In case the FireStation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FireStationUpdateInput, FireStationUncheckedUpdateInput>
  }

  /**
   * FireStation delete
   */
  export type FireStationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FireStation
     */
    select?: FireStationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FireStation
     */
    omit?: FireStationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FireStationInclude<ExtArgs> | null
    /**
     * Filter which FireStation to delete.
     */
    where: FireStationWhereUniqueInput
  }

  /**
   * FireStation deleteMany
   */
  export type FireStationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FireStations to delete
     */
    where?: FireStationWhereInput
    /**
     * Limit how many FireStations to delete.
     */
    limit?: number
  }

  /**
   * FireStation.users
   */
  export type FireStation$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * FireStation.vehicles
   */
  export type FireStation$vehiclesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vehicle
     */
    select?: VehicleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vehicle
     */
    omit?: VehicleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VehicleInclude<ExtArgs> | null
    where?: VehicleWhereInput
    orderBy?: VehicleOrderByWithRelationInput | VehicleOrderByWithRelationInput[]
    cursor?: VehicleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VehicleScalarFieldEnum | VehicleScalarFieldEnum[]
  }

  /**
   * FireStation.incidents
   */
  export type FireStation$incidentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FireIncident
     */
    select?: FireIncidentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FireIncident
     */
    omit?: FireIncidentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FireIncidentInclude<ExtArgs> | null
    where?: FireIncidentWhereInput
    orderBy?: FireIncidentOrderByWithRelationInput | FireIncidentOrderByWithRelationInput[]
    cursor?: FireIncidentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FireIncidentScalarFieldEnum | FireIncidentScalarFieldEnum[]
  }

  /**
   * FireStation without action
   */
  export type FireStationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FireStation
     */
    select?: FireStationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FireStation
     */
    omit?: FireStationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FireStationInclude<ExtArgs> | null
  }


  /**
   * Model Vehicle
   */

  export type AggregateVehicle = {
    _count: VehicleCountAggregateOutputType | null
    _avg: VehicleAvgAggregateOutputType | null
    _sum: VehicleSumAggregateOutputType | null
    _min: VehicleMinAggregateOutputType | null
    _max: VehicleMaxAggregateOutputType | null
  }

  export type VehicleAvgAggregateOutputType = {
    id: number | null
    fireStationId: number | null
  }

  export type VehicleSumAggregateOutputType = {
    id: number | null
    fireStationId: number | null
  }

  export type VehicleMinAggregateOutputType = {
    id: number | null
    model: string | null
    type: $Enums.VehicleType | null
    status: $Enums.VehicleStatus | null
    createdAt: Date | null
    updatedAt: Date | null
    fireStationId: number | null
  }

  export type VehicleMaxAggregateOutputType = {
    id: number | null
    model: string | null
    type: $Enums.VehicleType | null
    status: $Enums.VehicleStatus | null
    createdAt: Date | null
    updatedAt: Date | null
    fireStationId: number | null
  }

  export type VehicleCountAggregateOutputType = {
    id: number
    model: number
    type: number
    status: number
    createdAt: number
    updatedAt: number
    fireStationId: number
    _all: number
  }


  export type VehicleAvgAggregateInputType = {
    id?: true
    fireStationId?: true
  }

  export type VehicleSumAggregateInputType = {
    id?: true
    fireStationId?: true
  }

  export type VehicleMinAggregateInputType = {
    id?: true
    model?: true
    type?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    fireStationId?: true
  }

  export type VehicleMaxAggregateInputType = {
    id?: true
    model?: true
    type?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    fireStationId?: true
  }

  export type VehicleCountAggregateInputType = {
    id?: true
    model?: true
    type?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    fireStationId?: true
    _all?: true
  }

  export type VehicleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Vehicle to aggregate.
     */
    where?: VehicleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vehicles to fetch.
     */
    orderBy?: VehicleOrderByWithRelationInput | VehicleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VehicleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vehicles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vehicles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Vehicles
    **/
    _count?: true | VehicleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VehicleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VehicleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VehicleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VehicleMaxAggregateInputType
  }

  export type GetVehicleAggregateType<T extends VehicleAggregateArgs> = {
        [P in keyof T & keyof AggregateVehicle]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVehicle[P]>
      : GetScalarType<T[P], AggregateVehicle[P]>
  }




  export type VehicleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VehicleWhereInput
    orderBy?: VehicleOrderByWithAggregationInput | VehicleOrderByWithAggregationInput[]
    by: VehicleScalarFieldEnum[] | VehicleScalarFieldEnum
    having?: VehicleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VehicleCountAggregateInputType | true
    _avg?: VehicleAvgAggregateInputType
    _sum?: VehicleSumAggregateInputType
    _min?: VehicleMinAggregateInputType
    _max?: VehicleMaxAggregateInputType
  }

  export type VehicleGroupByOutputType = {
    id: number
    model: string
    type: $Enums.VehicleType
    status: $Enums.VehicleStatus
    createdAt: Date
    updatedAt: Date
    fireStationId: number
    _count: VehicleCountAggregateOutputType | null
    _avg: VehicleAvgAggregateOutputType | null
    _sum: VehicleSumAggregateOutputType | null
    _min: VehicleMinAggregateOutputType | null
    _max: VehicleMaxAggregateOutputType | null
  }

  type GetVehicleGroupByPayload<T extends VehicleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VehicleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VehicleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VehicleGroupByOutputType[P]>
            : GetScalarType<T[P], VehicleGroupByOutputType[P]>
        }
      >
    >


  export type VehicleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    model?: boolean
    type?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    fireStationId?: boolean
    fireStation?: boolean | FireStationDefaultArgs<ExtArgs>
    incidents?: boolean | Vehicle$incidentsArgs<ExtArgs>
    _count?: boolean | VehicleCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["vehicle"]>

  export type VehicleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    model?: boolean
    type?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    fireStationId?: boolean
    fireStation?: boolean | FireStationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["vehicle"]>

  export type VehicleSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    model?: boolean
    type?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    fireStationId?: boolean
    fireStation?: boolean | FireStationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["vehicle"]>

  export type VehicleSelectScalar = {
    id?: boolean
    model?: boolean
    type?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    fireStationId?: boolean
  }

  export type VehicleOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "model" | "type" | "status" | "createdAt" | "updatedAt" | "fireStationId", ExtArgs["result"]["vehicle"]>
  export type VehicleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    fireStation?: boolean | FireStationDefaultArgs<ExtArgs>
    incidents?: boolean | Vehicle$incidentsArgs<ExtArgs>
    _count?: boolean | VehicleCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type VehicleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    fireStation?: boolean | FireStationDefaultArgs<ExtArgs>
  }
  export type VehicleIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    fireStation?: boolean | FireStationDefaultArgs<ExtArgs>
  }

  export type $VehiclePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Vehicle"
    objects: {
      fireStation: Prisma.$FireStationPayload<ExtArgs>
      incidents: Prisma.$FireIncidentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      model: string
      type: $Enums.VehicleType
      status: $Enums.VehicleStatus
      createdAt: Date
      updatedAt: Date
      fireStationId: number
    }, ExtArgs["result"]["vehicle"]>
    composites: {}
  }

  type VehicleGetPayload<S extends boolean | null | undefined | VehicleDefaultArgs> = $Result.GetResult<Prisma.$VehiclePayload, S>

  type VehicleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<VehicleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: VehicleCountAggregateInputType | true
    }

  export interface VehicleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Vehicle'], meta: { name: 'Vehicle' } }
    /**
     * Find zero or one Vehicle that matches the filter.
     * @param {VehicleFindUniqueArgs} args - Arguments to find a Vehicle
     * @example
     * // Get one Vehicle
     * const vehicle = await prisma.vehicle.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VehicleFindUniqueArgs>(args: SelectSubset<T, VehicleFindUniqueArgs<ExtArgs>>): Prisma__VehicleClient<$Result.GetResult<Prisma.$VehiclePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Vehicle that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {VehicleFindUniqueOrThrowArgs} args - Arguments to find a Vehicle
     * @example
     * // Get one Vehicle
     * const vehicle = await prisma.vehicle.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VehicleFindUniqueOrThrowArgs>(args: SelectSubset<T, VehicleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VehicleClient<$Result.GetResult<Prisma.$VehiclePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Vehicle that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VehicleFindFirstArgs} args - Arguments to find a Vehicle
     * @example
     * // Get one Vehicle
     * const vehicle = await prisma.vehicle.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VehicleFindFirstArgs>(args?: SelectSubset<T, VehicleFindFirstArgs<ExtArgs>>): Prisma__VehicleClient<$Result.GetResult<Prisma.$VehiclePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Vehicle that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VehicleFindFirstOrThrowArgs} args - Arguments to find a Vehicle
     * @example
     * // Get one Vehicle
     * const vehicle = await prisma.vehicle.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VehicleFindFirstOrThrowArgs>(args?: SelectSubset<T, VehicleFindFirstOrThrowArgs<ExtArgs>>): Prisma__VehicleClient<$Result.GetResult<Prisma.$VehiclePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Vehicles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VehicleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Vehicles
     * const vehicles = await prisma.vehicle.findMany()
     * 
     * // Get first 10 Vehicles
     * const vehicles = await prisma.vehicle.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const vehicleWithIdOnly = await prisma.vehicle.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends VehicleFindManyArgs>(args?: SelectSubset<T, VehicleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VehiclePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Vehicle.
     * @param {VehicleCreateArgs} args - Arguments to create a Vehicle.
     * @example
     * // Create one Vehicle
     * const Vehicle = await prisma.vehicle.create({
     *   data: {
     *     // ... data to create a Vehicle
     *   }
     * })
     * 
     */
    create<T extends VehicleCreateArgs>(args: SelectSubset<T, VehicleCreateArgs<ExtArgs>>): Prisma__VehicleClient<$Result.GetResult<Prisma.$VehiclePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Vehicles.
     * @param {VehicleCreateManyArgs} args - Arguments to create many Vehicles.
     * @example
     * // Create many Vehicles
     * const vehicle = await prisma.vehicle.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VehicleCreateManyArgs>(args?: SelectSubset<T, VehicleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Vehicles and returns the data saved in the database.
     * @param {VehicleCreateManyAndReturnArgs} args - Arguments to create many Vehicles.
     * @example
     * // Create many Vehicles
     * const vehicle = await prisma.vehicle.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Vehicles and only return the `id`
     * const vehicleWithIdOnly = await prisma.vehicle.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends VehicleCreateManyAndReturnArgs>(args?: SelectSubset<T, VehicleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VehiclePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Vehicle.
     * @param {VehicleDeleteArgs} args - Arguments to delete one Vehicle.
     * @example
     * // Delete one Vehicle
     * const Vehicle = await prisma.vehicle.delete({
     *   where: {
     *     // ... filter to delete one Vehicle
     *   }
     * })
     * 
     */
    delete<T extends VehicleDeleteArgs>(args: SelectSubset<T, VehicleDeleteArgs<ExtArgs>>): Prisma__VehicleClient<$Result.GetResult<Prisma.$VehiclePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Vehicle.
     * @param {VehicleUpdateArgs} args - Arguments to update one Vehicle.
     * @example
     * // Update one Vehicle
     * const vehicle = await prisma.vehicle.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VehicleUpdateArgs>(args: SelectSubset<T, VehicleUpdateArgs<ExtArgs>>): Prisma__VehicleClient<$Result.GetResult<Prisma.$VehiclePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Vehicles.
     * @param {VehicleDeleteManyArgs} args - Arguments to filter Vehicles to delete.
     * @example
     * // Delete a few Vehicles
     * const { count } = await prisma.vehicle.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VehicleDeleteManyArgs>(args?: SelectSubset<T, VehicleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Vehicles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VehicleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Vehicles
     * const vehicle = await prisma.vehicle.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VehicleUpdateManyArgs>(args: SelectSubset<T, VehicleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Vehicles and returns the data updated in the database.
     * @param {VehicleUpdateManyAndReturnArgs} args - Arguments to update many Vehicles.
     * @example
     * // Update many Vehicles
     * const vehicle = await prisma.vehicle.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Vehicles and only return the `id`
     * const vehicleWithIdOnly = await prisma.vehicle.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends VehicleUpdateManyAndReturnArgs>(args: SelectSubset<T, VehicleUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VehiclePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Vehicle.
     * @param {VehicleUpsertArgs} args - Arguments to update or create a Vehicle.
     * @example
     * // Update or create a Vehicle
     * const vehicle = await prisma.vehicle.upsert({
     *   create: {
     *     // ... data to create a Vehicle
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Vehicle we want to update
     *   }
     * })
     */
    upsert<T extends VehicleUpsertArgs>(args: SelectSubset<T, VehicleUpsertArgs<ExtArgs>>): Prisma__VehicleClient<$Result.GetResult<Prisma.$VehiclePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Vehicles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VehicleCountArgs} args - Arguments to filter Vehicles to count.
     * @example
     * // Count the number of Vehicles
     * const count = await prisma.vehicle.count({
     *   where: {
     *     // ... the filter for the Vehicles we want to count
     *   }
     * })
    **/
    count<T extends VehicleCountArgs>(
      args?: Subset<T, VehicleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VehicleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Vehicle.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VehicleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VehicleAggregateArgs>(args: Subset<T, VehicleAggregateArgs>): Prisma.PrismaPromise<GetVehicleAggregateType<T>>

    /**
     * Group by Vehicle.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VehicleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VehicleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VehicleGroupByArgs['orderBy'] }
        : { orderBy?: VehicleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VehicleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVehicleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Vehicle model
   */
  readonly fields: VehicleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Vehicle.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VehicleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    fireStation<T extends FireStationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FireStationDefaultArgs<ExtArgs>>): Prisma__FireStationClient<$Result.GetResult<Prisma.$FireStationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    incidents<T extends Vehicle$incidentsArgs<ExtArgs> = {}>(args?: Subset<T, Vehicle$incidentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FireIncidentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Vehicle model
   */
  interface VehicleFieldRefs {
    readonly id: FieldRef<"Vehicle", 'Int'>
    readonly model: FieldRef<"Vehicle", 'String'>
    readonly type: FieldRef<"Vehicle", 'VehicleType'>
    readonly status: FieldRef<"Vehicle", 'VehicleStatus'>
    readonly createdAt: FieldRef<"Vehicle", 'DateTime'>
    readonly updatedAt: FieldRef<"Vehicle", 'DateTime'>
    readonly fireStationId: FieldRef<"Vehicle", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Vehicle findUnique
   */
  export type VehicleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vehicle
     */
    select?: VehicleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vehicle
     */
    omit?: VehicleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VehicleInclude<ExtArgs> | null
    /**
     * Filter, which Vehicle to fetch.
     */
    where: VehicleWhereUniqueInput
  }

  /**
   * Vehicle findUniqueOrThrow
   */
  export type VehicleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vehicle
     */
    select?: VehicleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vehicle
     */
    omit?: VehicleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VehicleInclude<ExtArgs> | null
    /**
     * Filter, which Vehicle to fetch.
     */
    where: VehicleWhereUniqueInput
  }

  /**
   * Vehicle findFirst
   */
  export type VehicleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vehicle
     */
    select?: VehicleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vehicle
     */
    omit?: VehicleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VehicleInclude<ExtArgs> | null
    /**
     * Filter, which Vehicle to fetch.
     */
    where?: VehicleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vehicles to fetch.
     */
    orderBy?: VehicleOrderByWithRelationInput | VehicleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Vehicles.
     */
    cursor?: VehicleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vehicles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vehicles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Vehicles.
     */
    distinct?: VehicleScalarFieldEnum | VehicleScalarFieldEnum[]
  }

  /**
   * Vehicle findFirstOrThrow
   */
  export type VehicleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vehicle
     */
    select?: VehicleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vehicle
     */
    omit?: VehicleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VehicleInclude<ExtArgs> | null
    /**
     * Filter, which Vehicle to fetch.
     */
    where?: VehicleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vehicles to fetch.
     */
    orderBy?: VehicleOrderByWithRelationInput | VehicleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Vehicles.
     */
    cursor?: VehicleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vehicles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vehicles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Vehicles.
     */
    distinct?: VehicleScalarFieldEnum | VehicleScalarFieldEnum[]
  }

  /**
   * Vehicle findMany
   */
  export type VehicleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vehicle
     */
    select?: VehicleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vehicle
     */
    omit?: VehicleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VehicleInclude<ExtArgs> | null
    /**
     * Filter, which Vehicles to fetch.
     */
    where?: VehicleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vehicles to fetch.
     */
    orderBy?: VehicleOrderByWithRelationInput | VehicleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Vehicles.
     */
    cursor?: VehicleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vehicles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vehicles.
     */
    skip?: number
    distinct?: VehicleScalarFieldEnum | VehicleScalarFieldEnum[]
  }

  /**
   * Vehicle create
   */
  export type VehicleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vehicle
     */
    select?: VehicleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vehicle
     */
    omit?: VehicleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VehicleInclude<ExtArgs> | null
    /**
     * The data needed to create a Vehicle.
     */
    data: XOR<VehicleCreateInput, VehicleUncheckedCreateInput>
  }

  /**
   * Vehicle createMany
   */
  export type VehicleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Vehicles.
     */
    data: VehicleCreateManyInput | VehicleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Vehicle createManyAndReturn
   */
  export type VehicleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vehicle
     */
    select?: VehicleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Vehicle
     */
    omit?: VehicleOmit<ExtArgs> | null
    /**
     * The data used to create many Vehicles.
     */
    data: VehicleCreateManyInput | VehicleCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VehicleIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Vehicle update
   */
  export type VehicleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vehicle
     */
    select?: VehicleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vehicle
     */
    omit?: VehicleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VehicleInclude<ExtArgs> | null
    /**
     * The data needed to update a Vehicle.
     */
    data: XOR<VehicleUpdateInput, VehicleUncheckedUpdateInput>
    /**
     * Choose, which Vehicle to update.
     */
    where: VehicleWhereUniqueInput
  }

  /**
   * Vehicle updateMany
   */
  export type VehicleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Vehicles.
     */
    data: XOR<VehicleUpdateManyMutationInput, VehicleUncheckedUpdateManyInput>
    /**
     * Filter which Vehicles to update
     */
    where?: VehicleWhereInput
    /**
     * Limit how many Vehicles to update.
     */
    limit?: number
  }

  /**
   * Vehicle updateManyAndReturn
   */
  export type VehicleUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vehicle
     */
    select?: VehicleSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Vehicle
     */
    omit?: VehicleOmit<ExtArgs> | null
    /**
     * The data used to update Vehicles.
     */
    data: XOR<VehicleUpdateManyMutationInput, VehicleUncheckedUpdateManyInput>
    /**
     * Filter which Vehicles to update
     */
    where?: VehicleWhereInput
    /**
     * Limit how many Vehicles to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VehicleIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Vehicle upsert
   */
  export type VehicleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vehicle
     */
    select?: VehicleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vehicle
     */
    omit?: VehicleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VehicleInclude<ExtArgs> | null
    /**
     * The filter to search for the Vehicle to update in case it exists.
     */
    where: VehicleWhereUniqueInput
    /**
     * In case the Vehicle found by the `where` argument doesn't exist, create a new Vehicle with this data.
     */
    create: XOR<VehicleCreateInput, VehicleUncheckedCreateInput>
    /**
     * In case the Vehicle was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VehicleUpdateInput, VehicleUncheckedUpdateInput>
  }

  /**
   * Vehicle delete
   */
  export type VehicleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vehicle
     */
    select?: VehicleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vehicle
     */
    omit?: VehicleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VehicleInclude<ExtArgs> | null
    /**
     * Filter which Vehicle to delete.
     */
    where: VehicleWhereUniqueInput
  }

  /**
   * Vehicle deleteMany
   */
  export type VehicleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Vehicles to delete
     */
    where?: VehicleWhereInput
    /**
     * Limit how many Vehicles to delete.
     */
    limit?: number
  }

  /**
   * Vehicle.incidents
   */
  export type Vehicle$incidentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FireIncident
     */
    select?: FireIncidentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FireIncident
     */
    omit?: FireIncidentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FireIncidentInclude<ExtArgs> | null
    where?: FireIncidentWhereInput
    orderBy?: FireIncidentOrderByWithRelationInput | FireIncidentOrderByWithRelationInput[]
    cursor?: FireIncidentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FireIncidentScalarFieldEnum | FireIncidentScalarFieldEnum[]
  }

  /**
   * Vehicle without action
   */
  export type VehicleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vehicle
     */
    select?: VehicleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vehicle
     */
    omit?: VehicleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VehicleInclude<ExtArgs> | null
  }


  /**
   * Model FireLevel
   */

  export type AggregateFireLevel = {
    _count: FireLevelCountAggregateOutputType | null
    _avg: FireLevelAvgAggregateOutputType | null
    _sum: FireLevelSumAggregateOutputType | null
    _min: FireLevelMinAggregateOutputType | null
    _max: FireLevelMaxAggregateOutputType | null
  }

  export type FireLevelAvgAggregateOutputType = {
    id: number | null
    level: number | null
  }

  export type FireLevelSumAggregateOutputType = {
    id: number | null
    level: number | null
  }

  export type FireLevelMinAggregateOutputType = {
    id: number | null
    level: number | null
    name: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FireLevelMaxAggregateOutputType = {
    id: number | null
    level: number | null
    name: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type FireLevelCountAggregateOutputType = {
    id: number
    level: number
    name: number
    description: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type FireLevelAvgAggregateInputType = {
    id?: true
    level?: true
  }

  export type FireLevelSumAggregateInputType = {
    id?: true
    level?: true
  }

  export type FireLevelMinAggregateInputType = {
    id?: true
    level?: true
    name?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FireLevelMaxAggregateInputType = {
    id?: true
    level?: true
    name?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type FireLevelCountAggregateInputType = {
    id?: true
    level?: true
    name?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type FireLevelAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FireLevel to aggregate.
     */
    where?: FireLevelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FireLevels to fetch.
     */
    orderBy?: FireLevelOrderByWithRelationInput | FireLevelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FireLevelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FireLevels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FireLevels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FireLevels
    **/
    _count?: true | FireLevelCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FireLevelAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FireLevelSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FireLevelMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FireLevelMaxAggregateInputType
  }

  export type GetFireLevelAggregateType<T extends FireLevelAggregateArgs> = {
        [P in keyof T & keyof AggregateFireLevel]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFireLevel[P]>
      : GetScalarType<T[P], AggregateFireLevel[P]>
  }




  export type FireLevelGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FireLevelWhereInput
    orderBy?: FireLevelOrderByWithAggregationInput | FireLevelOrderByWithAggregationInput[]
    by: FireLevelScalarFieldEnum[] | FireLevelScalarFieldEnum
    having?: FireLevelScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FireLevelCountAggregateInputType | true
    _avg?: FireLevelAvgAggregateInputType
    _sum?: FireLevelSumAggregateInputType
    _min?: FireLevelMinAggregateInputType
    _max?: FireLevelMaxAggregateInputType
  }

  export type FireLevelGroupByOutputType = {
    id: number
    level: number
    name: string
    description: string
    createdAt: Date
    updatedAt: Date
    _count: FireLevelCountAggregateOutputType | null
    _avg: FireLevelAvgAggregateOutputType | null
    _sum: FireLevelSumAggregateOutputType | null
    _min: FireLevelMinAggregateOutputType | null
    _max: FireLevelMaxAggregateOutputType | null
  }

  type GetFireLevelGroupByPayload<T extends FireLevelGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FireLevelGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FireLevelGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FireLevelGroupByOutputType[P]>
            : GetScalarType<T[P], FireLevelGroupByOutputType[P]>
        }
      >
    >


  export type FireLevelSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    level?: boolean
    name?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    incidents?: boolean | FireLevel$incidentsArgs<ExtArgs>
    requirements?: boolean | FireLevel$requirementsArgs<ExtArgs>
    addressLevels?: boolean | FireLevel$addressLevelsArgs<ExtArgs>
    _count?: boolean | FireLevelCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["fireLevel"]>

  export type FireLevelSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    level?: boolean
    name?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["fireLevel"]>

  export type FireLevelSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    level?: boolean
    name?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["fireLevel"]>

  export type FireLevelSelectScalar = {
    id?: boolean
    level?: boolean
    name?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type FireLevelOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "level" | "name" | "description" | "createdAt" | "updatedAt", ExtArgs["result"]["fireLevel"]>
  export type FireLevelInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    incidents?: boolean | FireLevel$incidentsArgs<ExtArgs>
    requirements?: boolean | FireLevel$requirementsArgs<ExtArgs>
    addressLevels?: boolean | FireLevel$addressLevelsArgs<ExtArgs>
    _count?: boolean | FireLevelCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type FireLevelIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type FireLevelIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $FireLevelPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FireLevel"
    objects: {
      incidents: Prisma.$FireIncidentPayload<ExtArgs>[]
      requirements: Prisma.$FireLevelRequirementPayload<ExtArgs>[]
      addressLevels: Prisma.$FireAddressLevelPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      level: number
      name: string
      description: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["fireLevel"]>
    composites: {}
  }

  type FireLevelGetPayload<S extends boolean | null | undefined | FireLevelDefaultArgs> = $Result.GetResult<Prisma.$FireLevelPayload, S>

  type FireLevelCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FireLevelFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FireLevelCountAggregateInputType | true
    }

  export interface FireLevelDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FireLevel'], meta: { name: 'FireLevel' } }
    /**
     * Find zero or one FireLevel that matches the filter.
     * @param {FireLevelFindUniqueArgs} args - Arguments to find a FireLevel
     * @example
     * // Get one FireLevel
     * const fireLevel = await prisma.fireLevel.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FireLevelFindUniqueArgs>(args: SelectSubset<T, FireLevelFindUniqueArgs<ExtArgs>>): Prisma__FireLevelClient<$Result.GetResult<Prisma.$FireLevelPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one FireLevel that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FireLevelFindUniqueOrThrowArgs} args - Arguments to find a FireLevel
     * @example
     * // Get one FireLevel
     * const fireLevel = await prisma.fireLevel.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FireLevelFindUniqueOrThrowArgs>(args: SelectSubset<T, FireLevelFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FireLevelClient<$Result.GetResult<Prisma.$FireLevelPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FireLevel that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FireLevelFindFirstArgs} args - Arguments to find a FireLevel
     * @example
     * // Get one FireLevel
     * const fireLevel = await prisma.fireLevel.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FireLevelFindFirstArgs>(args?: SelectSubset<T, FireLevelFindFirstArgs<ExtArgs>>): Prisma__FireLevelClient<$Result.GetResult<Prisma.$FireLevelPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FireLevel that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FireLevelFindFirstOrThrowArgs} args - Arguments to find a FireLevel
     * @example
     * // Get one FireLevel
     * const fireLevel = await prisma.fireLevel.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FireLevelFindFirstOrThrowArgs>(args?: SelectSubset<T, FireLevelFindFirstOrThrowArgs<ExtArgs>>): Prisma__FireLevelClient<$Result.GetResult<Prisma.$FireLevelPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more FireLevels that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FireLevelFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FireLevels
     * const fireLevels = await prisma.fireLevel.findMany()
     * 
     * // Get first 10 FireLevels
     * const fireLevels = await prisma.fireLevel.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const fireLevelWithIdOnly = await prisma.fireLevel.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FireLevelFindManyArgs>(args?: SelectSubset<T, FireLevelFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FireLevelPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a FireLevel.
     * @param {FireLevelCreateArgs} args - Arguments to create a FireLevel.
     * @example
     * // Create one FireLevel
     * const FireLevel = await prisma.fireLevel.create({
     *   data: {
     *     // ... data to create a FireLevel
     *   }
     * })
     * 
     */
    create<T extends FireLevelCreateArgs>(args: SelectSubset<T, FireLevelCreateArgs<ExtArgs>>): Prisma__FireLevelClient<$Result.GetResult<Prisma.$FireLevelPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many FireLevels.
     * @param {FireLevelCreateManyArgs} args - Arguments to create many FireLevels.
     * @example
     * // Create many FireLevels
     * const fireLevel = await prisma.fireLevel.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FireLevelCreateManyArgs>(args?: SelectSubset<T, FireLevelCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FireLevels and returns the data saved in the database.
     * @param {FireLevelCreateManyAndReturnArgs} args - Arguments to create many FireLevels.
     * @example
     * // Create many FireLevels
     * const fireLevel = await prisma.fireLevel.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FireLevels and only return the `id`
     * const fireLevelWithIdOnly = await prisma.fireLevel.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FireLevelCreateManyAndReturnArgs>(args?: SelectSubset<T, FireLevelCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FireLevelPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a FireLevel.
     * @param {FireLevelDeleteArgs} args - Arguments to delete one FireLevel.
     * @example
     * // Delete one FireLevel
     * const FireLevel = await prisma.fireLevel.delete({
     *   where: {
     *     // ... filter to delete one FireLevel
     *   }
     * })
     * 
     */
    delete<T extends FireLevelDeleteArgs>(args: SelectSubset<T, FireLevelDeleteArgs<ExtArgs>>): Prisma__FireLevelClient<$Result.GetResult<Prisma.$FireLevelPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one FireLevel.
     * @param {FireLevelUpdateArgs} args - Arguments to update one FireLevel.
     * @example
     * // Update one FireLevel
     * const fireLevel = await prisma.fireLevel.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FireLevelUpdateArgs>(args: SelectSubset<T, FireLevelUpdateArgs<ExtArgs>>): Prisma__FireLevelClient<$Result.GetResult<Prisma.$FireLevelPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more FireLevels.
     * @param {FireLevelDeleteManyArgs} args - Arguments to filter FireLevels to delete.
     * @example
     * // Delete a few FireLevels
     * const { count } = await prisma.fireLevel.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FireLevelDeleteManyArgs>(args?: SelectSubset<T, FireLevelDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FireLevels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FireLevelUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FireLevels
     * const fireLevel = await prisma.fireLevel.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FireLevelUpdateManyArgs>(args: SelectSubset<T, FireLevelUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FireLevels and returns the data updated in the database.
     * @param {FireLevelUpdateManyAndReturnArgs} args - Arguments to update many FireLevels.
     * @example
     * // Update many FireLevels
     * const fireLevel = await prisma.fireLevel.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more FireLevels and only return the `id`
     * const fireLevelWithIdOnly = await prisma.fireLevel.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FireLevelUpdateManyAndReturnArgs>(args: SelectSubset<T, FireLevelUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FireLevelPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one FireLevel.
     * @param {FireLevelUpsertArgs} args - Arguments to update or create a FireLevel.
     * @example
     * // Update or create a FireLevel
     * const fireLevel = await prisma.fireLevel.upsert({
     *   create: {
     *     // ... data to create a FireLevel
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FireLevel we want to update
     *   }
     * })
     */
    upsert<T extends FireLevelUpsertArgs>(args: SelectSubset<T, FireLevelUpsertArgs<ExtArgs>>): Prisma__FireLevelClient<$Result.GetResult<Prisma.$FireLevelPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of FireLevels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FireLevelCountArgs} args - Arguments to filter FireLevels to count.
     * @example
     * // Count the number of FireLevels
     * const count = await prisma.fireLevel.count({
     *   where: {
     *     // ... the filter for the FireLevels we want to count
     *   }
     * })
    **/
    count<T extends FireLevelCountArgs>(
      args?: Subset<T, FireLevelCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FireLevelCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FireLevel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FireLevelAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FireLevelAggregateArgs>(args: Subset<T, FireLevelAggregateArgs>): Prisma.PrismaPromise<GetFireLevelAggregateType<T>>

    /**
     * Group by FireLevel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FireLevelGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FireLevelGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FireLevelGroupByArgs['orderBy'] }
        : { orderBy?: FireLevelGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FireLevelGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFireLevelGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FireLevel model
   */
  readonly fields: FireLevelFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FireLevel.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FireLevelClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    incidents<T extends FireLevel$incidentsArgs<ExtArgs> = {}>(args?: Subset<T, FireLevel$incidentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FireIncidentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    requirements<T extends FireLevel$requirementsArgs<ExtArgs> = {}>(args?: Subset<T, FireLevel$requirementsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FireLevelRequirementPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    addressLevels<T extends FireLevel$addressLevelsArgs<ExtArgs> = {}>(args?: Subset<T, FireLevel$addressLevelsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FireAddressLevelPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FireLevel model
   */
  interface FireLevelFieldRefs {
    readonly id: FieldRef<"FireLevel", 'Int'>
    readonly level: FieldRef<"FireLevel", 'Int'>
    readonly name: FieldRef<"FireLevel", 'String'>
    readonly description: FieldRef<"FireLevel", 'String'>
    readonly createdAt: FieldRef<"FireLevel", 'DateTime'>
    readonly updatedAt: FieldRef<"FireLevel", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * FireLevel findUnique
   */
  export type FireLevelFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FireLevel
     */
    select?: FireLevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FireLevel
     */
    omit?: FireLevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FireLevelInclude<ExtArgs> | null
    /**
     * Filter, which FireLevel to fetch.
     */
    where: FireLevelWhereUniqueInput
  }

  /**
   * FireLevel findUniqueOrThrow
   */
  export type FireLevelFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FireLevel
     */
    select?: FireLevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FireLevel
     */
    omit?: FireLevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FireLevelInclude<ExtArgs> | null
    /**
     * Filter, which FireLevel to fetch.
     */
    where: FireLevelWhereUniqueInput
  }

  /**
   * FireLevel findFirst
   */
  export type FireLevelFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FireLevel
     */
    select?: FireLevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FireLevel
     */
    omit?: FireLevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FireLevelInclude<ExtArgs> | null
    /**
     * Filter, which FireLevel to fetch.
     */
    where?: FireLevelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FireLevels to fetch.
     */
    orderBy?: FireLevelOrderByWithRelationInput | FireLevelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FireLevels.
     */
    cursor?: FireLevelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FireLevels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FireLevels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FireLevels.
     */
    distinct?: FireLevelScalarFieldEnum | FireLevelScalarFieldEnum[]
  }

  /**
   * FireLevel findFirstOrThrow
   */
  export type FireLevelFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FireLevel
     */
    select?: FireLevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FireLevel
     */
    omit?: FireLevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FireLevelInclude<ExtArgs> | null
    /**
     * Filter, which FireLevel to fetch.
     */
    where?: FireLevelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FireLevels to fetch.
     */
    orderBy?: FireLevelOrderByWithRelationInput | FireLevelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FireLevels.
     */
    cursor?: FireLevelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FireLevels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FireLevels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FireLevels.
     */
    distinct?: FireLevelScalarFieldEnum | FireLevelScalarFieldEnum[]
  }

  /**
   * FireLevel findMany
   */
  export type FireLevelFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FireLevel
     */
    select?: FireLevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FireLevel
     */
    omit?: FireLevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FireLevelInclude<ExtArgs> | null
    /**
     * Filter, which FireLevels to fetch.
     */
    where?: FireLevelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FireLevels to fetch.
     */
    orderBy?: FireLevelOrderByWithRelationInput | FireLevelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FireLevels.
     */
    cursor?: FireLevelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FireLevels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FireLevels.
     */
    skip?: number
    distinct?: FireLevelScalarFieldEnum | FireLevelScalarFieldEnum[]
  }

  /**
   * FireLevel create
   */
  export type FireLevelCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FireLevel
     */
    select?: FireLevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FireLevel
     */
    omit?: FireLevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FireLevelInclude<ExtArgs> | null
    /**
     * The data needed to create a FireLevel.
     */
    data: XOR<FireLevelCreateInput, FireLevelUncheckedCreateInput>
  }

  /**
   * FireLevel createMany
   */
  export type FireLevelCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FireLevels.
     */
    data: FireLevelCreateManyInput | FireLevelCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FireLevel createManyAndReturn
   */
  export type FireLevelCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FireLevel
     */
    select?: FireLevelSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FireLevel
     */
    omit?: FireLevelOmit<ExtArgs> | null
    /**
     * The data used to create many FireLevels.
     */
    data: FireLevelCreateManyInput | FireLevelCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FireLevel update
   */
  export type FireLevelUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FireLevel
     */
    select?: FireLevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FireLevel
     */
    omit?: FireLevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FireLevelInclude<ExtArgs> | null
    /**
     * The data needed to update a FireLevel.
     */
    data: XOR<FireLevelUpdateInput, FireLevelUncheckedUpdateInput>
    /**
     * Choose, which FireLevel to update.
     */
    where: FireLevelWhereUniqueInput
  }

  /**
   * FireLevel updateMany
   */
  export type FireLevelUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FireLevels.
     */
    data: XOR<FireLevelUpdateManyMutationInput, FireLevelUncheckedUpdateManyInput>
    /**
     * Filter which FireLevels to update
     */
    where?: FireLevelWhereInput
    /**
     * Limit how many FireLevels to update.
     */
    limit?: number
  }

  /**
   * FireLevel updateManyAndReturn
   */
  export type FireLevelUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FireLevel
     */
    select?: FireLevelSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FireLevel
     */
    omit?: FireLevelOmit<ExtArgs> | null
    /**
     * The data used to update FireLevels.
     */
    data: XOR<FireLevelUpdateManyMutationInput, FireLevelUncheckedUpdateManyInput>
    /**
     * Filter which FireLevels to update
     */
    where?: FireLevelWhereInput
    /**
     * Limit how many FireLevels to update.
     */
    limit?: number
  }

  /**
   * FireLevel upsert
   */
  export type FireLevelUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FireLevel
     */
    select?: FireLevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FireLevel
     */
    omit?: FireLevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FireLevelInclude<ExtArgs> | null
    /**
     * The filter to search for the FireLevel to update in case it exists.
     */
    where: FireLevelWhereUniqueInput
    /**
     * In case the FireLevel found by the `where` argument doesn't exist, create a new FireLevel with this data.
     */
    create: XOR<FireLevelCreateInput, FireLevelUncheckedCreateInput>
    /**
     * In case the FireLevel was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FireLevelUpdateInput, FireLevelUncheckedUpdateInput>
  }

  /**
   * FireLevel delete
   */
  export type FireLevelDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FireLevel
     */
    select?: FireLevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FireLevel
     */
    omit?: FireLevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FireLevelInclude<ExtArgs> | null
    /**
     * Filter which FireLevel to delete.
     */
    where: FireLevelWhereUniqueInput
  }

  /**
   * FireLevel deleteMany
   */
  export type FireLevelDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FireLevels to delete
     */
    where?: FireLevelWhereInput
    /**
     * Limit how many FireLevels to delete.
     */
    limit?: number
  }

  /**
   * FireLevel.incidents
   */
  export type FireLevel$incidentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FireIncident
     */
    select?: FireIncidentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FireIncident
     */
    omit?: FireIncidentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FireIncidentInclude<ExtArgs> | null
    where?: FireIncidentWhereInput
    orderBy?: FireIncidentOrderByWithRelationInput | FireIncidentOrderByWithRelationInput[]
    cursor?: FireIncidentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FireIncidentScalarFieldEnum | FireIncidentScalarFieldEnum[]
  }

  /**
   * FireLevel.requirements
   */
  export type FireLevel$requirementsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FireLevelRequirement
     */
    select?: FireLevelRequirementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FireLevelRequirement
     */
    omit?: FireLevelRequirementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FireLevelRequirementInclude<ExtArgs> | null
    where?: FireLevelRequirementWhereInput
    orderBy?: FireLevelRequirementOrderByWithRelationInput | FireLevelRequirementOrderByWithRelationInput[]
    cursor?: FireLevelRequirementWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FireLevelRequirementScalarFieldEnum | FireLevelRequirementScalarFieldEnum[]
  }

  /**
   * FireLevel.addressLevels
   */
  export type FireLevel$addressLevelsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FireAddressLevel
     */
    select?: FireAddressLevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FireAddressLevel
     */
    omit?: FireAddressLevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FireAddressLevelInclude<ExtArgs> | null
    where?: FireAddressLevelWhereInput
    orderBy?: FireAddressLevelOrderByWithRelationInput | FireAddressLevelOrderByWithRelationInput[]
    cursor?: FireAddressLevelWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FireAddressLevelScalarFieldEnum | FireAddressLevelScalarFieldEnum[]
  }

  /**
   * FireLevel without action
   */
  export type FireLevelDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FireLevel
     */
    select?: FireLevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FireLevel
     */
    omit?: FireLevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FireLevelInclude<ExtArgs> | null
  }


  /**
   * Model FireLevelRequirement
   */

  export type AggregateFireLevelRequirement = {
    _count: FireLevelRequirementCountAggregateOutputType | null
    _avg: FireLevelRequirementAvgAggregateOutputType | null
    _sum: FireLevelRequirementSumAggregateOutputType | null
    _min: FireLevelRequirementMinAggregateOutputType | null
    _max: FireLevelRequirementMaxAggregateOutputType | null
  }

  export type FireLevelRequirementAvgAggregateOutputType = {
    id: number | null
    count: number | null
    fireLevelId: number | null
  }

  export type FireLevelRequirementSumAggregateOutputType = {
    id: number | null
    count: number | null
    fireLevelId: number | null
  }

  export type FireLevelRequirementMinAggregateOutputType = {
    id: number | null
    count: number | null
    createdAt: Date | null
    updatedAt: Date | null
    fireLevelId: number | null
    vehicleType: $Enums.VehicleType | null
  }

  export type FireLevelRequirementMaxAggregateOutputType = {
    id: number | null
    count: number | null
    createdAt: Date | null
    updatedAt: Date | null
    fireLevelId: number | null
    vehicleType: $Enums.VehicleType | null
  }

  export type FireLevelRequirementCountAggregateOutputType = {
    id: number
    count: number
    createdAt: number
    updatedAt: number
    fireLevelId: number
    vehicleType: number
    _all: number
  }


  export type FireLevelRequirementAvgAggregateInputType = {
    id?: true
    count?: true
    fireLevelId?: true
  }

  export type FireLevelRequirementSumAggregateInputType = {
    id?: true
    count?: true
    fireLevelId?: true
  }

  export type FireLevelRequirementMinAggregateInputType = {
    id?: true
    count?: true
    createdAt?: true
    updatedAt?: true
    fireLevelId?: true
    vehicleType?: true
  }

  export type FireLevelRequirementMaxAggregateInputType = {
    id?: true
    count?: true
    createdAt?: true
    updatedAt?: true
    fireLevelId?: true
    vehicleType?: true
  }

  export type FireLevelRequirementCountAggregateInputType = {
    id?: true
    count?: true
    createdAt?: true
    updatedAt?: true
    fireLevelId?: true
    vehicleType?: true
    _all?: true
  }

  export type FireLevelRequirementAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FireLevelRequirement to aggregate.
     */
    where?: FireLevelRequirementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FireLevelRequirements to fetch.
     */
    orderBy?: FireLevelRequirementOrderByWithRelationInput | FireLevelRequirementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FireLevelRequirementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FireLevelRequirements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FireLevelRequirements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FireLevelRequirements
    **/
    _count?: true | FireLevelRequirementCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FireLevelRequirementAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FireLevelRequirementSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FireLevelRequirementMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FireLevelRequirementMaxAggregateInputType
  }

  export type GetFireLevelRequirementAggregateType<T extends FireLevelRequirementAggregateArgs> = {
        [P in keyof T & keyof AggregateFireLevelRequirement]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFireLevelRequirement[P]>
      : GetScalarType<T[P], AggregateFireLevelRequirement[P]>
  }




  export type FireLevelRequirementGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FireLevelRequirementWhereInput
    orderBy?: FireLevelRequirementOrderByWithAggregationInput | FireLevelRequirementOrderByWithAggregationInput[]
    by: FireLevelRequirementScalarFieldEnum[] | FireLevelRequirementScalarFieldEnum
    having?: FireLevelRequirementScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FireLevelRequirementCountAggregateInputType | true
    _avg?: FireLevelRequirementAvgAggregateInputType
    _sum?: FireLevelRequirementSumAggregateInputType
    _min?: FireLevelRequirementMinAggregateInputType
    _max?: FireLevelRequirementMaxAggregateInputType
  }

  export type FireLevelRequirementGroupByOutputType = {
    id: number
    count: number
    createdAt: Date
    updatedAt: Date
    fireLevelId: number
    vehicleType: $Enums.VehicleType
    _count: FireLevelRequirementCountAggregateOutputType | null
    _avg: FireLevelRequirementAvgAggregateOutputType | null
    _sum: FireLevelRequirementSumAggregateOutputType | null
    _min: FireLevelRequirementMinAggregateOutputType | null
    _max: FireLevelRequirementMaxAggregateOutputType | null
  }

  type GetFireLevelRequirementGroupByPayload<T extends FireLevelRequirementGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FireLevelRequirementGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FireLevelRequirementGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FireLevelRequirementGroupByOutputType[P]>
            : GetScalarType<T[P], FireLevelRequirementGroupByOutputType[P]>
        }
      >
    >


  export type FireLevelRequirementSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    count?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    fireLevelId?: boolean
    vehicleType?: boolean
    fireLevel?: boolean | FireLevelDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["fireLevelRequirement"]>

  export type FireLevelRequirementSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    count?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    fireLevelId?: boolean
    vehicleType?: boolean
    fireLevel?: boolean | FireLevelDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["fireLevelRequirement"]>

  export type FireLevelRequirementSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    count?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    fireLevelId?: boolean
    vehicleType?: boolean
    fireLevel?: boolean | FireLevelDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["fireLevelRequirement"]>

  export type FireLevelRequirementSelectScalar = {
    id?: boolean
    count?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    fireLevelId?: boolean
    vehicleType?: boolean
  }

  export type FireLevelRequirementOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "count" | "createdAt" | "updatedAt" | "fireLevelId" | "vehicleType", ExtArgs["result"]["fireLevelRequirement"]>
  export type FireLevelRequirementInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    fireLevel?: boolean | FireLevelDefaultArgs<ExtArgs>
  }
  export type FireLevelRequirementIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    fireLevel?: boolean | FireLevelDefaultArgs<ExtArgs>
  }
  export type FireLevelRequirementIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    fireLevel?: boolean | FireLevelDefaultArgs<ExtArgs>
  }

  export type $FireLevelRequirementPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FireLevelRequirement"
    objects: {
      fireLevel: Prisma.$FireLevelPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      count: number
      createdAt: Date
      updatedAt: Date
      fireLevelId: number
      vehicleType: $Enums.VehicleType
    }, ExtArgs["result"]["fireLevelRequirement"]>
    composites: {}
  }

  type FireLevelRequirementGetPayload<S extends boolean | null | undefined | FireLevelRequirementDefaultArgs> = $Result.GetResult<Prisma.$FireLevelRequirementPayload, S>

  type FireLevelRequirementCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FireLevelRequirementFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FireLevelRequirementCountAggregateInputType | true
    }

  export interface FireLevelRequirementDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FireLevelRequirement'], meta: { name: 'FireLevelRequirement' } }
    /**
     * Find zero or one FireLevelRequirement that matches the filter.
     * @param {FireLevelRequirementFindUniqueArgs} args - Arguments to find a FireLevelRequirement
     * @example
     * // Get one FireLevelRequirement
     * const fireLevelRequirement = await prisma.fireLevelRequirement.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FireLevelRequirementFindUniqueArgs>(args: SelectSubset<T, FireLevelRequirementFindUniqueArgs<ExtArgs>>): Prisma__FireLevelRequirementClient<$Result.GetResult<Prisma.$FireLevelRequirementPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one FireLevelRequirement that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FireLevelRequirementFindUniqueOrThrowArgs} args - Arguments to find a FireLevelRequirement
     * @example
     * // Get one FireLevelRequirement
     * const fireLevelRequirement = await prisma.fireLevelRequirement.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FireLevelRequirementFindUniqueOrThrowArgs>(args: SelectSubset<T, FireLevelRequirementFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FireLevelRequirementClient<$Result.GetResult<Prisma.$FireLevelRequirementPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FireLevelRequirement that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FireLevelRequirementFindFirstArgs} args - Arguments to find a FireLevelRequirement
     * @example
     * // Get one FireLevelRequirement
     * const fireLevelRequirement = await prisma.fireLevelRequirement.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FireLevelRequirementFindFirstArgs>(args?: SelectSubset<T, FireLevelRequirementFindFirstArgs<ExtArgs>>): Prisma__FireLevelRequirementClient<$Result.GetResult<Prisma.$FireLevelRequirementPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FireLevelRequirement that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FireLevelRequirementFindFirstOrThrowArgs} args - Arguments to find a FireLevelRequirement
     * @example
     * // Get one FireLevelRequirement
     * const fireLevelRequirement = await prisma.fireLevelRequirement.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FireLevelRequirementFindFirstOrThrowArgs>(args?: SelectSubset<T, FireLevelRequirementFindFirstOrThrowArgs<ExtArgs>>): Prisma__FireLevelRequirementClient<$Result.GetResult<Prisma.$FireLevelRequirementPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more FireLevelRequirements that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FireLevelRequirementFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FireLevelRequirements
     * const fireLevelRequirements = await prisma.fireLevelRequirement.findMany()
     * 
     * // Get first 10 FireLevelRequirements
     * const fireLevelRequirements = await prisma.fireLevelRequirement.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const fireLevelRequirementWithIdOnly = await prisma.fireLevelRequirement.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FireLevelRequirementFindManyArgs>(args?: SelectSubset<T, FireLevelRequirementFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FireLevelRequirementPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a FireLevelRequirement.
     * @param {FireLevelRequirementCreateArgs} args - Arguments to create a FireLevelRequirement.
     * @example
     * // Create one FireLevelRequirement
     * const FireLevelRequirement = await prisma.fireLevelRequirement.create({
     *   data: {
     *     // ... data to create a FireLevelRequirement
     *   }
     * })
     * 
     */
    create<T extends FireLevelRequirementCreateArgs>(args: SelectSubset<T, FireLevelRequirementCreateArgs<ExtArgs>>): Prisma__FireLevelRequirementClient<$Result.GetResult<Prisma.$FireLevelRequirementPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many FireLevelRequirements.
     * @param {FireLevelRequirementCreateManyArgs} args - Arguments to create many FireLevelRequirements.
     * @example
     * // Create many FireLevelRequirements
     * const fireLevelRequirement = await prisma.fireLevelRequirement.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FireLevelRequirementCreateManyArgs>(args?: SelectSubset<T, FireLevelRequirementCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FireLevelRequirements and returns the data saved in the database.
     * @param {FireLevelRequirementCreateManyAndReturnArgs} args - Arguments to create many FireLevelRequirements.
     * @example
     * // Create many FireLevelRequirements
     * const fireLevelRequirement = await prisma.fireLevelRequirement.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FireLevelRequirements and only return the `id`
     * const fireLevelRequirementWithIdOnly = await prisma.fireLevelRequirement.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FireLevelRequirementCreateManyAndReturnArgs>(args?: SelectSubset<T, FireLevelRequirementCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FireLevelRequirementPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a FireLevelRequirement.
     * @param {FireLevelRequirementDeleteArgs} args - Arguments to delete one FireLevelRequirement.
     * @example
     * // Delete one FireLevelRequirement
     * const FireLevelRequirement = await prisma.fireLevelRequirement.delete({
     *   where: {
     *     // ... filter to delete one FireLevelRequirement
     *   }
     * })
     * 
     */
    delete<T extends FireLevelRequirementDeleteArgs>(args: SelectSubset<T, FireLevelRequirementDeleteArgs<ExtArgs>>): Prisma__FireLevelRequirementClient<$Result.GetResult<Prisma.$FireLevelRequirementPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one FireLevelRequirement.
     * @param {FireLevelRequirementUpdateArgs} args - Arguments to update one FireLevelRequirement.
     * @example
     * // Update one FireLevelRequirement
     * const fireLevelRequirement = await prisma.fireLevelRequirement.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FireLevelRequirementUpdateArgs>(args: SelectSubset<T, FireLevelRequirementUpdateArgs<ExtArgs>>): Prisma__FireLevelRequirementClient<$Result.GetResult<Prisma.$FireLevelRequirementPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more FireLevelRequirements.
     * @param {FireLevelRequirementDeleteManyArgs} args - Arguments to filter FireLevelRequirements to delete.
     * @example
     * // Delete a few FireLevelRequirements
     * const { count } = await prisma.fireLevelRequirement.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FireLevelRequirementDeleteManyArgs>(args?: SelectSubset<T, FireLevelRequirementDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FireLevelRequirements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FireLevelRequirementUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FireLevelRequirements
     * const fireLevelRequirement = await prisma.fireLevelRequirement.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FireLevelRequirementUpdateManyArgs>(args: SelectSubset<T, FireLevelRequirementUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FireLevelRequirements and returns the data updated in the database.
     * @param {FireLevelRequirementUpdateManyAndReturnArgs} args - Arguments to update many FireLevelRequirements.
     * @example
     * // Update many FireLevelRequirements
     * const fireLevelRequirement = await prisma.fireLevelRequirement.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more FireLevelRequirements and only return the `id`
     * const fireLevelRequirementWithIdOnly = await prisma.fireLevelRequirement.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FireLevelRequirementUpdateManyAndReturnArgs>(args: SelectSubset<T, FireLevelRequirementUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FireLevelRequirementPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one FireLevelRequirement.
     * @param {FireLevelRequirementUpsertArgs} args - Arguments to update or create a FireLevelRequirement.
     * @example
     * // Update or create a FireLevelRequirement
     * const fireLevelRequirement = await prisma.fireLevelRequirement.upsert({
     *   create: {
     *     // ... data to create a FireLevelRequirement
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FireLevelRequirement we want to update
     *   }
     * })
     */
    upsert<T extends FireLevelRequirementUpsertArgs>(args: SelectSubset<T, FireLevelRequirementUpsertArgs<ExtArgs>>): Prisma__FireLevelRequirementClient<$Result.GetResult<Prisma.$FireLevelRequirementPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of FireLevelRequirements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FireLevelRequirementCountArgs} args - Arguments to filter FireLevelRequirements to count.
     * @example
     * // Count the number of FireLevelRequirements
     * const count = await prisma.fireLevelRequirement.count({
     *   where: {
     *     // ... the filter for the FireLevelRequirements we want to count
     *   }
     * })
    **/
    count<T extends FireLevelRequirementCountArgs>(
      args?: Subset<T, FireLevelRequirementCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FireLevelRequirementCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FireLevelRequirement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FireLevelRequirementAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FireLevelRequirementAggregateArgs>(args: Subset<T, FireLevelRequirementAggregateArgs>): Prisma.PrismaPromise<GetFireLevelRequirementAggregateType<T>>

    /**
     * Group by FireLevelRequirement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FireLevelRequirementGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FireLevelRequirementGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FireLevelRequirementGroupByArgs['orderBy'] }
        : { orderBy?: FireLevelRequirementGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FireLevelRequirementGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFireLevelRequirementGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FireLevelRequirement model
   */
  readonly fields: FireLevelRequirementFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FireLevelRequirement.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FireLevelRequirementClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    fireLevel<T extends FireLevelDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FireLevelDefaultArgs<ExtArgs>>): Prisma__FireLevelClient<$Result.GetResult<Prisma.$FireLevelPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FireLevelRequirement model
   */
  interface FireLevelRequirementFieldRefs {
    readonly id: FieldRef<"FireLevelRequirement", 'Int'>
    readonly count: FieldRef<"FireLevelRequirement", 'Int'>
    readonly createdAt: FieldRef<"FireLevelRequirement", 'DateTime'>
    readonly updatedAt: FieldRef<"FireLevelRequirement", 'DateTime'>
    readonly fireLevelId: FieldRef<"FireLevelRequirement", 'Int'>
    readonly vehicleType: FieldRef<"FireLevelRequirement", 'VehicleType'>
  }
    

  // Custom InputTypes
  /**
   * FireLevelRequirement findUnique
   */
  export type FireLevelRequirementFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FireLevelRequirement
     */
    select?: FireLevelRequirementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FireLevelRequirement
     */
    omit?: FireLevelRequirementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FireLevelRequirementInclude<ExtArgs> | null
    /**
     * Filter, which FireLevelRequirement to fetch.
     */
    where: FireLevelRequirementWhereUniqueInput
  }

  /**
   * FireLevelRequirement findUniqueOrThrow
   */
  export type FireLevelRequirementFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FireLevelRequirement
     */
    select?: FireLevelRequirementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FireLevelRequirement
     */
    omit?: FireLevelRequirementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FireLevelRequirementInclude<ExtArgs> | null
    /**
     * Filter, which FireLevelRequirement to fetch.
     */
    where: FireLevelRequirementWhereUniqueInput
  }

  /**
   * FireLevelRequirement findFirst
   */
  export type FireLevelRequirementFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FireLevelRequirement
     */
    select?: FireLevelRequirementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FireLevelRequirement
     */
    omit?: FireLevelRequirementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FireLevelRequirementInclude<ExtArgs> | null
    /**
     * Filter, which FireLevelRequirement to fetch.
     */
    where?: FireLevelRequirementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FireLevelRequirements to fetch.
     */
    orderBy?: FireLevelRequirementOrderByWithRelationInput | FireLevelRequirementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FireLevelRequirements.
     */
    cursor?: FireLevelRequirementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FireLevelRequirements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FireLevelRequirements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FireLevelRequirements.
     */
    distinct?: FireLevelRequirementScalarFieldEnum | FireLevelRequirementScalarFieldEnum[]
  }

  /**
   * FireLevelRequirement findFirstOrThrow
   */
  export type FireLevelRequirementFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FireLevelRequirement
     */
    select?: FireLevelRequirementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FireLevelRequirement
     */
    omit?: FireLevelRequirementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FireLevelRequirementInclude<ExtArgs> | null
    /**
     * Filter, which FireLevelRequirement to fetch.
     */
    where?: FireLevelRequirementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FireLevelRequirements to fetch.
     */
    orderBy?: FireLevelRequirementOrderByWithRelationInput | FireLevelRequirementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FireLevelRequirements.
     */
    cursor?: FireLevelRequirementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FireLevelRequirements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FireLevelRequirements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FireLevelRequirements.
     */
    distinct?: FireLevelRequirementScalarFieldEnum | FireLevelRequirementScalarFieldEnum[]
  }

  /**
   * FireLevelRequirement findMany
   */
  export type FireLevelRequirementFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FireLevelRequirement
     */
    select?: FireLevelRequirementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FireLevelRequirement
     */
    omit?: FireLevelRequirementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FireLevelRequirementInclude<ExtArgs> | null
    /**
     * Filter, which FireLevelRequirements to fetch.
     */
    where?: FireLevelRequirementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FireLevelRequirements to fetch.
     */
    orderBy?: FireLevelRequirementOrderByWithRelationInput | FireLevelRequirementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FireLevelRequirements.
     */
    cursor?: FireLevelRequirementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FireLevelRequirements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FireLevelRequirements.
     */
    skip?: number
    distinct?: FireLevelRequirementScalarFieldEnum | FireLevelRequirementScalarFieldEnum[]
  }

  /**
   * FireLevelRequirement create
   */
  export type FireLevelRequirementCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FireLevelRequirement
     */
    select?: FireLevelRequirementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FireLevelRequirement
     */
    omit?: FireLevelRequirementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FireLevelRequirementInclude<ExtArgs> | null
    /**
     * The data needed to create a FireLevelRequirement.
     */
    data: XOR<FireLevelRequirementCreateInput, FireLevelRequirementUncheckedCreateInput>
  }

  /**
   * FireLevelRequirement createMany
   */
  export type FireLevelRequirementCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FireLevelRequirements.
     */
    data: FireLevelRequirementCreateManyInput | FireLevelRequirementCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FireLevelRequirement createManyAndReturn
   */
  export type FireLevelRequirementCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FireLevelRequirement
     */
    select?: FireLevelRequirementSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FireLevelRequirement
     */
    omit?: FireLevelRequirementOmit<ExtArgs> | null
    /**
     * The data used to create many FireLevelRequirements.
     */
    data: FireLevelRequirementCreateManyInput | FireLevelRequirementCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FireLevelRequirementIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * FireLevelRequirement update
   */
  export type FireLevelRequirementUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FireLevelRequirement
     */
    select?: FireLevelRequirementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FireLevelRequirement
     */
    omit?: FireLevelRequirementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FireLevelRequirementInclude<ExtArgs> | null
    /**
     * The data needed to update a FireLevelRequirement.
     */
    data: XOR<FireLevelRequirementUpdateInput, FireLevelRequirementUncheckedUpdateInput>
    /**
     * Choose, which FireLevelRequirement to update.
     */
    where: FireLevelRequirementWhereUniqueInput
  }

  /**
   * FireLevelRequirement updateMany
   */
  export type FireLevelRequirementUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FireLevelRequirements.
     */
    data: XOR<FireLevelRequirementUpdateManyMutationInput, FireLevelRequirementUncheckedUpdateManyInput>
    /**
     * Filter which FireLevelRequirements to update
     */
    where?: FireLevelRequirementWhereInput
    /**
     * Limit how many FireLevelRequirements to update.
     */
    limit?: number
  }

  /**
   * FireLevelRequirement updateManyAndReturn
   */
  export type FireLevelRequirementUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FireLevelRequirement
     */
    select?: FireLevelRequirementSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FireLevelRequirement
     */
    omit?: FireLevelRequirementOmit<ExtArgs> | null
    /**
     * The data used to update FireLevelRequirements.
     */
    data: XOR<FireLevelRequirementUpdateManyMutationInput, FireLevelRequirementUncheckedUpdateManyInput>
    /**
     * Filter which FireLevelRequirements to update
     */
    where?: FireLevelRequirementWhereInput
    /**
     * Limit how many FireLevelRequirements to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FireLevelRequirementIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * FireLevelRequirement upsert
   */
  export type FireLevelRequirementUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FireLevelRequirement
     */
    select?: FireLevelRequirementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FireLevelRequirement
     */
    omit?: FireLevelRequirementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FireLevelRequirementInclude<ExtArgs> | null
    /**
     * The filter to search for the FireLevelRequirement to update in case it exists.
     */
    where: FireLevelRequirementWhereUniqueInput
    /**
     * In case the FireLevelRequirement found by the `where` argument doesn't exist, create a new FireLevelRequirement with this data.
     */
    create: XOR<FireLevelRequirementCreateInput, FireLevelRequirementUncheckedCreateInput>
    /**
     * In case the FireLevelRequirement was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FireLevelRequirementUpdateInput, FireLevelRequirementUncheckedUpdateInput>
  }

  /**
   * FireLevelRequirement delete
   */
  export type FireLevelRequirementDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FireLevelRequirement
     */
    select?: FireLevelRequirementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FireLevelRequirement
     */
    omit?: FireLevelRequirementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FireLevelRequirementInclude<ExtArgs> | null
    /**
     * Filter which FireLevelRequirement to delete.
     */
    where: FireLevelRequirementWhereUniqueInput
  }

  /**
   * FireLevelRequirement deleteMany
   */
  export type FireLevelRequirementDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FireLevelRequirements to delete
     */
    where?: FireLevelRequirementWhereInput
    /**
     * Limit how many FireLevelRequirements to delete.
     */
    limit?: number
  }

  /**
   * FireLevelRequirement without action
   */
  export type FireLevelRequirementDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FireLevelRequirement
     */
    select?: FireLevelRequirementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FireLevelRequirement
     */
    omit?: FireLevelRequirementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FireLevelRequirementInclude<ExtArgs> | null
  }


  /**
   * Model FireIncident
   */

  export type AggregateFireIncident = {
    _count: FireIncidentCountAggregateOutputType | null
    _avg: FireIncidentAvgAggregateOutputType | null
    _sum: FireIncidentSumAggregateOutputType | null
    _min: FireIncidentMinAggregateOutputType | null
    _max: FireIncidentMaxAggregateOutputType | null
  }

  export type FireIncidentAvgAggregateOutputType = {
    id: number | null
    latitude: number | null
    longitude: number | null
    reportedById: number | null
    assignedToId: number | null
    fireStationId: number | null
    fireLevelId: number | null
  }

  export type FireIncidentSumAggregateOutputType = {
    id: number | null
    latitude: number | null
    longitude: number | null
    reportedById: number | null
    assignedToId: number | null
    fireStationId: number | null
    fireLevelId: number | null
  }

  export type FireIncidentMinAggregateOutputType = {
    id: number | null
    latitude: number | null
    longitude: number | null
    status: $Enums.IncidentStatus | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
    resolvedAt: Date | null
    address: string | null
    reportedById: number | null
    assignedToId: number | null
    fireStationId: number | null
    fireLevelId: number | null
  }

  export type FireIncidentMaxAggregateOutputType = {
    id: number | null
    latitude: number | null
    longitude: number | null
    status: $Enums.IncidentStatus | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
    resolvedAt: Date | null
    address: string | null
    reportedById: number | null
    assignedToId: number | null
    fireStationId: number | null
    fireLevelId: number | null
  }

  export type FireIncidentCountAggregateOutputType = {
    id: number
    latitude: number
    longitude: number
    status: number
    description: number
    createdAt: number
    updatedAt: number
    resolvedAt: number
    address: number
    reportedById: number
    assignedToId: number
    fireStationId: number
    fireLevelId: number
    _all: number
  }


  export type FireIncidentAvgAggregateInputType = {
    id?: true
    latitude?: true
    longitude?: true
    reportedById?: true
    assignedToId?: true
    fireStationId?: true
    fireLevelId?: true
  }

  export type FireIncidentSumAggregateInputType = {
    id?: true
    latitude?: true
    longitude?: true
    reportedById?: true
    assignedToId?: true
    fireStationId?: true
    fireLevelId?: true
  }

  export type FireIncidentMinAggregateInputType = {
    id?: true
    latitude?: true
    longitude?: true
    status?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    resolvedAt?: true
    address?: true
    reportedById?: true
    assignedToId?: true
    fireStationId?: true
    fireLevelId?: true
  }

  export type FireIncidentMaxAggregateInputType = {
    id?: true
    latitude?: true
    longitude?: true
    status?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    resolvedAt?: true
    address?: true
    reportedById?: true
    assignedToId?: true
    fireStationId?: true
    fireLevelId?: true
  }

  export type FireIncidentCountAggregateInputType = {
    id?: true
    latitude?: true
    longitude?: true
    status?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    resolvedAt?: true
    address?: true
    reportedById?: true
    assignedToId?: true
    fireStationId?: true
    fireLevelId?: true
    _all?: true
  }

  export type FireIncidentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FireIncident to aggregate.
     */
    where?: FireIncidentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FireIncidents to fetch.
     */
    orderBy?: FireIncidentOrderByWithRelationInput | FireIncidentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FireIncidentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FireIncidents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FireIncidents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FireIncidents
    **/
    _count?: true | FireIncidentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FireIncidentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FireIncidentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FireIncidentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FireIncidentMaxAggregateInputType
  }

  export type GetFireIncidentAggregateType<T extends FireIncidentAggregateArgs> = {
        [P in keyof T & keyof AggregateFireIncident]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFireIncident[P]>
      : GetScalarType<T[P], AggregateFireIncident[P]>
  }




  export type FireIncidentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FireIncidentWhereInput
    orderBy?: FireIncidentOrderByWithAggregationInput | FireIncidentOrderByWithAggregationInput[]
    by: FireIncidentScalarFieldEnum[] | FireIncidentScalarFieldEnum
    having?: FireIncidentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FireIncidentCountAggregateInputType | true
    _avg?: FireIncidentAvgAggregateInputType
    _sum?: FireIncidentSumAggregateInputType
    _min?: FireIncidentMinAggregateInputType
    _max?: FireIncidentMaxAggregateInputType
  }

  export type FireIncidentGroupByOutputType = {
    id: number
    latitude: number
    longitude: number
    status: $Enums.IncidentStatus
    description: string | null
    createdAt: Date
    updatedAt: Date
    resolvedAt: Date | null
    address: string | null
    reportedById: number
    assignedToId: number
    fireStationId: number
    fireLevelId: number
    _count: FireIncidentCountAggregateOutputType | null
    _avg: FireIncidentAvgAggregateOutputType | null
    _sum: FireIncidentSumAggregateOutputType | null
    _min: FireIncidentMinAggregateOutputType | null
    _max: FireIncidentMaxAggregateOutputType | null
  }

  type GetFireIncidentGroupByPayload<T extends FireIncidentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FireIncidentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FireIncidentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FireIncidentGroupByOutputType[P]>
            : GetScalarType<T[P], FireIncidentGroupByOutputType[P]>
        }
      >
    >


  export type FireIncidentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    latitude?: boolean
    longitude?: boolean
    status?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    resolvedAt?: boolean
    address?: boolean
    reportedById?: boolean
    assignedToId?: boolean
    fireStationId?: boolean
    fireLevelId?: boolean
    reportedBy?: boolean | UserDefaultArgs<ExtArgs>
    assignedTo?: boolean | UserDefaultArgs<ExtArgs>
    fireStation?: boolean | FireStationDefaultArgs<ExtArgs>
    fireLevel?: boolean | FireLevelDefaultArgs<ExtArgs>
    vehicles?: boolean | FireIncident$vehiclesArgs<ExtArgs>
    reports?: boolean | FireIncident$reportsArgs<ExtArgs>
    history?: boolean | FireIncident$historyArgs<ExtArgs>
    _count?: boolean | FireIncidentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["fireIncident"]>

  export type FireIncidentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    latitude?: boolean
    longitude?: boolean
    status?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    resolvedAt?: boolean
    address?: boolean
    reportedById?: boolean
    assignedToId?: boolean
    fireStationId?: boolean
    fireLevelId?: boolean
    reportedBy?: boolean | UserDefaultArgs<ExtArgs>
    assignedTo?: boolean | UserDefaultArgs<ExtArgs>
    fireStation?: boolean | FireStationDefaultArgs<ExtArgs>
    fireLevel?: boolean | FireLevelDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["fireIncident"]>

  export type FireIncidentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    latitude?: boolean
    longitude?: boolean
    status?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    resolvedAt?: boolean
    address?: boolean
    reportedById?: boolean
    assignedToId?: boolean
    fireStationId?: boolean
    fireLevelId?: boolean
    reportedBy?: boolean | UserDefaultArgs<ExtArgs>
    assignedTo?: boolean | UserDefaultArgs<ExtArgs>
    fireStation?: boolean | FireStationDefaultArgs<ExtArgs>
    fireLevel?: boolean | FireLevelDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["fireIncident"]>

  export type FireIncidentSelectScalar = {
    id?: boolean
    latitude?: boolean
    longitude?: boolean
    status?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    resolvedAt?: boolean
    address?: boolean
    reportedById?: boolean
    assignedToId?: boolean
    fireStationId?: boolean
    fireLevelId?: boolean
  }

  export type FireIncidentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "latitude" | "longitude" | "status" | "description" | "createdAt" | "updatedAt" | "resolvedAt" | "address" | "reportedById" | "assignedToId" | "fireStationId" | "fireLevelId", ExtArgs["result"]["fireIncident"]>
  export type FireIncidentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reportedBy?: boolean | UserDefaultArgs<ExtArgs>
    assignedTo?: boolean | UserDefaultArgs<ExtArgs>
    fireStation?: boolean | FireStationDefaultArgs<ExtArgs>
    fireLevel?: boolean | FireLevelDefaultArgs<ExtArgs>
    vehicles?: boolean | FireIncident$vehiclesArgs<ExtArgs>
    reports?: boolean | FireIncident$reportsArgs<ExtArgs>
    history?: boolean | FireIncident$historyArgs<ExtArgs>
    _count?: boolean | FireIncidentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type FireIncidentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reportedBy?: boolean | UserDefaultArgs<ExtArgs>
    assignedTo?: boolean | UserDefaultArgs<ExtArgs>
    fireStation?: boolean | FireStationDefaultArgs<ExtArgs>
    fireLevel?: boolean | FireLevelDefaultArgs<ExtArgs>
  }
  export type FireIncidentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reportedBy?: boolean | UserDefaultArgs<ExtArgs>
    assignedTo?: boolean | UserDefaultArgs<ExtArgs>
    fireStation?: boolean | FireStationDefaultArgs<ExtArgs>
    fireLevel?: boolean | FireLevelDefaultArgs<ExtArgs>
  }

  export type $FireIncidentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FireIncident"
    objects: {
      reportedBy: Prisma.$UserPayload<ExtArgs>
      assignedTo: Prisma.$UserPayload<ExtArgs>
      fireStation: Prisma.$FireStationPayload<ExtArgs>
      fireLevel: Prisma.$FireLevelPayload<ExtArgs>
      vehicles: Prisma.$VehiclePayload<ExtArgs>[]
      reports: Prisma.$ReportPayload<ExtArgs>[]
      history: Prisma.$FireHistoryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      latitude: number
      longitude: number
      status: $Enums.IncidentStatus
      description: string | null
      createdAt: Date
      updatedAt: Date
      resolvedAt: Date | null
      address: string | null
      reportedById: number
      assignedToId: number
      fireStationId: number
      fireLevelId: number
    }, ExtArgs["result"]["fireIncident"]>
    composites: {}
  }

  type FireIncidentGetPayload<S extends boolean | null | undefined | FireIncidentDefaultArgs> = $Result.GetResult<Prisma.$FireIncidentPayload, S>

  type FireIncidentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FireIncidentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FireIncidentCountAggregateInputType | true
    }

  export interface FireIncidentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FireIncident'], meta: { name: 'FireIncident' } }
    /**
     * Find zero or one FireIncident that matches the filter.
     * @param {FireIncidentFindUniqueArgs} args - Arguments to find a FireIncident
     * @example
     * // Get one FireIncident
     * const fireIncident = await prisma.fireIncident.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FireIncidentFindUniqueArgs>(args: SelectSubset<T, FireIncidentFindUniqueArgs<ExtArgs>>): Prisma__FireIncidentClient<$Result.GetResult<Prisma.$FireIncidentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one FireIncident that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FireIncidentFindUniqueOrThrowArgs} args - Arguments to find a FireIncident
     * @example
     * // Get one FireIncident
     * const fireIncident = await prisma.fireIncident.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FireIncidentFindUniqueOrThrowArgs>(args: SelectSubset<T, FireIncidentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FireIncidentClient<$Result.GetResult<Prisma.$FireIncidentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FireIncident that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FireIncidentFindFirstArgs} args - Arguments to find a FireIncident
     * @example
     * // Get one FireIncident
     * const fireIncident = await prisma.fireIncident.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FireIncidentFindFirstArgs>(args?: SelectSubset<T, FireIncidentFindFirstArgs<ExtArgs>>): Prisma__FireIncidentClient<$Result.GetResult<Prisma.$FireIncidentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FireIncident that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FireIncidentFindFirstOrThrowArgs} args - Arguments to find a FireIncident
     * @example
     * // Get one FireIncident
     * const fireIncident = await prisma.fireIncident.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FireIncidentFindFirstOrThrowArgs>(args?: SelectSubset<T, FireIncidentFindFirstOrThrowArgs<ExtArgs>>): Prisma__FireIncidentClient<$Result.GetResult<Prisma.$FireIncidentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more FireIncidents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FireIncidentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FireIncidents
     * const fireIncidents = await prisma.fireIncident.findMany()
     * 
     * // Get first 10 FireIncidents
     * const fireIncidents = await prisma.fireIncident.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const fireIncidentWithIdOnly = await prisma.fireIncident.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FireIncidentFindManyArgs>(args?: SelectSubset<T, FireIncidentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FireIncidentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a FireIncident.
     * @param {FireIncidentCreateArgs} args - Arguments to create a FireIncident.
     * @example
     * // Create one FireIncident
     * const FireIncident = await prisma.fireIncident.create({
     *   data: {
     *     // ... data to create a FireIncident
     *   }
     * })
     * 
     */
    create<T extends FireIncidentCreateArgs>(args: SelectSubset<T, FireIncidentCreateArgs<ExtArgs>>): Prisma__FireIncidentClient<$Result.GetResult<Prisma.$FireIncidentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many FireIncidents.
     * @param {FireIncidentCreateManyArgs} args - Arguments to create many FireIncidents.
     * @example
     * // Create many FireIncidents
     * const fireIncident = await prisma.fireIncident.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FireIncidentCreateManyArgs>(args?: SelectSubset<T, FireIncidentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FireIncidents and returns the data saved in the database.
     * @param {FireIncidentCreateManyAndReturnArgs} args - Arguments to create many FireIncidents.
     * @example
     * // Create many FireIncidents
     * const fireIncident = await prisma.fireIncident.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FireIncidents and only return the `id`
     * const fireIncidentWithIdOnly = await prisma.fireIncident.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FireIncidentCreateManyAndReturnArgs>(args?: SelectSubset<T, FireIncidentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FireIncidentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a FireIncident.
     * @param {FireIncidentDeleteArgs} args - Arguments to delete one FireIncident.
     * @example
     * // Delete one FireIncident
     * const FireIncident = await prisma.fireIncident.delete({
     *   where: {
     *     // ... filter to delete one FireIncident
     *   }
     * })
     * 
     */
    delete<T extends FireIncidentDeleteArgs>(args: SelectSubset<T, FireIncidentDeleteArgs<ExtArgs>>): Prisma__FireIncidentClient<$Result.GetResult<Prisma.$FireIncidentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one FireIncident.
     * @param {FireIncidentUpdateArgs} args - Arguments to update one FireIncident.
     * @example
     * // Update one FireIncident
     * const fireIncident = await prisma.fireIncident.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FireIncidentUpdateArgs>(args: SelectSubset<T, FireIncidentUpdateArgs<ExtArgs>>): Prisma__FireIncidentClient<$Result.GetResult<Prisma.$FireIncidentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more FireIncidents.
     * @param {FireIncidentDeleteManyArgs} args - Arguments to filter FireIncidents to delete.
     * @example
     * // Delete a few FireIncidents
     * const { count } = await prisma.fireIncident.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FireIncidentDeleteManyArgs>(args?: SelectSubset<T, FireIncidentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FireIncidents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FireIncidentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FireIncidents
     * const fireIncident = await prisma.fireIncident.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FireIncidentUpdateManyArgs>(args: SelectSubset<T, FireIncidentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FireIncidents and returns the data updated in the database.
     * @param {FireIncidentUpdateManyAndReturnArgs} args - Arguments to update many FireIncidents.
     * @example
     * // Update many FireIncidents
     * const fireIncident = await prisma.fireIncident.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more FireIncidents and only return the `id`
     * const fireIncidentWithIdOnly = await prisma.fireIncident.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FireIncidentUpdateManyAndReturnArgs>(args: SelectSubset<T, FireIncidentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FireIncidentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one FireIncident.
     * @param {FireIncidentUpsertArgs} args - Arguments to update or create a FireIncident.
     * @example
     * // Update or create a FireIncident
     * const fireIncident = await prisma.fireIncident.upsert({
     *   create: {
     *     // ... data to create a FireIncident
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FireIncident we want to update
     *   }
     * })
     */
    upsert<T extends FireIncidentUpsertArgs>(args: SelectSubset<T, FireIncidentUpsertArgs<ExtArgs>>): Prisma__FireIncidentClient<$Result.GetResult<Prisma.$FireIncidentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of FireIncidents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FireIncidentCountArgs} args - Arguments to filter FireIncidents to count.
     * @example
     * // Count the number of FireIncidents
     * const count = await prisma.fireIncident.count({
     *   where: {
     *     // ... the filter for the FireIncidents we want to count
     *   }
     * })
    **/
    count<T extends FireIncidentCountArgs>(
      args?: Subset<T, FireIncidentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FireIncidentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FireIncident.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FireIncidentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FireIncidentAggregateArgs>(args: Subset<T, FireIncidentAggregateArgs>): Prisma.PrismaPromise<GetFireIncidentAggregateType<T>>

    /**
     * Group by FireIncident.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FireIncidentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FireIncidentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FireIncidentGroupByArgs['orderBy'] }
        : { orderBy?: FireIncidentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FireIncidentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFireIncidentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FireIncident model
   */
  readonly fields: FireIncidentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FireIncident.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FireIncidentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    reportedBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    assignedTo<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    fireStation<T extends FireStationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FireStationDefaultArgs<ExtArgs>>): Prisma__FireStationClient<$Result.GetResult<Prisma.$FireStationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    fireLevel<T extends FireLevelDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FireLevelDefaultArgs<ExtArgs>>): Prisma__FireLevelClient<$Result.GetResult<Prisma.$FireLevelPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    vehicles<T extends FireIncident$vehiclesArgs<ExtArgs> = {}>(args?: Subset<T, FireIncident$vehiclesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VehiclePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    reports<T extends FireIncident$reportsArgs<ExtArgs> = {}>(args?: Subset<T, FireIncident$reportsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    history<T extends FireIncident$historyArgs<ExtArgs> = {}>(args?: Subset<T, FireIncident$historyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FireHistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FireIncident model
   */
  interface FireIncidentFieldRefs {
    readonly id: FieldRef<"FireIncident", 'Int'>
    readonly latitude: FieldRef<"FireIncident", 'Float'>
    readonly longitude: FieldRef<"FireIncident", 'Float'>
    readonly status: FieldRef<"FireIncident", 'IncidentStatus'>
    readonly description: FieldRef<"FireIncident", 'String'>
    readonly createdAt: FieldRef<"FireIncident", 'DateTime'>
    readonly updatedAt: FieldRef<"FireIncident", 'DateTime'>
    readonly resolvedAt: FieldRef<"FireIncident", 'DateTime'>
    readonly address: FieldRef<"FireIncident", 'String'>
    readonly reportedById: FieldRef<"FireIncident", 'Int'>
    readonly assignedToId: FieldRef<"FireIncident", 'Int'>
    readonly fireStationId: FieldRef<"FireIncident", 'Int'>
    readonly fireLevelId: FieldRef<"FireIncident", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * FireIncident findUnique
   */
  export type FireIncidentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FireIncident
     */
    select?: FireIncidentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FireIncident
     */
    omit?: FireIncidentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FireIncidentInclude<ExtArgs> | null
    /**
     * Filter, which FireIncident to fetch.
     */
    where: FireIncidentWhereUniqueInput
  }

  /**
   * FireIncident findUniqueOrThrow
   */
  export type FireIncidentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FireIncident
     */
    select?: FireIncidentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FireIncident
     */
    omit?: FireIncidentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FireIncidentInclude<ExtArgs> | null
    /**
     * Filter, which FireIncident to fetch.
     */
    where: FireIncidentWhereUniqueInput
  }

  /**
   * FireIncident findFirst
   */
  export type FireIncidentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FireIncident
     */
    select?: FireIncidentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FireIncident
     */
    omit?: FireIncidentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FireIncidentInclude<ExtArgs> | null
    /**
     * Filter, which FireIncident to fetch.
     */
    where?: FireIncidentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FireIncidents to fetch.
     */
    orderBy?: FireIncidentOrderByWithRelationInput | FireIncidentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FireIncidents.
     */
    cursor?: FireIncidentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FireIncidents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FireIncidents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FireIncidents.
     */
    distinct?: FireIncidentScalarFieldEnum | FireIncidentScalarFieldEnum[]
  }

  /**
   * FireIncident findFirstOrThrow
   */
  export type FireIncidentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FireIncident
     */
    select?: FireIncidentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FireIncident
     */
    omit?: FireIncidentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FireIncidentInclude<ExtArgs> | null
    /**
     * Filter, which FireIncident to fetch.
     */
    where?: FireIncidentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FireIncidents to fetch.
     */
    orderBy?: FireIncidentOrderByWithRelationInput | FireIncidentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FireIncidents.
     */
    cursor?: FireIncidentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FireIncidents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FireIncidents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FireIncidents.
     */
    distinct?: FireIncidentScalarFieldEnum | FireIncidentScalarFieldEnum[]
  }

  /**
   * FireIncident findMany
   */
  export type FireIncidentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FireIncident
     */
    select?: FireIncidentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FireIncident
     */
    omit?: FireIncidentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FireIncidentInclude<ExtArgs> | null
    /**
     * Filter, which FireIncidents to fetch.
     */
    where?: FireIncidentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FireIncidents to fetch.
     */
    orderBy?: FireIncidentOrderByWithRelationInput | FireIncidentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FireIncidents.
     */
    cursor?: FireIncidentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FireIncidents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FireIncidents.
     */
    skip?: number
    distinct?: FireIncidentScalarFieldEnum | FireIncidentScalarFieldEnum[]
  }

  /**
   * FireIncident create
   */
  export type FireIncidentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FireIncident
     */
    select?: FireIncidentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FireIncident
     */
    omit?: FireIncidentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FireIncidentInclude<ExtArgs> | null
    /**
     * The data needed to create a FireIncident.
     */
    data: XOR<FireIncidentCreateInput, FireIncidentUncheckedCreateInput>
  }

  /**
   * FireIncident createMany
   */
  export type FireIncidentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FireIncidents.
     */
    data: FireIncidentCreateManyInput | FireIncidentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FireIncident createManyAndReturn
   */
  export type FireIncidentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FireIncident
     */
    select?: FireIncidentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FireIncident
     */
    omit?: FireIncidentOmit<ExtArgs> | null
    /**
     * The data used to create many FireIncidents.
     */
    data: FireIncidentCreateManyInput | FireIncidentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FireIncidentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * FireIncident update
   */
  export type FireIncidentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FireIncident
     */
    select?: FireIncidentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FireIncident
     */
    omit?: FireIncidentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FireIncidentInclude<ExtArgs> | null
    /**
     * The data needed to update a FireIncident.
     */
    data: XOR<FireIncidentUpdateInput, FireIncidentUncheckedUpdateInput>
    /**
     * Choose, which FireIncident to update.
     */
    where: FireIncidentWhereUniqueInput
  }

  /**
   * FireIncident updateMany
   */
  export type FireIncidentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FireIncidents.
     */
    data: XOR<FireIncidentUpdateManyMutationInput, FireIncidentUncheckedUpdateManyInput>
    /**
     * Filter which FireIncidents to update
     */
    where?: FireIncidentWhereInput
    /**
     * Limit how many FireIncidents to update.
     */
    limit?: number
  }

  /**
   * FireIncident updateManyAndReturn
   */
  export type FireIncidentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FireIncident
     */
    select?: FireIncidentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FireIncident
     */
    omit?: FireIncidentOmit<ExtArgs> | null
    /**
     * The data used to update FireIncidents.
     */
    data: XOR<FireIncidentUpdateManyMutationInput, FireIncidentUncheckedUpdateManyInput>
    /**
     * Filter which FireIncidents to update
     */
    where?: FireIncidentWhereInput
    /**
     * Limit how many FireIncidents to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FireIncidentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * FireIncident upsert
   */
  export type FireIncidentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FireIncident
     */
    select?: FireIncidentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FireIncident
     */
    omit?: FireIncidentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FireIncidentInclude<ExtArgs> | null
    /**
     * The filter to search for the FireIncident to update in case it exists.
     */
    where: FireIncidentWhereUniqueInput
    /**
     * In case the FireIncident found by the `where` argument doesn't exist, create a new FireIncident with this data.
     */
    create: XOR<FireIncidentCreateInput, FireIncidentUncheckedCreateInput>
    /**
     * In case the FireIncident was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FireIncidentUpdateInput, FireIncidentUncheckedUpdateInput>
  }

  /**
   * FireIncident delete
   */
  export type FireIncidentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FireIncident
     */
    select?: FireIncidentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FireIncident
     */
    omit?: FireIncidentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FireIncidentInclude<ExtArgs> | null
    /**
     * Filter which FireIncident to delete.
     */
    where: FireIncidentWhereUniqueInput
  }

  /**
   * FireIncident deleteMany
   */
  export type FireIncidentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FireIncidents to delete
     */
    where?: FireIncidentWhereInput
    /**
     * Limit how many FireIncidents to delete.
     */
    limit?: number
  }

  /**
   * FireIncident.vehicles
   */
  export type FireIncident$vehiclesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Vehicle
     */
    select?: VehicleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Vehicle
     */
    omit?: VehicleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VehicleInclude<ExtArgs> | null
    where?: VehicleWhereInput
    orderBy?: VehicleOrderByWithRelationInput | VehicleOrderByWithRelationInput[]
    cursor?: VehicleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: VehicleScalarFieldEnum | VehicleScalarFieldEnum[]
  }

  /**
   * FireIncident.reports
   */
  export type FireIncident$reportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Report
     */
    omit?: ReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    where?: ReportWhereInput
    orderBy?: ReportOrderByWithRelationInput | ReportOrderByWithRelationInput[]
    cursor?: ReportWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReportScalarFieldEnum | ReportScalarFieldEnum[]
  }

  /**
   * FireIncident.history
   */
  export type FireIncident$historyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FireHistory
     */
    select?: FireHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the FireHistory
     */
    omit?: FireHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FireHistoryInclude<ExtArgs> | null
    where?: FireHistoryWhereInput
    orderBy?: FireHistoryOrderByWithRelationInput | FireHistoryOrderByWithRelationInput[]
    cursor?: FireHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FireHistoryScalarFieldEnum | FireHistoryScalarFieldEnum[]
  }

  /**
   * FireIncident without action
   */
  export type FireIncidentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FireIncident
     */
    select?: FireIncidentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FireIncident
     */
    omit?: FireIncidentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FireIncidentInclude<ExtArgs> | null
  }


  /**
   * Model FireAddressLevel
   */

  export type AggregateFireAddressLevel = {
    _count: FireAddressLevelCountAggregateOutputType | null
    _avg: FireAddressLevelAvgAggregateOutputType | null
    _sum: FireAddressLevelSumAggregateOutputType | null
    _min: FireAddressLevelMinAggregateOutputType | null
    _max: FireAddressLevelMaxAggregateOutputType | null
  }

  export type FireAddressLevelAvgAggregateOutputType = {
    id: number | null
    latitude: number | null
    longitude: number | null
    fireLevelId: number | null
  }

  export type FireAddressLevelSumAggregateOutputType = {
    id: number | null
    latitude: number | null
    longitude: number | null
    fireLevelId: number | null
  }

  export type FireAddressLevelMinAggregateOutputType = {
    id: number | null
    address: string | null
    description: string | null
    latitude: number | null
    longitude: number | null
    createdAt: Date | null
    updatedAt: Date | null
    fireLevelId: number | null
  }

  export type FireAddressLevelMaxAggregateOutputType = {
    id: number | null
    address: string | null
    description: string | null
    latitude: number | null
    longitude: number | null
    createdAt: Date | null
    updatedAt: Date | null
    fireLevelId: number | null
  }

  export type FireAddressLevelCountAggregateOutputType = {
    id: number
    address: number
    description: number
    latitude: number
    longitude: number
    createdAt: number
    updatedAt: number
    fireLevelId: number
    _all: number
  }


  export type FireAddressLevelAvgAggregateInputType = {
    id?: true
    latitude?: true
    longitude?: true
    fireLevelId?: true
  }

  export type FireAddressLevelSumAggregateInputType = {
    id?: true
    latitude?: true
    longitude?: true
    fireLevelId?: true
  }

  export type FireAddressLevelMinAggregateInputType = {
    id?: true
    address?: true
    description?: true
    latitude?: true
    longitude?: true
    createdAt?: true
    updatedAt?: true
    fireLevelId?: true
  }

  export type FireAddressLevelMaxAggregateInputType = {
    id?: true
    address?: true
    description?: true
    latitude?: true
    longitude?: true
    createdAt?: true
    updatedAt?: true
    fireLevelId?: true
  }

  export type FireAddressLevelCountAggregateInputType = {
    id?: true
    address?: true
    description?: true
    latitude?: true
    longitude?: true
    createdAt?: true
    updatedAt?: true
    fireLevelId?: true
    _all?: true
  }

  export type FireAddressLevelAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FireAddressLevel to aggregate.
     */
    where?: FireAddressLevelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FireAddressLevels to fetch.
     */
    orderBy?: FireAddressLevelOrderByWithRelationInput | FireAddressLevelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FireAddressLevelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FireAddressLevels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FireAddressLevels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FireAddressLevels
    **/
    _count?: true | FireAddressLevelCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FireAddressLevelAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FireAddressLevelSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FireAddressLevelMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FireAddressLevelMaxAggregateInputType
  }

  export type GetFireAddressLevelAggregateType<T extends FireAddressLevelAggregateArgs> = {
        [P in keyof T & keyof AggregateFireAddressLevel]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFireAddressLevel[P]>
      : GetScalarType<T[P], AggregateFireAddressLevel[P]>
  }




  export type FireAddressLevelGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FireAddressLevelWhereInput
    orderBy?: FireAddressLevelOrderByWithAggregationInput | FireAddressLevelOrderByWithAggregationInput[]
    by: FireAddressLevelScalarFieldEnum[] | FireAddressLevelScalarFieldEnum
    having?: FireAddressLevelScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FireAddressLevelCountAggregateInputType | true
    _avg?: FireAddressLevelAvgAggregateInputType
    _sum?: FireAddressLevelSumAggregateInputType
    _min?: FireAddressLevelMinAggregateInputType
    _max?: FireAddressLevelMaxAggregateInputType
  }

  export type FireAddressLevelGroupByOutputType = {
    id: number
    address: string
    description: string | null
    latitude: number | null
    longitude: number | null
    createdAt: Date
    updatedAt: Date
    fireLevelId: number
    _count: FireAddressLevelCountAggregateOutputType | null
    _avg: FireAddressLevelAvgAggregateOutputType | null
    _sum: FireAddressLevelSumAggregateOutputType | null
    _min: FireAddressLevelMinAggregateOutputType | null
    _max: FireAddressLevelMaxAggregateOutputType | null
  }

  type GetFireAddressLevelGroupByPayload<T extends FireAddressLevelGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FireAddressLevelGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FireAddressLevelGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FireAddressLevelGroupByOutputType[P]>
            : GetScalarType<T[P], FireAddressLevelGroupByOutputType[P]>
        }
      >
    >


  export type FireAddressLevelSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    address?: boolean
    description?: boolean
    latitude?: boolean
    longitude?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    fireLevelId?: boolean
    fireLevel?: boolean | FireLevelDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["fireAddressLevel"]>

  export type FireAddressLevelSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    address?: boolean
    description?: boolean
    latitude?: boolean
    longitude?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    fireLevelId?: boolean
    fireLevel?: boolean | FireLevelDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["fireAddressLevel"]>

  export type FireAddressLevelSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    address?: boolean
    description?: boolean
    latitude?: boolean
    longitude?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    fireLevelId?: boolean
    fireLevel?: boolean | FireLevelDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["fireAddressLevel"]>

  export type FireAddressLevelSelectScalar = {
    id?: boolean
    address?: boolean
    description?: boolean
    latitude?: boolean
    longitude?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    fireLevelId?: boolean
  }

  export type FireAddressLevelOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "address" | "description" | "latitude" | "longitude" | "createdAt" | "updatedAt" | "fireLevelId", ExtArgs["result"]["fireAddressLevel"]>
  export type FireAddressLevelInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    fireLevel?: boolean | FireLevelDefaultArgs<ExtArgs>
  }
  export type FireAddressLevelIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    fireLevel?: boolean | FireLevelDefaultArgs<ExtArgs>
  }
  export type FireAddressLevelIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    fireLevel?: boolean | FireLevelDefaultArgs<ExtArgs>
  }

  export type $FireAddressLevelPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FireAddressLevel"
    objects: {
      fireLevel: Prisma.$FireLevelPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      address: string
      description: string | null
      latitude: number | null
      longitude: number | null
      createdAt: Date
      updatedAt: Date
      fireLevelId: number
    }, ExtArgs["result"]["fireAddressLevel"]>
    composites: {}
  }

  type FireAddressLevelGetPayload<S extends boolean | null | undefined | FireAddressLevelDefaultArgs> = $Result.GetResult<Prisma.$FireAddressLevelPayload, S>

  type FireAddressLevelCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FireAddressLevelFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FireAddressLevelCountAggregateInputType | true
    }

  export interface FireAddressLevelDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FireAddressLevel'], meta: { name: 'FireAddressLevel' } }
    /**
     * Find zero or one FireAddressLevel that matches the filter.
     * @param {FireAddressLevelFindUniqueArgs} args - Arguments to find a FireAddressLevel
     * @example
     * // Get one FireAddressLevel
     * const fireAddressLevel = await prisma.fireAddressLevel.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FireAddressLevelFindUniqueArgs>(args: SelectSubset<T, FireAddressLevelFindUniqueArgs<ExtArgs>>): Prisma__FireAddressLevelClient<$Result.GetResult<Prisma.$FireAddressLevelPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one FireAddressLevel that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FireAddressLevelFindUniqueOrThrowArgs} args - Arguments to find a FireAddressLevel
     * @example
     * // Get one FireAddressLevel
     * const fireAddressLevel = await prisma.fireAddressLevel.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FireAddressLevelFindUniqueOrThrowArgs>(args: SelectSubset<T, FireAddressLevelFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FireAddressLevelClient<$Result.GetResult<Prisma.$FireAddressLevelPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FireAddressLevel that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FireAddressLevelFindFirstArgs} args - Arguments to find a FireAddressLevel
     * @example
     * // Get one FireAddressLevel
     * const fireAddressLevel = await prisma.fireAddressLevel.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FireAddressLevelFindFirstArgs>(args?: SelectSubset<T, FireAddressLevelFindFirstArgs<ExtArgs>>): Prisma__FireAddressLevelClient<$Result.GetResult<Prisma.$FireAddressLevelPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FireAddressLevel that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FireAddressLevelFindFirstOrThrowArgs} args - Arguments to find a FireAddressLevel
     * @example
     * // Get one FireAddressLevel
     * const fireAddressLevel = await prisma.fireAddressLevel.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FireAddressLevelFindFirstOrThrowArgs>(args?: SelectSubset<T, FireAddressLevelFindFirstOrThrowArgs<ExtArgs>>): Prisma__FireAddressLevelClient<$Result.GetResult<Prisma.$FireAddressLevelPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more FireAddressLevels that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FireAddressLevelFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FireAddressLevels
     * const fireAddressLevels = await prisma.fireAddressLevel.findMany()
     * 
     * // Get first 10 FireAddressLevels
     * const fireAddressLevels = await prisma.fireAddressLevel.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const fireAddressLevelWithIdOnly = await prisma.fireAddressLevel.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FireAddressLevelFindManyArgs>(args?: SelectSubset<T, FireAddressLevelFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FireAddressLevelPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a FireAddressLevel.
     * @param {FireAddressLevelCreateArgs} args - Arguments to create a FireAddressLevel.
     * @example
     * // Create one FireAddressLevel
     * const FireAddressLevel = await prisma.fireAddressLevel.create({
     *   data: {
     *     // ... data to create a FireAddressLevel
     *   }
     * })
     * 
     */
    create<T extends FireAddressLevelCreateArgs>(args: SelectSubset<T, FireAddressLevelCreateArgs<ExtArgs>>): Prisma__FireAddressLevelClient<$Result.GetResult<Prisma.$FireAddressLevelPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many FireAddressLevels.
     * @param {FireAddressLevelCreateManyArgs} args - Arguments to create many FireAddressLevels.
     * @example
     * // Create many FireAddressLevels
     * const fireAddressLevel = await prisma.fireAddressLevel.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FireAddressLevelCreateManyArgs>(args?: SelectSubset<T, FireAddressLevelCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FireAddressLevels and returns the data saved in the database.
     * @param {FireAddressLevelCreateManyAndReturnArgs} args - Arguments to create many FireAddressLevels.
     * @example
     * // Create many FireAddressLevels
     * const fireAddressLevel = await prisma.fireAddressLevel.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FireAddressLevels and only return the `id`
     * const fireAddressLevelWithIdOnly = await prisma.fireAddressLevel.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FireAddressLevelCreateManyAndReturnArgs>(args?: SelectSubset<T, FireAddressLevelCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FireAddressLevelPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a FireAddressLevel.
     * @param {FireAddressLevelDeleteArgs} args - Arguments to delete one FireAddressLevel.
     * @example
     * // Delete one FireAddressLevel
     * const FireAddressLevel = await prisma.fireAddressLevel.delete({
     *   where: {
     *     // ... filter to delete one FireAddressLevel
     *   }
     * })
     * 
     */
    delete<T extends FireAddressLevelDeleteArgs>(args: SelectSubset<T, FireAddressLevelDeleteArgs<ExtArgs>>): Prisma__FireAddressLevelClient<$Result.GetResult<Prisma.$FireAddressLevelPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one FireAddressLevel.
     * @param {FireAddressLevelUpdateArgs} args - Arguments to update one FireAddressLevel.
     * @example
     * // Update one FireAddressLevel
     * const fireAddressLevel = await prisma.fireAddressLevel.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FireAddressLevelUpdateArgs>(args: SelectSubset<T, FireAddressLevelUpdateArgs<ExtArgs>>): Prisma__FireAddressLevelClient<$Result.GetResult<Prisma.$FireAddressLevelPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more FireAddressLevels.
     * @param {FireAddressLevelDeleteManyArgs} args - Arguments to filter FireAddressLevels to delete.
     * @example
     * // Delete a few FireAddressLevels
     * const { count } = await prisma.fireAddressLevel.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FireAddressLevelDeleteManyArgs>(args?: SelectSubset<T, FireAddressLevelDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FireAddressLevels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FireAddressLevelUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FireAddressLevels
     * const fireAddressLevel = await prisma.fireAddressLevel.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FireAddressLevelUpdateManyArgs>(args: SelectSubset<T, FireAddressLevelUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FireAddressLevels and returns the data updated in the database.
     * @param {FireAddressLevelUpdateManyAndReturnArgs} args - Arguments to update many FireAddressLevels.
     * @example
     * // Update many FireAddressLevels
     * const fireAddressLevel = await prisma.fireAddressLevel.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more FireAddressLevels and only return the `id`
     * const fireAddressLevelWithIdOnly = await prisma.fireAddressLevel.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FireAddressLevelUpdateManyAndReturnArgs>(args: SelectSubset<T, FireAddressLevelUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FireAddressLevelPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one FireAddressLevel.
     * @param {FireAddressLevelUpsertArgs} args - Arguments to update or create a FireAddressLevel.
     * @example
     * // Update or create a FireAddressLevel
     * const fireAddressLevel = await prisma.fireAddressLevel.upsert({
     *   create: {
     *     // ... data to create a FireAddressLevel
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FireAddressLevel we want to update
     *   }
     * })
     */
    upsert<T extends FireAddressLevelUpsertArgs>(args: SelectSubset<T, FireAddressLevelUpsertArgs<ExtArgs>>): Prisma__FireAddressLevelClient<$Result.GetResult<Prisma.$FireAddressLevelPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of FireAddressLevels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FireAddressLevelCountArgs} args - Arguments to filter FireAddressLevels to count.
     * @example
     * // Count the number of FireAddressLevels
     * const count = await prisma.fireAddressLevel.count({
     *   where: {
     *     // ... the filter for the FireAddressLevels we want to count
     *   }
     * })
    **/
    count<T extends FireAddressLevelCountArgs>(
      args?: Subset<T, FireAddressLevelCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FireAddressLevelCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FireAddressLevel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FireAddressLevelAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FireAddressLevelAggregateArgs>(args: Subset<T, FireAddressLevelAggregateArgs>): Prisma.PrismaPromise<GetFireAddressLevelAggregateType<T>>

    /**
     * Group by FireAddressLevel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FireAddressLevelGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FireAddressLevelGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FireAddressLevelGroupByArgs['orderBy'] }
        : { orderBy?: FireAddressLevelGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FireAddressLevelGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFireAddressLevelGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FireAddressLevel model
   */
  readonly fields: FireAddressLevelFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FireAddressLevel.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FireAddressLevelClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    fireLevel<T extends FireLevelDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FireLevelDefaultArgs<ExtArgs>>): Prisma__FireLevelClient<$Result.GetResult<Prisma.$FireLevelPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FireAddressLevel model
   */
  interface FireAddressLevelFieldRefs {
    readonly id: FieldRef<"FireAddressLevel", 'Int'>
    readonly address: FieldRef<"FireAddressLevel", 'String'>
    readonly description: FieldRef<"FireAddressLevel", 'String'>
    readonly latitude: FieldRef<"FireAddressLevel", 'Float'>
    readonly longitude: FieldRef<"FireAddressLevel", 'Float'>
    readonly createdAt: FieldRef<"FireAddressLevel", 'DateTime'>
    readonly updatedAt: FieldRef<"FireAddressLevel", 'DateTime'>
    readonly fireLevelId: FieldRef<"FireAddressLevel", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * FireAddressLevel findUnique
   */
  export type FireAddressLevelFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FireAddressLevel
     */
    select?: FireAddressLevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FireAddressLevel
     */
    omit?: FireAddressLevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FireAddressLevelInclude<ExtArgs> | null
    /**
     * Filter, which FireAddressLevel to fetch.
     */
    where: FireAddressLevelWhereUniqueInput
  }

  /**
   * FireAddressLevel findUniqueOrThrow
   */
  export type FireAddressLevelFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FireAddressLevel
     */
    select?: FireAddressLevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FireAddressLevel
     */
    omit?: FireAddressLevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FireAddressLevelInclude<ExtArgs> | null
    /**
     * Filter, which FireAddressLevel to fetch.
     */
    where: FireAddressLevelWhereUniqueInput
  }

  /**
   * FireAddressLevel findFirst
   */
  export type FireAddressLevelFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FireAddressLevel
     */
    select?: FireAddressLevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FireAddressLevel
     */
    omit?: FireAddressLevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FireAddressLevelInclude<ExtArgs> | null
    /**
     * Filter, which FireAddressLevel to fetch.
     */
    where?: FireAddressLevelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FireAddressLevels to fetch.
     */
    orderBy?: FireAddressLevelOrderByWithRelationInput | FireAddressLevelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FireAddressLevels.
     */
    cursor?: FireAddressLevelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FireAddressLevels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FireAddressLevels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FireAddressLevels.
     */
    distinct?: FireAddressLevelScalarFieldEnum | FireAddressLevelScalarFieldEnum[]
  }

  /**
   * FireAddressLevel findFirstOrThrow
   */
  export type FireAddressLevelFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FireAddressLevel
     */
    select?: FireAddressLevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FireAddressLevel
     */
    omit?: FireAddressLevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FireAddressLevelInclude<ExtArgs> | null
    /**
     * Filter, which FireAddressLevel to fetch.
     */
    where?: FireAddressLevelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FireAddressLevels to fetch.
     */
    orderBy?: FireAddressLevelOrderByWithRelationInput | FireAddressLevelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FireAddressLevels.
     */
    cursor?: FireAddressLevelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FireAddressLevels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FireAddressLevels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FireAddressLevels.
     */
    distinct?: FireAddressLevelScalarFieldEnum | FireAddressLevelScalarFieldEnum[]
  }

  /**
   * FireAddressLevel findMany
   */
  export type FireAddressLevelFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FireAddressLevel
     */
    select?: FireAddressLevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FireAddressLevel
     */
    omit?: FireAddressLevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FireAddressLevelInclude<ExtArgs> | null
    /**
     * Filter, which FireAddressLevels to fetch.
     */
    where?: FireAddressLevelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FireAddressLevels to fetch.
     */
    orderBy?: FireAddressLevelOrderByWithRelationInput | FireAddressLevelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FireAddressLevels.
     */
    cursor?: FireAddressLevelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FireAddressLevels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FireAddressLevels.
     */
    skip?: number
    distinct?: FireAddressLevelScalarFieldEnum | FireAddressLevelScalarFieldEnum[]
  }

  /**
   * FireAddressLevel create
   */
  export type FireAddressLevelCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FireAddressLevel
     */
    select?: FireAddressLevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FireAddressLevel
     */
    omit?: FireAddressLevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FireAddressLevelInclude<ExtArgs> | null
    /**
     * The data needed to create a FireAddressLevel.
     */
    data: XOR<FireAddressLevelCreateInput, FireAddressLevelUncheckedCreateInput>
  }

  /**
   * FireAddressLevel createMany
   */
  export type FireAddressLevelCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FireAddressLevels.
     */
    data: FireAddressLevelCreateManyInput | FireAddressLevelCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FireAddressLevel createManyAndReturn
   */
  export type FireAddressLevelCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FireAddressLevel
     */
    select?: FireAddressLevelSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FireAddressLevel
     */
    omit?: FireAddressLevelOmit<ExtArgs> | null
    /**
     * The data used to create many FireAddressLevels.
     */
    data: FireAddressLevelCreateManyInput | FireAddressLevelCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FireAddressLevelIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * FireAddressLevel update
   */
  export type FireAddressLevelUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FireAddressLevel
     */
    select?: FireAddressLevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FireAddressLevel
     */
    omit?: FireAddressLevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FireAddressLevelInclude<ExtArgs> | null
    /**
     * The data needed to update a FireAddressLevel.
     */
    data: XOR<FireAddressLevelUpdateInput, FireAddressLevelUncheckedUpdateInput>
    /**
     * Choose, which FireAddressLevel to update.
     */
    where: FireAddressLevelWhereUniqueInput
  }

  /**
   * FireAddressLevel updateMany
   */
  export type FireAddressLevelUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FireAddressLevels.
     */
    data: XOR<FireAddressLevelUpdateManyMutationInput, FireAddressLevelUncheckedUpdateManyInput>
    /**
     * Filter which FireAddressLevels to update
     */
    where?: FireAddressLevelWhereInput
    /**
     * Limit how many FireAddressLevels to update.
     */
    limit?: number
  }

  /**
   * FireAddressLevel updateManyAndReturn
   */
  export type FireAddressLevelUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FireAddressLevel
     */
    select?: FireAddressLevelSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FireAddressLevel
     */
    omit?: FireAddressLevelOmit<ExtArgs> | null
    /**
     * The data used to update FireAddressLevels.
     */
    data: XOR<FireAddressLevelUpdateManyMutationInput, FireAddressLevelUncheckedUpdateManyInput>
    /**
     * Filter which FireAddressLevels to update
     */
    where?: FireAddressLevelWhereInput
    /**
     * Limit how many FireAddressLevels to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FireAddressLevelIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * FireAddressLevel upsert
   */
  export type FireAddressLevelUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FireAddressLevel
     */
    select?: FireAddressLevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FireAddressLevel
     */
    omit?: FireAddressLevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FireAddressLevelInclude<ExtArgs> | null
    /**
     * The filter to search for the FireAddressLevel to update in case it exists.
     */
    where: FireAddressLevelWhereUniqueInput
    /**
     * In case the FireAddressLevel found by the `where` argument doesn't exist, create a new FireAddressLevel with this data.
     */
    create: XOR<FireAddressLevelCreateInput, FireAddressLevelUncheckedCreateInput>
    /**
     * In case the FireAddressLevel was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FireAddressLevelUpdateInput, FireAddressLevelUncheckedUpdateInput>
  }

  /**
   * FireAddressLevel delete
   */
  export type FireAddressLevelDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FireAddressLevel
     */
    select?: FireAddressLevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FireAddressLevel
     */
    omit?: FireAddressLevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FireAddressLevelInclude<ExtArgs> | null
    /**
     * Filter which FireAddressLevel to delete.
     */
    where: FireAddressLevelWhereUniqueInput
  }

  /**
   * FireAddressLevel deleteMany
   */
  export type FireAddressLevelDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FireAddressLevels to delete
     */
    where?: FireAddressLevelWhereInput
    /**
     * Limit how many FireAddressLevels to delete.
     */
    limit?: number
  }

  /**
   * FireAddressLevel without action
   */
  export type FireAddressLevelDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FireAddressLevel
     */
    select?: FireAddressLevelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FireAddressLevel
     */
    omit?: FireAddressLevelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FireAddressLevelInclude<ExtArgs> | null
  }


  /**
   * Model Report
   */

  export type AggregateReport = {
    _count: ReportCountAggregateOutputType | null
    _avg: ReportAvgAggregateOutputType | null
    _sum: ReportSumAggregateOutputType | null
    _min: ReportMinAggregateOutputType | null
    _max: ReportMaxAggregateOutputType | null
  }

  export type ReportAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    fireIncidentId: number | null
  }

  export type ReportSumAggregateOutputType = {
    id: number | null
    userId: number | null
    fireIncidentId: number | null
  }

  export type ReportMinAggregateOutputType = {
    id: number | null
    content: string | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: number | null
    fireIncidentId: number | null
  }

  export type ReportMaxAggregateOutputType = {
    id: number | null
    content: string | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: number | null
    fireIncidentId: number | null
  }

  export type ReportCountAggregateOutputType = {
    id: number
    content: number
    createdAt: number
    updatedAt: number
    userId: number
    fireIncidentId: number
    _all: number
  }


  export type ReportAvgAggregateInputType = {
    id?: true
    userId?: true
    fireIncidentId?: true
  }

  export type ReportSumAggregateInputType = {
    id?: true
    userId?: true
    fireIncidentId?: true
  }

  export type ReportMinAggregateInputType = {
    id?: true
    content?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    fireIncidentId?: true
  }

  export type ReportMaxAggregateInputType = {
    id?: true
    content?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    fireIncidentId?: true
  }

  export type ReportCountAggregateInputType = {
    id?: true
    content?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    fireIncidentId?: true
    _all?: true
  }

  export type ReportAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Report to aggregate.
     */
    where?: ReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reports to fetch.
     */
    orderBy?: ReportOrderByWithRelationInput | ReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Reports
    **/
    _count?: true | ReportCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReportAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReportSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReportMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReportMaxAggregateInputType
  }

  export type GetReportAggregateType<T extends ReportAggregateArgs> = {
        [P in keyof T & keyof AggregateReport]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReport[P]>
      : GetScalarType<T[P], AggregateReport[P]>
  }




  export type ReportGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReportWhereInput
    orderBy?: ReportOrderByWithAggregationInput | ReportOrderByWithAggregationInput[]
    by: ReportScalarFieldEnum[] | ReportScalarFieldEnum
    having?: ReportScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReportCountAggregateInputType | true
    _avg?: ReportAvgAggregateInputType
    _sum?: ReportSumAggregateInputType
    _min?: ReportMinAggregateInputType
    _max?: ReportMaxAggregateInputType
  }

  export type ReportGroupByOutputType = {
    id: number
    content: string
    createdAt: Date
    updatedAt: Date
    userId: number
    fireIncidentId: number
    _count: ReportCountAggregateOutputType | null
    _avg: ReportAvgAggregateOutputType | null
    _sum: ReportSumAggregateOutputType | null
    _min: ReportMinAggregateOutputType | null
    _max: ReportMaxAggregateOutputType | null
  }

  type GetReportGroupByPayload<T extends ReportGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReportGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReportGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReportGroupByOutputType[P]>
            : GetScalarType<T[P], ReportGroupByOutputType[P]>
        }
      >
    >


  export type ReportSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    fireIncidentId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    fireIncident?: boolean | FireIncidentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["report"]>

  export type ReportSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    fireIncidentId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    fireIncident?: boolean | FireIncidentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["report"]>

  export type ReportSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    fireIncidentId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    fireIncident?: boolean | FireIncidentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["report"]>

  export type ReportSelectScalar = {
    id?: boolean
    content?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    fireIncidentId?: boolean
  }

  export type ReportOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "content" | "createdAt" | "updatedAt" | "userId" | "fireIncidentId", ExtArgs["result"]["report"]>
  export type ReportInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    fireIncident?: boolean | FireIncidentDefaultArgs<ExtArgs>
  }
  export type ReportIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    fireIncident?: boolean | FireIncidentDefaultArgs<ExtArgs>
  }
  export type ReportIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    fireIncident?: boolean | FireIncidentDefaultArgs<ExtArgs>
  }

  export type $ReportPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Report"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      fireIncident: Prisma.$FireIncidentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      content: string
      createdAt: Date
      updatedAt: Date
      userId: number
      fireIncidentId: number
    }, ExtArgs["result"]["report"]>
    composites: {}
  }

  type ReportGetPayload<S extends boolean | null | undefined | ReportDefaultArgs> = $Result.GetResult<Prisma.$ReportPayload, S>

  type ReportCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ReportFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ReportCountAggregateInputType | true
    }

  export interface ReportDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Report'], meta: { name: 'Report' } }
    /**
     * Find zero or one Report that matches the filter.
     * @param {ReportFindUniqueArgs} args - Arguments to find a Report
     * @example
     * // Get one Report
     * const report = await prisma.report.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReportFindUniqueArgs>(args: SelectSubset<T, ReportFindUniqueArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Report that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ReportFindUniqueOrThrowArgs} args - Arguments to find a Report
     * @example
     * // Get one Report
     * const report = await prisma.report.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReportFindUniqueOrThrowArgs>(args: SelectSubset<T, ReportFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Report that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportFindFirstArgs} args - Arguments to find a Report
     * @example
     * // Get one Report
     * const report = await prisma.report.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReportFindFirstArgs>(args?: SelectSubset<T, ReportFindFirstArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Report that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportFindFirstOrThrowArgs} args - Arguments to find a Report
     * @example
     * // Get one Report
     * const report = await prisma.report.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReportFindFirstOrThrowArgs>(args?: SelectSubset<T, ReportFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Reports that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Reports
     * const reports = await prisma.report.findMany()
     * 
     * // Get first 10 Reports
     * const reports = await prisma.report.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reportWithIdOnly = await prisma.report.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ReportFindManyArgs>(args?: SelectSubset<T, ReportFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Report.
     * @param {ReportCreateArgs} args - Arguments to create a Report.
     * @example
     * // Create one Report
     * const Report = await prisma.report.create({
     *   data: {
     *     // ... data to create a Report
     *   }
     * })
     * 
     */
    create<T extends ReportCreateArgs>(args: SelectSubset<T, ReportCreateArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Reports.
     * @param {ReportCreateManyArgs} args - Arguments to create many Reports.
     * @example
     * // Create many Reports
     * const report = await prisma.report.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReportCreateManyArgs>(args?: SelectSubset<T, ReportCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Reports and returns the data saved in the database.
     * @param {ReportCreateManyAndReturnArgs} args - Arguments to create many Reports.
     * @example
     * // Create many Reports
     * const report = await prisma.report.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Reports and only return the `id`
     * const reportWithIdOnly = await prisma.report.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ReportCreateManyAndReturnArgs>(args?: SelectSubset<T, ReportCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Report.
     * @param {ReportDeleteArgs} args - Arguments to delete one Report.
     * @example
     * // Delete one Report
     * const Report = await prisma.report.delete({
     *   where: {
     *     // ... filter to delete one Report
     *   }
     * })
     * 
     */
    delete<T extends ReportDeleteArgs>(args: SelectSubset<T, ReportDeleteArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Report.
     * @param {ReportUpdateArgs} args - Arguments to update one Report.
     * @example
     * // Update one Report
     * const report = await prisma.report.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReportUpdateArgs>(args: SelectSubset<T, ReportUpdateArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Reports.
     * @param {ReportDeleteManyArgs} args - Arguments to filter Reports to delete.
     * @example
     * // Delete a few Reports
     * const { count } = await prisma.report.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReportDeleteManyArgs>(args?: SelectSubset<T, ReportDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Reports
     * const report = await prisma.report.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReportUpdateManyArgs>(args: SelectSubset<T, ReportUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reports and returns the data updated in the database.
     * @param {ReportUpdateManyAndReturnArgs} args - Arguments to update many Reports.
     * @example
     * // Update many Reports
     * const report = await prisma.report.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Reports and only return the `id`
     * const reportWithIdOnly = await prisma.report.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ReportUpdateManyAndReturnArgs>(args: SelectSubset<T, ReportUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Report.
     * @param {ReportUpsertArgs} args - Arguments to update or create a Report.
     * @example
     * // Update or create a Report
     * const report = await prisma.report.upsert({
     *   create: {
     *     // ... data to create a Report
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Report we want to update
     *   }
     * })
     */
    upsert<T extends ReportUpsertArgs>(args: SelectSubset<T, ReportUpsertArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Reports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportCountArgs} args - Arguments to filter Reports to count.
     * @example
     * // Count the number of Reports
     * const count = await prisma.report.count({
     *   where: {
     *     // ... the filter for the Reports we want to count
     *   }
     * })
    **/
    count<T extends ReportCountArgs>(
      args?: Subset<T, ReportCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReportCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Report.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReportAggregateArgs>(args: Subset<T, ReportAggregateArgs>): Prisma.PrismaPromise<GetReportAggregateType<T>>

    /**
     * Group by Report.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReportGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReportGroupByArgs['orderBy'] }
        : { orderBy?: ReportGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReportGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReportGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Report model
   */
  readonly fields: ReportFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Report.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReportClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    fireIncident<T extends FireIncidentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FireIncidentDefaultArgs<ExtArgs>>): Prisma__FireIncidentClient<$Result.GetResult<Prisma.$FireIncidentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Report model
   */
  interface ReportFieldRefs {
    readonly id: FieldRef<"Report", 'Int'>
    readonly content: FieldRef<"Report", 'String'>
    readonly createdAt: FieldRef<"Report", 'DateTime'>
    readonly updatedAt: FieldRef<"Report", 'DateTime'>
    readonly userId: FieldRef<"Report", 'Int'>
    readonly fireIncidentId: FieldRef<"Report", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Report findUnique
   */
  export type ReportFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Report
     */
    omit?: ReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * Filter, which Report to fetch.
     */
    where: ReportWhereUniqueInput
  }

  /**
   * Report findUniqueOrThrow
   */
  export type ReportFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Report
     */
    omit?: ReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * Filter, which Report to fetch.
     */
    where: ReportWhereUniqueInput
  }

  /**
   * Report findFirst
   */
  export type ReportFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Report
     */
    omit?: ReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * Filter, which Report to fetch.
     */
    where?: ReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reports to fetch.
     */
    orderBy?: ReportOrderByWithRelationInput | ReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reports.
     */
    cursor?: ReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reports.
     */
    distinct?: ReportScalarFieldEnum | ReportScalarFieldEnum[]
  }

  /**
   * Report findFirstOrThrow
   */
  export type ReportFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Report
     */
    omit?: ReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * Filter, which Report to fetch.
     */
    where?: ReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reports to fetch.
     */
    orderBy?: ReportOrderByWithRelationInput | ReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reports.
     */
    cursor?: ReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reports.
     */
    distinct?: ReportScalarFieldEnum | ReportScalarFieldEnum[]
  }

  /**
   * Report findMany
   */
  export type ReportFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Report
     */
    omit?: ReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * Filter, which Reports to fetch.
     */
    where?: ReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reports to fetch.
     */
    orderBy?: ReportOrderByWithRelationInput | ReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Reports.
     */
    cursor?: ReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reports.
     */
    skip?: number
    distinct?: ReportScalarFieldEnum | ReportScalarFieldEnum[]
  }

  /**
   * Report create
   */
  export type ReportCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Report
     */
    omit?: ReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * The data needed to create a Report.
     */
    data: XOR<ReportCreateInput, ReportUncheckedCreateInput>
  }

  /**
   * Report createMany
   */
  export type ReportCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Reports.
     */
    data: ReportCreateManyInput | ReportCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Report createManyAndReturn
   */
  export type ReportCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Report
     */
    omit?: ReportOmit<ExtArgs> | null
    /**
     * The data used to create many Reports.
     */
    data: ReportCreateManyInput | ReportCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Report update
   */
  export type ReportUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Report
     */
    omit?: ReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * The data needed to update a Report.
     */
    data: XOR<ReportUpdateInput, ReportUncheckedUpdateInput>
    /**
     * Choose, which Report to update.
     */
    where: ReportWhereUniqueInput
  }

  /**
   * Report updateMany
   */
  export type ReportUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Reports.
     */
    data: XOR<ReportUpdateManyMutationInput, ReportUncheckedUpdateManyInput>
    /**
     * Filter which Reports to update
     */
    where?: ReportWhereInput
    /**
     * Limit how many Reports to update.
     */
    limit?: number
  }

  /**
   * Report updateManyAndReturn
   */
  export type ReportUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Report
     */
    omit?: ReportOmit<ExtArgs> | null
    /**
     * The data used to update Reports.
     */
    data: XOR<ReportUpdateManyMutationInput, ReportUncheckedUpdateManyInput>
    /**
     * Filter which Reports to update
     */
    where?: ReportWhereInput
    /**
     * Limit how many Reports to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Report upsert
   */
  export type ReportUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Report
     */
    omit?: ReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * The filter to search for the Report to update in case it exists.
     */
    where: ReportWhereUniqueInput
    /**
     * In case the Report found by the `where` argument doesn't exist, create a new Report with this data.
     */
    create: XOR<ReportCreateInput, ReportUncheckedCreateInput>
    /**
     * In case the Report was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReportUpdateInput, ReportUncheckedUpdateInput>
  }

  /**
   * Report delete
   */
  export type ReportDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Report
     */
    omit?: ReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * Filter which Report to delete.
     */
    where: ReportWhereUniqueInput
  }

  /**
   * Report deleteMany
   */
  export type ReportDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Reports to delete
     */
    where?: ReportWhereInput
    /**
     * Limit how many Reports to delete.
     */
    limit?: number
  }

  /**
   * Report without action
   */
  export type ReportDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Report
     */
    omit?: ReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
  }


  /**
   * Model UserActivity
   */

  export type AggregateUserActivity = {
    _count: UserActivityCountAggregateOutputType | null
    _avg: UserActivityAvgAggregateOutputType | null
    _sum: UserActivitySumAggregateOutputType | null
    _min: UserActivityMinAggregateOutputType | null
    _max: UserActivityMaxAggregateOutputType | null
  }

  export type UserActivityAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type UserActivitySumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type UserActivityMinAggregateOutputType = {
    id: number | null
    userId: number | null
    action: string | null
    details: string | null
    timestamp: Date | null
    ipAddress: string | null
    userAgent: string | null
  }

  export type UserActivityMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    action: string | null
    details: string | null
    timestamp: Date | null
    ipAddress: string | null
    userAgent: string | null
  }

  export type UserActivityCountAggregateOutputType = {
    id: number
    userId: number
    action: number
    details: number
    timestamp: number
    ipAddress: number
    userAgent: number
    _all: number
  }


  export type UserActivityAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type UserActivitySumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type UserActivityMinAggregateInputType = {
    id?: true
    userId?: true
    action?: true
    details?: true
    timestamp?: true
    ipAddress?: true
    userAgent?: true
  }

  export type UserActivityMaxAggregateInputType = {
    id?: true
    userId?: true
    action?: true
    details?: true
    timestamp?: true
    ipAddress?: true
    userAgent?: true
  }

  export type UserActivityCountAggregateInputType = {
    id?: true
    userId?: true
    action?: true
    details?: true
    timestamp?: true
    ipAddress?: true
    userAgent?: true
    _all?: true
  }

  export type UserActivityAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserActivity to aggregate.
     */
    where?: UserActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserActivities to fetch.
     */
    orderBy?: UserActivityOrderByWithRelationInput | UserActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserActivities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserActivities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserActivities
    **/
    _count?: true | UserActivityCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserActivityAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserActivitySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserActivityMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserActivityMaxAggregateInputType
  }

  export type GetUserActivityAggregateType<T extends UserActivityAggregateArgs> = {
        [P in keyof T & keyof AggregateUserActivity]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserActivity[P]>
      : GetScalarType<T[P], AggregateUserActivity[P]>
  }




  export type UserActivityGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserActivityWhereInput
    orderBy?: UserActivityOrderByWithAggregationInput | UserActivityOrderByWithAggregationInput[]
    by: UserActivityScalarFieldEnum[] | UserActivityScalarFieldEnum
    having?: UserActivityScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserActivityCountAggregateInputType | true
    _avg?: UserActivityAvgAggregateInputType
    _sum?: UserActivitySumAggregateInputType
    _min?: UserActivityMinAggregateInputType
    _max?: UserActivityMaxAggregateInputType
  }

  export type UserActivityGroupByOutputType = {
    id: number
    userId: number
    action: string
    details: string | null
    timestamp: Date
    ipAddress: string | null
    userAgent: string | null
    _count: UserActivityCountAggregateOutputType | null
    _avg: UserActivityAvgAggregateOutputType | null
    _sum: UserActivitySumAggregateOutputType | null
    _min: UserActivityMinAggregateOutputType | null
    _max: UserActivityMaxAggregateOutputType | null
  }

  type GetUserActivityGroupByPayload<T extends UserActivityGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserActivityGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserActivityGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserActivityGroupByOutputType[P]>
            : GetScalarType<T[P], UserActivityGroupByOutputType[P]>
        }
      >
    >


  export type UserActivitySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    action?: boolean
    details?: boolean
    timestamp?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userActivity"]>

  export type UserActivitySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    action?: boolean
    details?: boolean
    timestamp?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userActivity"]>

  export type UserActivitySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    action?: boolean
    details?: boolean
    timestamp?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userActivity"]>

  export type UserActivitySelectScalar = {
    id?: boolean
    userId?: boolean
    action?: boolean
    details?: boolean
    timestamp?: boolean
    ipAddress?: boolean
    userAgent?: boolean
  }

  export type UserActivityOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "action" | "details" | "timestamp" | "ipAddress" | "userAgent", ExtArgs["result"]["userActivity"]>
  export type UserActivityInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserActivityIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserActivityIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UserActivityPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserActivity"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      action: string
      details: string | null
      timestamp: Date
      ipAddress: string | null
      userAgent: string | null
    }, ExtArgs["result"]["userActivity"]>
    composites: {}
  }

  type UserActivityGetPayload<S extends boolean | null | undefined | UserActivityDefaultArgs> = $Result.GetResult<Prisma.$UserActivityPayload, S>

  type UserActivityCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserActivityFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserActivityCountAggregateInputType | true
    }

  export interface UserActivityDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserActivity'], meta: { name: 'UserActivity' } }
    /**
     * Find zero or one UserActivity that matches the filter.
     * @param {UserActivityFindUniqueArgs} args - Arguments to find a UserActivity
     * @example
     * // Get one UserActivity
     * const userActivity = await prisma.userActivity.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserActivityFindUniqueArgs>(args: SelectSubset<T, UserActivityFindUniqueArgs<ExtArgs>>): Prisma__UserActivityClient<$Result.GetResult<Prisma.$UserActivityPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserActivity that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserActivityFindUniqueOrThrowArgs} args - Arguments to find a UserActivity
     * @example
     * // Get one UserActivity
     * const userActivity = await prisma.userActivity.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserActivityFindUniqueOrThrowArgs>(args: SelectSubset<T, UserActivityFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserActivityClient<$Result.GetResult<Prisma.$UserActivityPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserActivity that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserActivityFindFirstArgs} args - Arguments to find a UserActivity
     * @example
     * // Get one UserActivity
     * const userActivity = await prisma.userActivity.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserActivityFindFirstArgs>(args?: SelectSubset<T, UserActivityFindFirstArgs<ExtArgs>>): Prisma__UserActivityClient<$Result.GetResult<Prisma.$UserActivityPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserActivity that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserActivityFindFirstOrThrowArgs} args - Arguments to find a UserActivity
     * @example
     * // Get one UserActivity
     * const userActivity = await prisma.userActivity.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserActivityFindFirstOrThrowArgs>(args?: SelectSubset<T, UserActivityFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserActivityClient<$Result.GetResult<Prisma.$UserActivityPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserActivities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserActivityFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserActivities
     * const userActivities = await prisma.userActivity.findMany()
     * 
     * // Get first 10 UserActivities
     * const userActivities = await prisma.userActivity.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userActivityWithIdOnly = await prisma.userActivity.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserActivityFindManyArgs>(args?: SelectSubset<T, UserActivityFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserActivityPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserActivity.
     * @param {UserActivityCreateArgs} args - Arguments to create a UserActivity.
     * @example
     * // Create one UserActivity
     * const UserActivity = await prisma.userActivity.create({
     *   data: {
     *     // ... data to create a UserActivity
     *   }
     * })
     * 
     */
    create<T extends UserActivityCreateArgs>(args: SelectSubset<T, UserActivityCreateArgs<ExtArgs>>): Prisma__UserActivityClient<$Result.GetResult<Prisma.$UserActivityPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserActivities.
     * @param {UserActivityCreateManyArgs} args - Arguments to create many UserActivities.
     * @example
     * // Create many UserActivities
     * const userActivity = await prisma.userActivity.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserActivityCreateManyArgs>(args?: SelectSubset<T, UserActivityCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserActivities and returns the data saved in the database.
     * @param {UserActivityCreateManyAndReturnArgs} args - Arguments to create many UserActivities.
     * @example
     * // Create many UserActivities
     * const userActivity = await prisma.userActivity.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserActivities and only return the `id`
     * const userActivityWithIdOnly = await prisma.userActivity.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserActivityCreateManyAndReturnArgs>(args?: SelectSubset<T, UserActivityCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserActivityPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserActivity.
     * @param {UserActivityDeleteArgs} args - Arguments to delete one UserActivity.
     * @example
     * // Delete one UserActivity
     * const UserActivity = await prisma.userActivity.delete({
     *   where: {
     *     // ... filter to delete one UserActivity
     *   }
     * })
     * 
     */
    delete<T extends UserActivityDeleteArgs>(args: SelectSubset<T, UserActivityDeleteArgs<ExtArgs>>): Prisma__UserActivityClient<$Result.GetResult<Prisma.$UserActivityPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserActivity.
     * @param {UserActivityUpdateArgs} args - Arguments to update one UserActivity.
     * @example
     * // Update one UserActivity
     * const userActivity = await prisma.userActivity.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserActivityUpdateArgs>(args: SelectSubset<T, UserActivityUpdateArgs<ExtArgs>>): Prisma__UserActivityClient<$Result.GetResult<Prisma.$UserActivityPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserActivities.
     * @param {UserActivityDeleteManyArgs} args - Arguments to filter UserActivities to delete.
     * @example
     * // Delete a few UserActivities
     * const { count } = await prisma.userActivity.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserActivityDeleteManyArgs>(args?: SelectSubset<T, UserActivityDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserActivities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserActivityUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserActivities
     * const userActivity = await prisma.userActivity.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserActivityUpdateManyArgs>(args: SelectSubset<T, UserActivityUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserActivities and returns the data updated in the database.
     * @param {UserActivityUpdateManyAndReturnArgs} args - Arguments to update many UserActivities.
     * @example
     * // Update many UserActivities
     * const userActivity = await prisma.userActivity.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserActivities and only return the `id`
     * const userActivityWithIdOnly = await prisma.userActivity.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserActivityUpdateManyAndReturnArgs>(args: SelectSubset<T, UserActivityUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserActivityPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserActivity.
     * @param {UserActivityUpsertArgs} args - Arguments to update or create a UserActivity.
     * @example
     * // Update or create a UserActivity
     * const userActivity = await prisma.userActivity.upsert({
     *   create: {
     *     // ... data to create a UserActivity
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserActivity we want to update
     *   }
     * })
     */
    upsert<T extends UserActivityUpsertArgs>(args: SelectSubset<T, UserActivityUpsertArgs<ExtArgs>>): Prisma__UserActivityClient<$Result.GetResult<Prisma.$UserActivityPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserActivities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserActivityCountArgs} args - Arguments to filter UserActivities to count.
     * @example
     * // Count the number of UserActivities
     * const count = await prisma.userActivity.count({
     *   where: {
     *     // ... the filter for the UserActivities we want to count
     *   }
     * })
    **/
    count<T extends UserActivityCountArgs>(
      args?: Subset<T, UserActivityCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserActivityCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserActivity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserActivityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserActivityAggregateArgs>(args: Subset<T, UserActivityAggregateArgs>): Prisma.PrismaPromise<GetUserActivityAggregateType<T>>

    /**
     * Group by UserActivity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserActivityGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserActivityGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserActivityGroupByArgs['orderBy'] }
        : { orderBy?: UserActivityGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserActivityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserActivityGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserActivity model
   */
  readonly fields: UserActivityFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserActivity.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserActivityClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserActivity model
   */
  interface UserActivityFieldRefs {
    readonly id: FieldRef<"UserActivity", 'Int'>
    readonly userId: FieldRef<"UserActivity", 'Int'>
    readonly action: FieldRef<"UserActivity", 'String'>
    readonly details: FieldRef<"UserActivity", 'String'>
    readonly timestamp: FieldRef<"UserActivity", 'DateTime'>
    readonly ipAddress: FieldRef<"UserActivity", 'String'>
    readonly userAgent: FieldRef<"UserActivity", 'String'>
  }
    

  // Custom InputTypes
  /**
   * UserActivity findUnique
   */
  export type UserActivityFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserActivity
     */
    select?: UserActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserActivity
     */
    omit?: UserActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserActivityInclude<ExtArgs> | null
    /**
     * Filter, which UserActivity to fetch.
     */
    where: UserActivityWhereUniqueInput
  }

  /**
   * UserActivity findUniqueOrThrow
   */
  export type UserActivityFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserActivity
     */
    select?: UserActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserActivity
     */
    omit?: UserActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserActivityInclude<ExtArgs> | null
    /**
     * Filter, which UserActivity to fetch.
     */
    where: UserActivityWhereUniqueInput
  }

  /**
   * UserActivity findFirst
   */
  export type UserActivityFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserActivity
     */
    select?: UserActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserActivity
     */
    omit?: UserActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserActivityInclude<ExtArgs> | null
    /**
     * Filter, which UserActivity to fetch.
     */
    where?: UserActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserActivities to fetch.
     */
    orderBy?: UserActivityOrderByWithRelationInput | UserActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserActivities.
     */
    cursor?: UserActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserActivities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserActivities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserActivities.
     */
    distinct?: UserActivityScalarFieldEnum | UserActivityScalarFieldEnum[]
  }

  /**
   * UserActivity findFirstOrThrow
   */
  export type UserActivityFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserActivity
     */
    select?: UserActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserActivity
     */
    omit?: UserActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserActivityInclude<ExtArgs> | null
    /**
     * Filter, which UserActivity to fetch.
     */
    where?: UserActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserActivities to fetch.
     */
    orderBy?: UserActivityOrderByWithRelationInput | UserActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserActivities.
     */
    cursor?: UserActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserActivities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserActivities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserActivities.
     */
    distinct?: UserActivityScalarFieldEnum | UserActivityScalarFieldEnum[]
  }

  /**
   * UserActivity findMany
   */
  export type UserActivityFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserActivity
     */
    select?: UserActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserActivity
     */
    omit?: UserActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserActivityInclude<ExtArgs> | null
    /**
     * Filter, which UserActivities to fetch.
     */
    where?: UserActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserActivities to fetch.
     */
    orderBy?: UserActivityOrderByWithRelationInput | UserActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserActivities.
     */
    cursor?: UserActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserActivities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserActivities.
     */
    skip?: number
    distinct?: UserActivityScalarFieldEnum | UserActivityScalarFieldEnum[]
  }

  /**
   * UserActivity create
   */
  export type UserActivityCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserActivity
     */
    select?: UserActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserActivity
     */
    omit?: UserActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserActivityInclude<ExtArgs> | null
    /**
     * The data needed to create a UserActivity.
     */
    data: XOR<UserActivityCreateInput, UserActivityUncheckedCreateInput>
  }

  /**
   * UserActivity createMany
   */
  export type UserActivityCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserActivities.
     */
    data: UserActivityCreateManyInput | UserActivityCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserActivity createManyAndReturn
   */
  export type UserActivityCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserActivity
     */
    select?: UserActivitySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserActivity
     */
    omit?: UserActivityOmit<ExtArgs> | null
    /**
     * The data used to create many UserActivities.
     */
    data: UserActivityCreateManyInput | UserActivityCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserActivityIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserActivity update
   */
  export type UserActivityUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserActivity
     */
    select?: UserActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserActivity
     */
    omit?: UserActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserActivityInclude<ExtArgs> | null
    /**
     * The data needed to update a UserActivity.
     */
    data: XOR<UserActivityUpdateInput, UserActivityUncheckedUpdateInput>
    /**
     * Choose, which UserActivity to update.
     */
    where: UserActivityWhereUniqueInput
  }

  /**
   * UserActivity updateMany
   */
  export type UserActivityUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserActivities.
     */
    data: XOR<UserActivityUpdateManyMutationInput, UserActivityUncheckedUpdateManyInput>
    /**
     * Filter which UserActivities to update
     */
    where?: UserActivityWhereInput
    /**
     * Limit how many UserActivities to update.
     */
    limit?: number
  }

  /**
   * UserActivity updateManyAndReturn
   */
  export type UserActivityUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserActivity
     */
    select?: UserActivitySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserActivity
     */
    omit?: UserActivityOmit<ExtArgs> | null
    /**
     * The data used to update UserActivities.
     */
    data: XOR<UserActivityUpdateManyMutationInput, UserActivityUncheckedUpdateManyInput>
    /**
     * Filter which UserActivities to update
     */
    where?: UserActivityWhereInput
    /**
     * Limit how many UserActivities to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserActivityIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserActivity upsert
   */
  export type UserActivityUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserActivity
     */
    select?: UserActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserActivity
     */
    omit?: UserActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserActivityInclude<ExtArgs> | null
    /**
     * The filter to search for the UserActivity to update in case it exists.
     */
    where: UserActivityWhereUniqueInput
    /**
     * In case the UserActivity found by the `where` argument doesn't exist, create a new UserActivity with this data.
     */
    create: XOR<UserActivityCreateInput, UserActivityUncheckedCreateInput>
    /**
     * In case the UserActivity was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserActivityUpdateInput, UserActivityUncheckedUpdateInput>
  }

  /**
   * UserActivity delete
   */
  export type UserActivityDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserActivity
     */
    select?: UserActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserActivity
     */
    omit?: UserActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserActivityInclude<ExtArgs> | null
    /**
     * Filter which UserActivity to delete.
     */
    where: UserActivityWhereUniqueInput
  }

  /**
   * UserActivity deleteMany
   */
  export type UserActivityDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserActivities to delete
     */
    where?: UserActivityWhereInput
    /**
     * Limit how many UserActivities to delete.
     */
    limit?: number
  }

  /**
   * UserActivity without action
   */
  export type UserActivityDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserActivity
     */
    select?: UserActivitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserActivity
     */
    omit?: UserActivityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserActivityInclude<ExtArgs> | null
  }


  /**
   * Model FireHistory
   */

  export type AggregateFireHistory = {
    _count: FireHistoryCountAggregateOutputType | null
    _avg: FireHistoryAvgAggregateOutputType | null
    _sum: FireHistorySumAggregateOutputType | null
    _min: FireHistoryMinAggregateOutputType | null
    _max: FireHistoryMaxAggregateOutputType | null
  }

  export type FireHistoryAvgAggregateOutputType = {
    id: number | null
    fireIncidentId: number | null
  }

  export type FireHistorySumAggregateOutputType = {
    id: number | null
    fireIncidentId: number | null
  }

  export type FireHistoryMinAggregateOutputType = {
    id: number | null
    fireIncidentId: number | null
    action: string | null
    details: string | null
    timestamp: Date | null
  }

  export type FireHistoryMaxAggregateOutputType = {
    id: number | null
    fireIncidentId: number | null
    action: string | null
    details: string | null
    timestamp: Date | null
  }

  export type FireHistoryCountAggregateOutputType = {
    id: number
    fireIncidentId: number
    action: number
    details: number
    timestamp: number
    _all: number
  }


  export type FireHistoryAvgAggregateInputType = {
    id?: true
    fireIncidentId?: true
  }

  export type FireHistorySumAggregateInputType = {
    id?: true
    fireIncidentId?: true
  }

  export type FireHistoryMinAggregateInputType = {
    id?: true
    fireIncidentId?: true
    action?: true
    details?: true
    timestamp?: true
  }

  export type FireHistoryMaxAggregateInputType = {
    id?: true
    fireIncidentId?: true
    action?: true
    details?: true
    timestamp?: true
  }

  export type FireHistoryCountAggregateInputType = {
    id?: true
    fireIncidentId?: true
    action?: true
    details?: true
    timestamp?: true
    _all?: true
  }

  export type FireHistoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FireHistory to aggregate.
     */
    where?: FireHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FireHistories to fetch.
     */
    orderBy?: FireHistoryOrderByWithRelationInput | FireHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FireHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FireHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FireHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FireHistories
    **/
    _count?: true | FireHistoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FireHistoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FireHistorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FireHistoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FireHistoryMaxAggregateInputType
  }

  export type GetFireHistoryAggregateType<T extends FireHistoryAggregateArgs> = {
        [P in keyof T & keyof AggregateFireHistory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFireHistory[P]>
      : GetScalarType<T[P], AggregateFireHistory[P]>
  }




  export type FireHistoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FireHistoryWhereInput
    orderBy?: FireHistoryOrderByWithAggregationInput | FireHistoryOrderByWithAggregationInput[]
    by: FireHistoryScalarFieldEnum[] | FireHistoryScalarFieldEnum
    having?: FireHistoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FireHistoryCountAggregateInputType | true
    _avg?: FireHistoryAvgAggregateInputType
    _sum?: FireHistorySumAggregateInputType
    _min?: FireHistoryMinAggregateInputType
    _max?: FireHistoryMaxAggregateInputType
  }

  export type FireHistoryGroupByOutputType = {
    id: number
    fireIncidentId: number
    action: string
    details: string
    timestamp: Date
    _count: FireHistoryCountAggregateOutputType | null
    _avg: FireHistoryAvgAggregateOutputType | null
    _sum: FireHistorySumAggregateOutputType | null
    _min: FireHistoryMinAggregateOutputType | null
    _max: FireHistoryMaxAggregateOutputType | null
  }

  type GetFireHistoryGroupByPayload<T extends FireHistoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FireHistoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FireHistoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FireHistoryGroupByOutputType[P]>
            : GetScalarType<T[P], FireHistoryGroupByOutputType[P]>
        }
      >
    >


  export type FireHistorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fireIncidentId?: boolean
    action?: boolean
    details?: boolean
    timestamp?: boolean
    fireIncident?: boolean | FireIncidentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["fireHistory"]>

  export type FireHistorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fireIncidentId?: boolean
    action?: boolean
    details?: boolean
    timestamp?: boolean
    fireIncident?: boolean | FireIncidentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["fireHistory"]>

  export type FireHistorySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fireIncidentId?: boolean
    action?: boolean
    details?: boolean
    timestamp?: boolean
    fireIncident?: boolean | FireIncidentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["fireHistory"]>

  export type FireHistorySelectScalar = {
    id?: boolean
    fireIncidentId?: boolean
    action?: boolean
    details?: boolean
    timestamp?: boolean
  }

  export type FireHistoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "fireIncidentId" | "action" | "details" | "timestamp", ExtArgs["result"]["fireHistory"]>
  export type FireHistoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    fireIncident?: boolean | FireIncidentDefaultArgs<ExtArgs>
  }
  export type FireHistoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    fireIncident?: boolean | FireIncidentDefaultArgs<ExtArgs>
  }
  export type FireHistoryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    fireIncident?: boolean | FireIncidentDefaultArgs<ExtArgs>
  }

  export type $FireHistoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FireHistory"
    objects: {
      fireIncident: Prisma.$FireIncidentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      fireIncidentId: number
      action: string
      details: string
      timestamp: Date
    }, ExtArgs["result"]["fireHistory"]>
    composites: {}
  }

  type FireHistoryGetPayload<S extends boolean | null | undefined | FireHistoryDefaultArgs> = $Result.GetResult<Prisma.$FireHistoryPayload, S>

  type FireHistoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FireHistoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FireHistoryCountAggregateInputType | true
    }

  export interface FireHistoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FireHistory'], meta: { name: 'FireHistory' } }
    /**
     * Find zero or one FireHistory that matches the filter.
     * @param {FireHistoryFindUniqueArgs} args - Arguments to find a FireHistory
     * @example
     * // Get one FireHistory
     * const fireHistory = await prisma.fireHistory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FireHistoryFindUniqueArgs>(args: SelectSubset<T, FireHistoryFindUniqueArgs<ExtArgs>>): Prisma__FireHistoryClient<$Result.GetResult<Prisma.$FireHistoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one FireHistory that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FireHistoryFindUniqueOrThrowArgs} args - Arguments to find a FireHistory
     * @example
     * // Get one FireHistory
     * const fireHistory = await prisma.fireHistory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FireHistoryFindUniqueOrThrowArgs>(args: SelectSubset<T, FireHistoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FireHistoryClient<$Result.GetResult<Prisma.$FireHistoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FireHistory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FireHistoryFindFirstArgs} args - Arguments to find a FireHistory
     * @example
     * // Get one FireHistory
     * const fireHistory = await prisma.fireHistory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FireHistoryFindFirstArgs>(args?: SelectSubset<T, FireHistoryFindFirstArgs<ExtArgs>>): Prisma__FireHistoryClient<$Result.GetResult<Prisma.$FireHistoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FireHistory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FireHistoryFindFirstOrThrowArgs} args - Arguments to find a FireHistory
     * @example
     * // Get one FireHistory
     * const fireHistory = await prisma.fireHistory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FireHistoryFindFirstOrThrowArgs>(args?: SelectSubset<T, FireHistoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__FireHistoryClient<$Result.GetResult<Prisma.$FireHistoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more FireHistories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FireHistoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FireHistories
     * const fireHistories = await prisma.fireHistory.findMany()
     * 
     * // Get first 10 FireHistories
     * const fireHistories = await prisma.fireHistory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const fireHistoryWithIdOnly = await prisma.fireHistory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FireHistoryFindManyArgs>(args?: SelectSubset<T, FireHistoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FireHistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a FireHistory.
     * @param {FireHistoryCreateArgs} args - Arguments to create a FireHistory.
     * @example
     * // Create one FireHistory
     * const FireHistory = await prisma.fireHistory.create({
     *   data: {
     *     // ... data to create a FireHistory
     *   }
     * })
     * 
     */
    create<T extends FireHistoryCreateArgs>(args: SelectSubset<T, FireHistoryCreateArgs<ExtArgs>>): Prisma__FireHistoryClient<$Result.GetResult<Prisma.$FireHistoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many FireHistories.
     * @param {FireHistoryCreateManyArgs} args - Arguments to create many FireHistories.
     * @example
     * // Create many FireHistories
     * const fireHistory = await prisma.fireHistory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FireHistoryCreateManyArgs>(args?: SelectSubset<T, FireHistoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FireHistories and returns the data saved in the database.
     * @param {FireHistoryCreateManyAndReturnArgs} args - Arguments to create many FireHistories.
     * @example
     * // Create many FireHistories
     * const fireHistory = await prisma.fireHistory.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FireHistories and only return the `id`
     * const fireHistoryWithIdOnly = await prisma.fireHistory.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FireHistoryCreateManyAndReturnArgs>(args?: SelectSubset<T, FireHistoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FireHistoryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a FireHistory.
     * @param {FireHistoryDeleteArgs} args - Arguments to delete one FireHistory.
     * @example
     * // Delete one FireHistory
     * const FireHistory = await prisma.fireHistory.delete({
     *   where: {
     *     // ... filter to delete one FireHistory
     *   }
     * })
     * 
     */
    delete<T extends FireHistoryDeleteArgs>(args: SelectSubset<T, FireHistoryDeleteArgs<ExtArgs>>): Prisma__FireHistoryClient<$Result.GetResult<Prisma.$FireHistoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one FireHistory.
     * @param {FireHistoryUpdateArgs} args - Arguments to update one FireHistory.
     * @example
     * // Update one FireHistory
     * const fireHistory = await prisma.fireHistory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FireHistoryUpdateArgs>(args: SelectSubset<T, FireHistoryUpdateArgs<ExtArgs>>): Prisma__FireHistoryClient<$Result.GetResult<Prisma.$FireHistoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more FireHistories.
     * @param {FireHistoryDeleteManyArgs} args - Arguments to filter FireHistories to delete.
     * @example
     * // Delete a few FireHistories
     * const { count } = await prisma.fireHistory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FireHistoryDeleteManyArgs>(args?: SelectSubset<T, FireHistoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FireHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FireHistoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FireHistories
     * const fireHistory = await prisma.fireHistory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FireHistoryUpdateManyArgs>(args: SelectSubset<T, FireHistoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FireHistories and returns the data updated in the database.
     * @param {FireHistoryUpdateManyAndReturnArgs} args - Arguments to update many FireHistories.
     * @example
     * // Update many FireHistories
     * const fireHistory = await prisma.fireHistory.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more FireHistories and only return the `id`
     * const fireHistoryWithIdOnly = await prisma.fireHistory.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FireHistoryUpdateManyAndReturnArgs>(args: SelectSubset<T, FireHistoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FireHistoryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one FireHistory.
     * @param {FireHistoryUpsertArgs} args - Arguments to update or create a FireHistory.
     * @example
     * // Update or create a FireHistory
     * const fireHistory = await prisma.fireHistory.upsert({
     *   create: {
     *     // ... data to create a FireHistory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FireHistory we want to update
     *   }
     * })
     */
    upsert<T extends FireHistoryUpsertArgs>(args: SelectSubset<T, FireHistoryUpsertArgs<ExtArgs>>): Prisma__FireHistoryClient<$Result.GetResult<Prisma.$FireHistoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of FireHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FireHistoryCountArgs} args - Arguments to filter FireHistories to count.
     * @example
     * // Count the number of FireHistories
     * const count = await prisma.fireHistory.count({
     *   where: {
     *     // ... the filter for the FireHistories we want to count
     *   }
     * })
    **/
    count<T extends FireHistoryCountArgs>(
      args?: Subset<T, FireHistoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FireHistoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FireHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FireHistoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FireHistoryAggregateArgs>(args: Subset<T, FireHistoryAggregateArgs>): Prisma.PrismaPromise<GetFireHistoryAggregateType<T>>

    /**
     * Group by FireHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FireHistoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FireHistoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FireHistoryGroupByArgs['orderBy'] }
        : { orderBy?: FireHistoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FireHistoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFireHistoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FireHistory model
   */
  readonly fields: FireHistoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FireHistory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FireHistoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    fireIncident<T extends FireIncidentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FireIncidentDefaultArgs<ExtArgs>>): Prisma__FireIncidentClient<$Result.GetResult<Prisma.$FireIncidentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FireHistory model
   */
  interface FireHistoryFieldRefs {
    readonly id: FieldRef<"FireHistory", 'Int'>
    readonly fireIncidentId: FieldRef<"FireHistory", 'Int'>
    readonly action: FieldRef<"FireHistory", 'String'>
    readonly details: FieldRef<"FireHistory", 'String'>
    readonly timestamp: FieldRef<"FireHistory", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * FireHistory findUnique
   */
  export type FireHistoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FireHistory
     */
    select?: FireHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the FireHistory
     */
    omit?: FireHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FireHistoryInclude<ExtArgs> | null
    /**
     * Filter, which FireHistory to fetch.
     */
    where: FireHistoryWhereUniqueInput
  }

  /**
   * FireHistory findUniqueOrThrow
   */
  export type FireHistoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FireHistory
     */
    select?: FireHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the FireHistory
     */
    omit?: FireHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FireHistoryInclude<ExtArgs> | null
    /**
     * Filter, which FireHistory to fetch.
     */
    where: FireHistoryWhereUniqueInput
  }

  /**
   * FireHistory findFirst
   */
  export type FireHistoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FireHistory
     */
    select?: FireHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the FireHistory
     */
    omit?: FireHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FireHistoryInclude<ExtArgs> | null
    /**
     * Filter, which FireHistory to fetch.
     */
    where?: FireHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FireHistories to fetch.
     */
    orderBy?: FireHistoryOrderByWithRelationInput | FireHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FireHistories.
     */
    cursor?: FireHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FireHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FireHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FireHistories.
     */
    distinct?: FireHistoryScalarFieldEnum | FireHistoryScalarFieldEnum[]
  }

  /**
   * FireHistory findFirstOrThrow
   */
  export type FireHistoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FireHistory
     */
    select?: FireHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the FireHistory
     */
    omit?: FireHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FireHistoryInclude<ExtArgs> | null
    /**
     * Filter, which FireHistory to fetch.
     */
    where?: FireHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FireHistories to fetch.
     */
    orderBy?: FireHistoryOrderByWithRelationInput | FireHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FireHistories.
     */
    cursor?: FireHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FireHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FireHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FireHistories.
     */
    distinct?: FireHistoryScalarFieldEnum | FireHistoryScalarFieldEnum[]
  }

  /**
   * FireHistory findMany
   */
  export type FireHistoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FireHistory
     */
    select?: FireHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the FireHistory
     */
    omit?: FireHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FireHistoryInclude<ExtArgs> | null
    /**
     * Filter, which FireHistories to fetch.
     */
    where?: FireHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FireHistories to fetch.
     */
    orderBy?: FireHistoryOrderByWithRelationInput | FireHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FireHistories.
     */
    cursor?: FireHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FireHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FireHistories.
     */
    skip?: number
    distinct?: FireHistoryScalarFieldEnum | FireHistoryScalarFieldEnum[]
  }

  /**
   * FireHistory create
   */
  export type FireHistoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FireHistory
     */
    select?: FireHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the FireHistory
     */
    omit?: FireHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FireHistoryInclude<ExtArgs> | null
    /**
     * The data needed to create a FireHistory.
     */
    data: XOR<FireHistoryCreateInput, FireHistoryUncheckedCreateInput>
  }

  /**
   * FireHistory createMany
   */
  export type FireHistoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FireHistories.
     */
    data: FireHistoryCreateManyInput | FireHistoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FireHistory createManyAndReturn
   */
  export type FireHistoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FireHistory
     */
    select?: FireHistorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FireHistory
     */
    omit?: FireHistoryOmit<ExtArgs> | null
    /**
     * The data used to create many FireHistories.
     */
    data: FireHistoryCreateManyInput | FireHistoryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FireHistoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * FireHistory update
   */
  export type FireHistoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FireHistory
     */
    select?: FireHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the FireHistory
     */
    omit?: FireHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FireHistoryInclude<ExtArgs> | null
    /**
     * The data needed to update a FireHistory.
     */
    data: XOR<FireHistoryUpdateInput, FireHistoryUncheckedUpdateInput>
    /**
     * Choose, which FireHistory to update.
     */
    where: FireHistoryWhereUniqueInput
  }

  /**
   * FireHistory updateMany
   */
  export type FireHistoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FireHistories.
     */
    data: XOR<FireHistoryUpdateManyMutationInput, FireHistoryUncheckedUpdateManyInput>
    /**
     * Filter which FireHistories to update
     */
    where?: FireHistoryWhereInput
    /**
     * Limit how many FireHistories to update.
     */
    limit?: number
  }

  /**
   * FireHistory updateManyAndReturn
   */
  export type FireHistoryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FireHistory
     */
    select?: FireHistorySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FireHistory
     */
    omit?: FireHistoryOmit<ExtArgs> | null
    /**
     * The data used to update FireHistories.
     */
    data: XOR<FireHistoryUpdateManyMutationInput, FireHistoryUncheckedUpdateManyInput>
    /**
     * Filter which FireHistories to update
     */
    where?: FireHistoryWhereInput
    /**
     * Limit how many FireHistories to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FireHistoryIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * FireHistory upsert
   */
  export type FireHistoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FireHistory
     */
    select?: FireHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the FireHistory
     */
    omit?: FireHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FireHistoryInclude<ExtArgs> | null
    /**
     * The filter to search for the FireHistory to update in case it exists.
     */
    where: FireHistoryWhereUniqueInput
    /**
     * In case the FireHistory found by the `where` argument doesn't exist, create a new FireHistory with this data.
     */
    create: XOR<FireHistoryCreateInput, FireHistoryUncheckedCreateInput>
    /**
     * In case the FireHistory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FireHistoryUpdateInput, FireHistoryUncheckedUpdateInput>
  }

  /**
   * FireHistory delete
   */
  export type FireHistoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FireHistory
     */
    select?: FireHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the FireHistory
     */
    omit?: FireHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FireHistoryInclude<ExtArgs> | null
    /**
     * Filter which FireHistory to delete.
     */
    where: FireHistoryWhereUniqueInput
  }

  /**
   * FireHistory deleteMany
   */
  export type FireHistoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FireHistories to delete
     */
    where?: FireHistoryWhereInput
    /**
     * Limit how many FireHistories to delete.
     */
    limit?: number
  }

  /**
   * FireHistory without action
   */
  export type FireHistoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FireHistory
     */
    select?: FireHistorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the FireHistory
     */
    omit?: FireHistoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FireHistoryInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const SystemSettingsScalarFieldEnum: {
    id: 'id',
    defaultCityName: 'defaultCityName',
    defaultLatitude: 'defaultLatitude',
    defaultLongitude: 'defaultLongitude',
    defaultZoom: 'defaultZoom',
    updatedAt: 'updatedAt',
    updatedById: 'updatedById'
  };

  export type SystemSettingsScalarFieldEnum = (typeof SystemSettingsScalarFieldEnum)[keyof typeof SystemSettingsScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    username: 'username',
    password: 'password',
    role: 'role',
    name: 'name',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    fireStationId: 'fireStationId'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const FireStationScalarFieldEnum: {
    id: 'id',
    name: 'name',
    address: 'address',
    latitude: 'latitude',
    longitude: 'longitude',
    phoneNumber: 'phoneNumber',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type FireStationScalarFieldEnum = (typeof FireStationScalarFieldEnum)[keyof typeof FireStationScalarFieldEnum]


  export const VehicleScalarFieldEnum: {
    id: 'id',
    model: 'model',
    type: 'type',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    fireStationId: 'fireStationId'
  };

  export type VehicleScalarFieldEnum = (typeof VehicleScalarFieldEnum)[keyof typeof VehicleScalarFieldEnum]


  export const FireLevelScalarFieldEnum: {
    id: 'id',
    level: 'level',
    name: 'name',
    description: 'description',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type FireLevelScalarFieldEnum = (typeof FireLevelScalarFieldEnum)[keyof typeof FireLevelScalarFieldEnum]


  export const FireLevelRequirementScalarFieldEnum: {
    id: 'id',
    count: 'count',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    fireLevelId: 'fireLevelId',
    vehicleType: 'vehicleType'
  };

  export type FireLevelRequirementScalarFieldEnum = (typeof FireLevelRequirementScalarFieldEnum)[keyof typeof FireLevelRequirementScalarFieldEnum]


  export const FireIncidentScalarFieldEnum: {
    id: 'id',
    latitude: 'latitude',
    longitude: 'longitude',
    status: 'status',
    description: 'description',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    resolvedAt: 'resolvedAt',
    address: 'address',
    reportedById: 'reportedById',
    assignedToId: 'assignedToId',
    fireStationId: 'fireStationId',
    fireLevelId: 'fireLevelId'
  };

  export type FireIncidentScalarFieldEnum = (typeof FireIncidentScalarFieldEnum)[keyof typeof FireIncidentScalarFieldEnum]


  export const FireAddressLevelScalarFieldEnum: {
    id: 'id',
    address: 'address',
    description: 'description',
    latitude: 'latitude',
    longitude: 'longitude',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    fireLevelId: 'fireLevelId'
  };

  export type FireAddressLevelScalarFieldEnum = (typeof FireAddressLevelScalarFieldEnum)[keyof typeof FireAddressLevelScalarFieldEnum]


  export const ReportScalarFieldEnum: {
    id: 'id',
    content: 'content',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    userId: 'userId',
    fireIncidentId: 'fireIncidentId'
  };

  export type ReportScalarFieldEnum = (typeof ReportScalarFieldEnum)[keyof typeof ReportScalarFieldEnum]


  export const UserActivityScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    action: 'action',
    details: 'details',
    timestamp: 'timestamp',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent'
  };

  export type UserActivityScalarFieldEnum = (typeof UserActivityScalarFieldEnum)[keyof typeof UserActivityScalarFieldEnum]


  export const FireHistoryScalarFieldEnum: {
    id: 'id',
    fireIncidentId: 'fireIncidentId',
    action: 'action',
    details: 'details',
    timestamp: 'timestamp'
  };

  export type FireHistoryScalarFieldEnum = (typeof FireHistoryScalarFieldEnum)[keyof typeof FireHistoryScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'UserRole'
   */
  export type EnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole'>
    


  /**
   * Reference to a field of type 'UserRole[]'
   */
  export type ListEnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole[]'>
    


  /**
   * Reference to a field of type 'VehicleType'
   */
  export type EnumVehicleTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'VehicleType'>
    


  /**
   * Reference to a field of type 'VehicleType[]'
   */
  export type ListEnumVehicleTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'VehicleType[]'>
    


  /**
   * Reference to a field of type 'VehicleStatus'
   */
  export type EnumVehicleStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'VehicleStatus'>
    


  /**
   * Reference to a field of type 'VehicleStatus[]'
   */
  export type ListEnumVehicleStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'VehicleStatus[]'>
    


  /**
   * Reference to a field of type 'IncidentStatus'
   */
  export type EnumIncidentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'IncidentStatus'>
    


  /**
   * Reference to a field of type 'IncidentStatus[]'
   */
  export type ListEnumIncidentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'IncidentStatus[]'>
    
  /**
   * Deep Input Types
   */


  export type SystemSettingsWhereInput = {
    AND?: SystemSettingsWhereInput | SystemSettingsWhereInput[]
    OR?: SystemSettingsWhereInput[]
    NOT?: SystemSettingsWhereInput | SystemSettingsWhereInput[]
    id?: IntFilter<"SystemSettings"> | number
    defaultCityName?: StringFilter<"SystemSettings"> | string
    defaultLatitude?: FloatFilter<"SystemSettings"> | number
    defaultLongitude?: FloatFilter<"SystemSettings"> | number
    defaultZoom?: IntFilter<"SystemSettings"> | number
    updatedAt?: DateTimeFilter<"SystemSettings"> | Date | string
    updatedById?: IntNullableFilter<"SystemSettings"> | number | null
    updatedBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type SystemSettingsOrderByWithRelationInput = {
    id?: SortOrder
    defaultCityName?: SortOrder
    defaultLatitude?: SortOrder
    defaultLongitude?: SortOrder
    defaultZoom?: SortOrder
    updatedAt?: SortOrder
    updatedById?: SortOrderInput | SortOrder
    updatedBy?: UserOrderByWithRelationInput
  }

  export type SystemSettingsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SystemSettingsWhereInput | SystemSettingsWhereInput[]
    OR?: SystemSettingsWhereInput[]
    NOT?: SystemSettingsWhereInput | SystemSettingsWhereInput[]
    defaultCityName?: StringFilter<"SystemSettings"> | string
    defaultLatitude?: FloatFilter<"SystemSettings"> | number
    defaultLongitude?: FloatFilter<"SystemSettings"> | number
    defaultZoom?: IntFilter<"SystemSettings"> | number
    updatedAt?: DateTimeFilter<"SystemSettings"> | Date | string
    updatedById?: IntNullableFilter<"SystemSettings"> | number | null
    updatedBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id">

  export type SystemSettingsOrderByWithAggregationInput = {
    id?: SortOrder
    defaultCityName?: SortOrder
    defaultLatitude?: SortOrder
    defaultLongitude?: SortOrder
    defaultZoom?: SortOrder
    updatedAt?: SortOrder
    updatedById?: SortOrderInput | SortOrder
    _count?: SystemSettingsCountOrderByAggregateInput
    _avg?: SystemSettingsAvgOrderByAggregateInput
    _max?: SystemSettingsMaxOrderByAggregateInput
    _min?: SystemSettingsMinOrderByAggregateInput
    _sum?: SystemSettingsSumOrderByAggregateInput
  }

  export type SystemSettingsScalarWhereWithAggregatesInput = {
    AND?: SystemSettingsScalarWhereWithAggregatesInput | SystemSettingsScalarWhereWithAggregatesInput[]
    OR?: SystemSettingsScalarWhereWithAggregatesInput[]
    NOT?: SystemSettingsScalarWhereWithAggregatesInput | SystemSettingsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"SystemSettings"> | number
    defaultCityName?: StringWithAggregatesFilter<"SystemSettings"> | string
    defaultLatitude?: FloatWithAggregatesFilter<"SystemSettings"> | number
    defaultLongitude?: FloatWithAggregatesFilter<"SystemSettings"> | number
    defaultZoom?: IntWithAggregatesFilter<"SystemSettings"> | number
    updatedAt?: DateTimeWithAggregatesFilter<"SystemSettings"> | Date | string
    updatedById?: IntNullableWithAggregatesFilter<"SystemSettings"> | number | null
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    username?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    name?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    fireStationId?: IntNullableFilter<"User"> | number | null
    fireStation?: XOR<FireStationNullableScalarRelationFilter, FireStationWhereInput> | null
    reportedFires?: FireIncidentListRelationFilter
    assignedFires?: FireIncidentListRelationFilter
    reports?: ReportListRelationFilter
    activities?: UserActivityListRelationFilter
    systemUpdates?: SystemSettingsListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    role?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    fireStationId?: SortOrderInput | SortOrder
    fireStation?: FireStationOrderByWithRelationInput
    reportedFires?: FireIncidentOrderByRelationAggregateInput
    assignedFires?: FireIncidentOrderByRelationAggregateInput
    reports?: ReportOrderByRelationAggregateInput
    activities?: UserActivityOrderByRelationAggregateInput
    systemUpdates?: SystemSettingsOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    username?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    name?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    fireStationId?: IntNullableFilter<"User"> | number | null
    fireStation?: XOR<FireStationNullableScalarRelationFilter, FireStationWhereInput> | null
    reportedFires?: FireIncidentListRelationFilter
    assignedFires?: FireIncidentListRelationFilter
    reports?: ReportListRelationFilter
    activities?: UserActivityListRelationFilter
    systemUpdates?: SystemSettingsListRelationFilter
  }, "id" | "username">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    role?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    fireStationId?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    username?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    role?: EnumUserRoleWithAggregatesFilter<"User"> | $Enums.UserRole
    name?: StringWithAggregatesFilter<"User"> | string
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    fireStationId?: IntNullableWithAggregatesFilter<"User"> | number | null
  }

  export type FireStationWhereInput = {
    AND?: FireStationWhereInput | FireStationWhereInput[]
    OR?: FireStationWhereInput[]
    NOT?: FireStationWhereInput | FireStationWhereInput[]
    id?: IntFilter<"FireStation"> | number
    name?: StringFilter<"FireStation"> | string
    address?: StringFilter<"FireStation"> | string
    latitude?: FloatFilter<"FireStation"> | number
    longitude?: FloatFilter<"FireStation"> | number
    phoneNumber?: StringNullableFilter<"FireStation"> | string | null
    createdAt?: DateTimeFilter<"FireStation"> | Date | string
    updatedAt?: DateTimeFilter<"FireStation"> | Date | string
    users?: UserListRelationFilter
    vehicles?: VehicleListRelationFilter
    incidents?: FireIncidentListRelationFilter
  }

  export type FireStationOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    phoneNumber?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    users?: UserOrderByRelationAggregateInput
    vehicles?: VehicleOrderByRelationAggregateInput
    incidents?: FireIncidentOrderByRelationAggregateInput
  }

  export type FireStationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: FireStationWhereInput | FireStationWhereInput[]
    OR?: FireStationWhereInput[]
    NOT?: FireStationWhereInput | FireStationWhereInput[]
    name?: StringFilter<"FireStation"> | string
    address?: StringFilter<"FireStation"> | string
    latitude?: FloatFilter<"FireStation"> | number
    longitude?: FloatFilter<"FireStation"> | number
    phoneNumber?: StringNullableFilter<"FireStation"> | string | null
    createdAt?: DateTimeFilter<"FireStation"> | Date | string
    updatedAt?: DateTimeFilter<"FireStation"> | Date | string
    users?: UserListRelationFilter
    vehicles?: VehicleListRelationFilter
    incidents?: FireIncidentListRelationFilter
  }, "id">

  export type FireStationOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    phoneNumber?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: FireStationCountOrderByAggregateInput
    _avg?: FireStationAvgOrderByAggregateInput
    _max?: FireStationMaxOrderByAggregateInput
    _min?: FireStationMinOrderByAggregateInput
    _sum?: FireStationSumOrderByAggregateInput
  }

  export type FireStationScalarWhereWithAggregatesInput = {
    AND?: FireStationScalarWhereWithAggregatesInput | FireStationScalarWhereWithAggregatesInput[]
    OR?: FireStationScalarWhereWithAggregatesInput[]
    NOT?: FireStationScalarWhereWithAggregatesInput | FireStationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"FireStation"> | number
    name?: StringWithAggregatesFilter<"FireStation"> | string
    address?: StringWithAggregatesFilter<"FireStation"> | string
    latitude?: FloatWithAggregatesFilter<"FireStation"> | number
    longitude?: FloatWithAggregatesFilter<"FireStation"> | number
    phoneNumber?: StringNullableWithAggregatesFilter<"FireStation"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"FireStation"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"FireStation"> | Date | string
  }

  export type VehicleWhereInput = {
    AND?: VehicleWhereInput | VehicleWhereInput[]
    OR?: VehicleWhereInput[]
    NOT?: VehicleWhereInput | VehicleWhereInput[]
    id?: IntFilter<"Vehicle"> | number
    model?: StringFilter<"Vehicle"> | string
    type?: EnumVehicleTypeFilter<"Vehicle"> | $Enums.VehicleType
    status?: EnumVehicleStatusFilter<"Vehicle"> | $Enums.VehicleStatus
    createdAt?: DateTimeFilter<"Vehicle"> | Date | string
    updatedAt?: DateTimeFilter<"Vehicle"> | Date | string
    fireStationId?: IntFilter<"Vehicle"> | number
    fireStation?: XOR<FireStationScalarRelationFilter, FireStationWhereInput>
    incidents?: FireIncidentListRelationFilter
  }

  export type VehicleOrderByWithRelationInput = {
    id?: SortOrder
    model?: SortOrder
    type?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    fireStationId?: SortOrder
    fireStation?: FireStationOrderByWithRelationInput
    incidents?: FireIncidentOrderByRelationAggregateInput
  }

  export type VehicleWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: VehicleWhereInput | VehicleWhereInput[]
    OR?: VehicleWhereInput[]
    NOT?: VehicleWhereInput | VehicleWhereInput[]
    model?: StringFilter<"Vehicle"> | string
    type?: EnumVehicleTypeFilter<"Vehicle"> | $Enums.VehicleType
    status?: EnumVehicleStatusFilter<"Vehicle"> | $Enums.VehicleStatus
    createdAt?: DateTimeFilter<"Vehicle"> | Date | string
    updatedAt?: DateTimeFilter<"Vehicle"> | Date | string
    fireStationId?: IntFilter<"Vehicle"> | number
    fireStation?: XOR<FireStationScalarRelationFilter, FireStationWhereInput>
    incidents?: FireIncidentListRelationFilter
  }, "id">

  export type VehicleOrderByWithAggregationInput = {
    id?: SortOrder
    model?: SortOrder
    type?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    fireStationId?: SortOrder
    _count?: VehicleCountOrderByAggregateInput
    _avg?: VehicleAvgOrderByAggregateInput
    _max?: VehicleMaxOrderByAggregateInput
    _min?: VehicleMinOrderByAggregateInput
    _sum?: VehicleSumOrderByAggregateInput
  }

  export type VehicleScalarWhereWithAggregatesInput = {
    AND?: VehicleScalarWhereWithAggregatesInput | VehicleScalarWhereWithAggregatesInput[]
    OR?: VehicleScalarWhereWithAggregatesInput[]
    NOT?: VehicleScalarWhereWithAggregatesInput | VehicleScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Vehicle"> | number
    model?: StringWithAggregatesFilter<"Vehicle"> | string
    type?: EnumVehicleTypeWithAggregatesFilter<"Vehicle"> | $Enums.VehicleType
    status?: EnumVehicleStatusWithAggregatesFilter<"Vehicle"> | $Enums.VehicleStatus
    createdAt?: DateTimeWithAggregatesFilter<"Vehicle"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Vehicle"> | Date | string
    fireStationId?: IntWithAggregatesFilter<"Vehicle"> | number
  }

  export type FireLevelWhereInput = {
    AND?: FireLevelWhereInput | FireLevelWhereInput[]
    OR?: FireLevelWhereInput[]
    NOT?: FireLevelWhereInput | FireLevelWhereInput[]
    id?: IntFilter<"FireLevel"> | number
    level?: IntFilter<"FireLevel"> | number
    name?: StringFilter<"FireLevel"> | string
    description?: StringFilter<"FireLevel"> | string
    createdAt?: DateTimeFilter<"FireLevel"> | Date | string
    updatedAt?: DateTimeFilter<"FireLevel"> | Date | string
    incidents?: FireIncidentListRelationFilter
    requirements?: FireLevelRequirementListRelationFilter
    addressLevels?: FireAddressLevelListRelationFilter
  }

  export type FireLevelOrderByWithRelationInput = {
    id?: SortOrder
    level?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    incidents?: FireIncidentOrderByRelationAggregateInput
    requirements?: FireLevelRequirementOrderByRelationAggregateInput
    addressLevels?: FireAddressLevelOrderByRelationAggregateInput
  }

  export type FireLevelWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    level?: number
    AND?: FireLevelWhereInput | FireLevelWhereInput[]
    OR?: FireLevelWhereInput[]
    NOT?: FireLevelWhereInput | FireLevelWhereInput[]
    name?: StringFilter<"FireLevel"> | string
    description?: StringFilter<"FireLevel"> | string
    createdAt?: DateTimeFilter<"FireLevel"> | Date | string
    updatedAt?: DateTimeFilter<"FireLevel"> | Date | string
    incidents?: FireIncidentListRelationFilter
    requirements?: FireLevelRequirementListRelationFilter
    addressLevels?: FireAddressLevelListRelationFilter
  }, "id" | "level">

  export type FireLevelOrderByWithAggregationInput = {
    id?: SortOrder
    level?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: FireLevelCountOrderByAggregateInput
    _avg?: FireLevelAvgOrderByAggregateInput
    _max?: FireLevelMaxOrderByAggregateInput
    _min?: FireLevelMinOrderByAggregateInput
    _sum?: FireLevelSumOrderByAggregateInput
  }

  export type FireLevelScalarWhereWithAggregatesInput = {
    AND?: FireLevelScalarWhereWithAggregatesInput | FireLevelScalarWhereWithAggregatesInput[]
    OR?: FireLevelScalarWhereWithAggregatesInput[]
    NOT?: FireLevelScalarWhereWithAggregatesInput | FireLevelScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"FireLevel"> | number
    level?: IntWithAggregatesFilter<"FireLevel"> | number
    name?: StringWithAggregatesFilter<"FireLevel"> | string
    description?: StringWithAggregatesFilter<"FireLevel"> | string
    createdAt?: DateTimeWithAggregatesFilter<"FireLevel"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"FireLevel"> | Date | string
  }

  export type FireLevelRequirementWhereInput = {
    AND?: FireLevelRequirementWhereInput | FireLevelRequirementWhereInput[]
    OR?: FireLevelRequirementWhereInput[]
    NOT?: FireLevelRequirementWhereInput | FireLevelRequirementWhereInput[]
    id?: IntFilter<"FireLevelRequirement"> | number
    count?: IntFilter<"FireLevelRequirement"> | number
    createdAt?: DateTimeFilter<"FireLevelRequirement"> | Date | string
    updatedAt?: DateTimeFilter<"FireLevelRequirement"> | Date | string
    fireLevelId?: IntFilter<"FireLevelRequirement"> | number
    vehicleType?: EnumVehicleTypeFilter<"FireLevelRequirement"> | $Enums.VehicleType
    fireLevel?: XOR<FireLevelScalarRelationFilter, FireLevelWhereInput>
  }

  export type FireLevelRequirementOrderByWithRelationInput = {
    id?: SortOrder
    count?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    fireLevelId?: SortOrder
    vehicleType?: SortOrder
    fireLevel?: FireLevelOrderByWithRelationInput
  }

  export type FireLevelRequirementWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    fireLevelId_vehicleType?: FireLevelRequirementFireLevelIdVehicleTypeCompoundUniqueInput
    AND?: FireLevelRequirementWhereInput | FireLevelRequirementWhereInput[]
    OR?: FireLevelRequirementWhereInput[]
    NOT?: FireLevelRequirementWhereInput | FireLevelRequirementWhereInput[]
    count?: IntFilter<"FireLevelRequirement"> | number
    createdAt?: DateTimeFilter<"FireLevelRequirement"> | Date | string
    updatedAt?: DateTimeFilter<"FireLevelRequirement"> | Date | string
    fireLevelId?: IntFilter<"FireLevelRequirement"> | number
    vehicleType?: EnumVehicleTypeFilter<"FireLevelRequirement"> | $Enums.VehicleType
    fireLevel?: XOR<FireLevelScalarRelationFilter, FireLevelWhereInput>
  }, "id" | "fireLevelId_vehicleType">

  export type FireLevelRequirementOrderByWithAggregationInput = {
    id?: SortOrder
    count?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    fireLevelId?: SortOrder
    vehicleType?: SortOrder
    _count?: FireLevelRequirementCountOrderByAggregateInput
    _avg?: FireLevelRequirementAvgOrderByAggregateInput
    _max?: FireLevelRequirementMaxOrderByAggregateInput
    _min?: FireLevelRequirementMinOrderByAggregateInput
    _sum?: FireLevelRequirementSumOrderByAggregateInput
  }

  export type FireLevelRequirementScalarWhereWithAggregatesInput = {
    AND?: FireLevelRequirementScalarWhereWithAggregatesInput | FireLevelRequirementScalarWhereWithAggregatesInput[]
    OR?: FireLevelRequirementScalarWhereWithAggregatesInput[]
    NOT?: FireLevelRequirementScalarWhereWithAggregatesInput | FireLevelRequirementScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"FireLevelRequirement"> | number
    count?: IntWithAggregatesFilter<"FireLevelRequirement"> | number
    createdAt?: DateTimeWithAggregatesFilter<"FireLevelRequirement"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"FireLevelRequirement"> | Date | string
    fireLevelId?: IntWithAggregatesFilter<"FireLevelRequirement"> | number
    vehicleType?: EnumVehicleTypeWithAggregatesFilter<"FireLevelRequirement"> | $Enums.VehicleType
  }

  export type FireIncidentWhereInput = {
    AND?: FireIncidentWhereInput | FireIncidentWhereInput[]
    OR?: FireIncidentWhereInput[]
    NOT?: FireIncidentWhereInput | FireIncidentWhereInput[]
    id?: IntFilter<"FireIncident"> | number
    latitude?: FloatFilter<"FireIncident"> | number
    longitude?: FloatFilter<"FireIncident"> | number
    status?: EnumIncidentStatusFilter<"FireIncident"> | $Enums.IncidentStatus
    description?: StringNullableFilter<"FireIncident"> | string | null
    createdAt?: DateTimeFilter<"FireIncident"> | Date | string
    updatedAt?: DateTimeFilter<"FireIncident"> | Date | string
    resolvedAt?: DateTimeNullableFilter<"FireIncident"> | Date | string | null
    address?: StringNullableFilter<"FireIncident"> | string | null
    reportedById?: IntFilter<"FireIncident"> | number
    assignedToId?: IntFilter<"FireIncident"> | number
    fireStationId?: IntFilter<"FireIncident"> | number
    fireLevelId?: IntFilter<"FireIncident"> | number
    reportedBy?: XOR<UserScalarRelationFilter, UserWhereInput>
    assignedTo?: XOR<UserScalarRelationFilter, UserWhereInput>
    fireStation?: XOR<FireStationScalarRelationFilter, FireStationWhereInput>
    fireLevel?: XOR<FireLevelScalarRelationFilter, FireLevelWhereInput>
    vehicles?: VehicleListRelationFilter
    reports?: ReportListRelationFilter
    history?: FireHistoryListRelationFilter
  }

  export type FireIncidentOrderByWithRelationInput = {
    id?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    status?: SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    resolvedAt?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    reportedById?: SortOrder
    assignedToId?: SortOrder
    fireStationId?: SortOrder
    fireLevelId?: SortOrder
    reportedBy?: UserOrderByWithRelationInput
    assignedTo?: UserOrderByWithRelationInput
    fireStation?: FireStationOrderByWithRelationInput
    fireLevel?: FireLevelOrderByWithRelationInput
    vehicles?: VehicleOrderByRelationAggregateInput
    reports?: ReportOrderByRelationAggregateInput
    history?: FireHistoryOrderByRelationAggregateInput
  }

  export type FireIncidentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: FireIncidentWhereInput | FireIncidentWhereInput[]
    OR?: FireIncidentWhereInput[]
    NOT?: FireIncidentWhereInput | FireIncidentWhereInput[]
    latitude?: FloatFilter<"FireIncident"> | number
    longitude?: FloatFilter<"FireIncident"> | number
    status?: EnumIncidentStatusFilter<"FireIncident"> | $Enums.IncidentStatus
    description?: StringNullableFilter<"FireIncident"> | string | null
    createdAt?: DateTimeFilter<"FireIncident"> | Date | string
    updatedAt?: DateTimeFilter<"FireIncident"> | Date | string
    resolvedAt?: DateTimeNullableFilter<"FireIncident"> | Date | string | null
    address?: StringNullableFilter<"FireIncident"> | string | null
    reportedById?: IntFilter<"FireIncident"> | number
    assignedToId?: IntFilter<"FireIncident"> | number
    fireStationId?: IntFilter<"FireIncident"> | number
    fireLevelId?: IntFilter<"FireIncident"> | number
    reportedBy?: XOR<UserScalarRelationFilter, UserWhereInput>
    assignedTo?: XOR<UserScalarRelationFilter, UserWhereInput>
    fireStation?: XOR<FireStationScalarRelationFilter, FireStationWhereInput>
    fireLevel?: XOR<FireLevelScalarRelationFilter, FireLevelWhereInput>
    vehicles?: VehicleListRelationFilter
    reports?: ReportListRelationFilter
    history?: FireHistoryListRelationFilter
  }, "id">

  export type FireIncidentOrderByWithAggregationInput = {
    id?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    status?: SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    resolvedAt?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    reportedById?: SortOrder
    assignedToId?: SortOrder
    fireStationId?: SortOrder
    fireLevelId?: SortOrder
    _count?: FireIncidentCountOrderByAggregateInput
    _avg?: FireIncidentAvgOrderByAggregateInput
    _max?: FireIncidentMaxOrderByAggregateInput
    _min?: FireIncidentMinOrderByAggregateInput
    _sum?: FireIncidentSumOrderByAggregateInput
  }

  export type FireIncidentScalarWhereWithAggregatesInput = {
    AND?: FireIncidentScalarWhereWithAggregatesInput | FireIncidentScalarWhereWithAggregatesInput[]
    OR?: FireIncidentScalarWhereWithAggregatesInput[]
    NOT?: FireIncidentScalarWhereWithAggregatesInput | FireIncidentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"FireIncident"> | number
    latitude?: FloatWithAggregatesFilter<"FireIncident"> | number
    longitude?: FloatWithAggregatesFilter<"FireIncident"> | number
    status?: EnumIncidentStatusWithAggregatesFilter<"FireIncident"> | $Enums.IncidentStatus
    description?: StringNullableWithAggregatesFilter<"FireIncident"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"FireIncident"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"FireIncident"> | Date | string
    resolvedAt?: DateTimeNullableWithAggregatesFilter<"FireIncident"> | Date | string | null
    address?: StringNullableWithAggregatesFilter<"FireIncident"> | string | null
    reportedById?: IntWithAggregatesFilter<"FireIncident"> | number
    assignedToId?: IntWithAggregatesFilter<"FireIncident"> | number
    fireStationId?: IntWithAggregatesFilter<"FireIncident"> | number
    fireLevelId?: IntWithAggregatesFilter<"FireIncident"> | number
  }

  export type FireAddressLevelWhereInput = {
    AND?: FireAddressLevelWhereInput | FireAddressLevelWhereInput[]
    OR?: FireAddressLevelWhereInput[]
    NOT?: FireAddressLevelWhereInput | FireAddressLevelWhereInput[]
    id?: IntFilter<"FireAddressLevel"> | number
    address?: StringFilter<"FireAddressLevel"> | string
    description?: StringNullableFilter<"FireAddressLevel"> | string | null
    latitude?: FloatNullableFilter<"FireAddressLevel"> | number | null
    longitude?: FloatNullableFilter<"FireAddressLevel"> | number | null
    createdAt?: DateTimeFilter<"FireAddressLevel"> | Date | string
    updatedAt?: DateTimeFilter<"FireAddressLevel"> | Date | string
    fireLevelId?: IntFilter<"FireAddressLevel"> | number
    fireLevel?: XOR<FireLevelScalarRelationFilter, FireLevelWhereInput>
  }

  export type FireAddressLevelOrderByWithRelationInput = {
    id?: SortOrder
    address?: SortOrder
    description?: SortOrderInput | SortOrder
    latitude?: SortOrderInput | SortOrder
    longitude?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    fireLevelId?: SortOrder
    fireLevel?: FireLevelOrderByWithRelationInput
  }

  export type FireAddressLevelWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    address?: string
    AND?: FireAddressLevelWhereInput | FireAddressLevelWhereInput[]
    OR?: FireAddressLevelWhereInput[]
    NOT?: FireAddressLevelWhereInput | FireAddressLevelWhereInput[]
    description?: StringNullableFilter<"FireAddressLevel"> | string | null
    latitude?: FloatNullableFilter<"FireAddressLevel"> | number | null
    longitude?: FloatNullableFilter<"FireAddressLevel"> | number | null
    createdAt?: DateTimeFilter<"FireAddressLevel"> | Date | string
    updatedAt?: DateTimeFilter<"FireAddressLevel"> | Date | string
    fireLevelId?: IntFilter<"FireAddressLevel"> | number
    fireLevel?: XOR<FireLevelScalarRelationFilter, FireLevelWhereInput>
  }, "id" | "address">

  export type FireAddressLevelOrderByWithAggregationInput = {
    id?: SortOrder
    address?: SortOrder
    description?: SortOrderInput | SortOrder
    latitude?: SortOrderInput | SortOrder
    longitude?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    fireLevelId?: SortOrder
    _count?: FireAddressLevelCountOrderByAggregateInput
    _avg?: FireAddressLevelAvgOrderByAggregateInput
    _max?: FireAddressLevelMaxOrderByAggregateInput
    _min?: FireAddressLevelMinOrderByAggregateInput
    _sum?: FireAddressLevelSumOrderByAggregateInput
  }

  export type FireAddressLevelScalarWhereWithAggregatesInput = {
    AND?: FireAddressLevelScalarWhereWithAggregatesInput | FireAddressLevelScalarWhereWithAggregatesInput[]
    OR?: FireAddressLevelScalarWhereWithAggregatesInput[]
    NOT?: FireAddressLevelScalarWhereWithAggregatesInput | FireAddressLevelScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"FireAddressLevel"> | number
    address?: StringWithAggregatesFilter<"FireAddressLevel"> | string
    description?: StringNullableWithAggregatesFilter<"FireAddressLevel"> | string | null
    latitude?: FloatNullableWithAggregatesFilter<"FireAddressLevel"> | number | null
    longitude?: FloatNullableWithAggregatesFilter<"FireAddressLevel"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"FireAddressLevel"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"FireAddressLevel"> | Date | string
    fireLevelId?: IntWithAggregatesFilter<"FireAddressLevel"> | number
  }

  export type ReportWhereInput = {
    AND?: ReportWhereInput | ReportWhereInput[]
    OR?: ReportWhereInput[]
    NOT?: ReportWhereInput | ReportWhereInput[]
    id?: IntFilter<"Report"> | number
    content?: StringFilter<"Report"> | string
    createdAt?: DateTimeFilter<"Report"> | Date | string
    updatedAt?: DateTimeFilter<"Report"> | Date | string
    userId?: IntFilter<"Report"> | number
    fireIncidentId?: IntFilter<"Report"> | number
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    fireIncident?: XOR<FireIncidentScalarRelationFilter, FireIncidentWhereInput>
  }

  export type ReportOrderByWithRelationInput = {
    id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    fireIncidentId?: SortOrder
    user?: UserOrderByWithRelationInput
    fireIncident?: FireIncidentOrderByWithRelationInput
  }

  export type ReportWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ReportWhereInput | ReportWhereInput[]
    OR?: ReportWhereInput[]
    NOT?: ReportWhereInput | ReportWhereInput[]
    content?: StringFilter<"Report"> | string
    createdAt?: DateTimeFilter<"Report"> | Date | string
    updatedAt?: DateTimeFilter<"Report"> | Date | string
    userId?: IntFilter<"Report"> | number
    fireIncidentId?: IntFilter<"Report"> | number
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    fireIncident?: XOR<FireIncidentScalarRelationFilter, FireIncidentWhereInput>
  }, "id">

  export type ReportOrderByWithAggregationInput = {
    id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    fireIncidentId?: SortOrder
    _count?: ReportCountOrderByAggregateInput
    _avg?: ReportAvgOrderByAggregateInput
    _max?: ReportMaxOrderByAggregateInput
    _min?: ReportMinOrderByAggregateInput
    _sum?: ReportSumOrderByAggregateInput
  }

  export type ReportScalarWhereWithAggregatesInput = {
    AND?: ReportScalarWhereWithAggregatesInput | ReportScalarWhereWithAggregatesInput[]
    OR?: ReportScalarWhereWithAggregatesInput[]
    NOT?: ReportScalarWhereWithAggregatesInput | ReportScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Report"> | number
    content?: StringWithAggregatesFilter<"Report"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Report"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Report"> | Date | string
    userId?: IntWithAggregatesFilter<"Report"> | number
    fireIncidentId?: IntWithAggregatesFilter<"Report"> | number
  }

  export type UserActivityWhereInput = {
    AND?: UserActivityWhereInput | UserActivityWhereInput[]
    OR?: UserActivityWhereInput[]
    NOT?: UserActivityWhereInput | UserActivityWhereInput[]
    id?: IntFilter<"UserActivity"> | number
    userId?: IntFilter<"UserActivity"> | number
    action?: StringFilter<"UserActivity"> | string
    details?: StringNullableFilter<"UserActivity"> | string | null
    timestamp?: DateTimeFilter<"UserActivity"> | Date | string
    ipAddress?: StringNullableFilter<"UserActivity"> | string | null
    userAgent?: StringNullableFilter<"UserActivity"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type UserActivityOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    details?: SortOrderInput | SortOrder
    timestamp?: SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type UserActivityWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: UserActivityWhereInput | UserActivityWhereInput[]
    OR?: UserActivityWhereInput[]
    NOT?: UserActivityWhereInput | UserActivityWhereInput[]
    userId?: IntFilter<"UserActivity"> | number
    action?: StringFilter<"UserActivity"> | string
    details?: StringNullableFilter<"UserActivity"> | string | null
    timestamp?: DateTimeFilter<"UserActivity"> | Date | string
    ipAddress?: StringNullableFilter<"UserActivity"> | string | null
    userAgent?: StringNullableFilter<"UserActivity"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type UserActivityOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    details?: SortOrderInput | SortOrder
    timestamp?: SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    _count?: UserActivityCountOrderByAggregateInput
    _avg?: UserActivityAvgOrderByAggregateInput
    _max?: UserActivityMaxOrderByAggregateInput
    _min?: UserActivityMinOrderByAggregateInput
    _sum?: UserActivitySumOrderByAggregateInput
  }

  export type UserActivityScalarWhereWithAggregatesInput = {
    AND?: UserActivityScalarWhereWithAggregatesInput | UserActivityScalarWhereWithAggregatesInput[]
    OR?: UserActivityScalarWhereWithAggregatesInput[]
    NOT?: UserActivityScalarWhereWithAggregatesInput | UserActivityScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"UserActivity"> | number
    userId?: IntWithAggregatesFilter<"UserActivity"> | number
    action?: StringWithAggregatesFilter<"UserActivity"> | string
    details?: StringNullableWithAggregatesFilter<"UserActivity"> | string | null
    timestamp?: DateTimeWithAggregatesFilter<"UserActivity"> | Date | string
    ipAddress?: StringNullableWithAggregatesFilter<"UserActivity"> | string | null
    userAgent?: StringNullableWithAggregatesFilter<"UserActivity"> | string | null
  }

  export type FireHistoryWhereInput = {
    AND?: FireHistoryWhereInput | FireHistoryWhereInput[]
    OR?: FireHistoryWhereInput[]
    NOT?: FireHistoryWhereInput | FireHistoryWhereInput[]
    id?: IntFilter<"FireHistory"> | number
    fireIncidentId?: IntFilter<"FireHistory"> | number
    action?: StringFilter<"FireHistory"> | string
    details?: StringFilter<"FireHistory"> | string
    timestamp?: DateTimeFilter<"FireHistory"> | Date | string
    fireIncident?: XOR<FireIncidentScalarRelationFilter, FireIncidentWhereInput>
  }

  export type FireHistoryOrderByWithRelationInput = {
    id?: SortOrder
    fireIncidentId?: SortOrder
    action?: SortOrder
    details?: SortOrder
    timestamp?: SortOrder
    fireIncident?: FireIncidentOrderByWithRelationInput
  }

  export type FireHistoryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: FireHistoryWhereInput | FireHistoryWhereInput[]
    OR?: FireHistoryWhereInput[]
    NOT?: FireHistoryWhereInput | FireHistoryWhereInput[]
    fireIncidentId?: IntFilter<"FireHistory"> | number
    action?: StringFilter<"FireHistory"> | string
    details?: StringFilter<"FireHistory"> | string
    timestamp?: DateTimeFilter<"FireHistory"> | Date | string
    fireIncident?: XOR<FireIncidentScalarRelationFilter, FireIncidentWhereInput>
  }, "id">

  export type FireHistoryOrderByWithAggregationInput = {
    id?: SortOrder
    fireIncidentId?: SortOrder
    action?: SortOrder
    details?: SortOrder
    timestamp?: SortOrder
    _count?: FireHistoryCountOrderByAggregateInput
    _avg?: FireHistoryAvgOrderByAggregateInput
    _max?: FireHistoryMaxOrderByAggregateInput
    _min?: FireHistoryMinOrderByAggregateInput
    _sum?: FireHistorySumOrderByAggregateInput
  }

  export type FireHistoryScalarWhereWithAggregatesInput = {
    AND?: FireHistoryScalarWhereWithAggregatesInput | FireHistoryScalarWhereWithAggregatesInput[]
    OR?: FireHistoryScalarWhereWithAggregatesInput[]
    NOT?: FireHistoryScalarWhereWithAggregatesInput | FireHistoryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"FireHistory"> | number
    fireIncidentId?: IntWithAggregatesFilter<"FireHistory"> | number
    action?: StringWithAggregatesFilter<"FireHistory"> | string
    details?: StringWithAggregatesFilter<"FireHistory"> | string
    timestamp?: DateTimeWithAggregatesFilter<"FireHistory"> | Date | string
  }

  export type SystemSettingsCreateInput = {
    defaultCityName?: string
    defaultLatitude?: number
    defaultLongitude?: number
    defaultZoom?: number
    updatedAt?: Date | string
    updatedBy?: UserCreateNestedOneWithoutSystemUpdatesInput
  }

  export type SystemSettingsUncheckedCreateInput = {
    id?: number
    defaultCityName?: string
    defaultLatitude?: number
    defaultLongitude?: number
    defaultZoom?: number
    updatedAt?: Date | string
    updatedById?: number | null
  }

  export type SystemSettingsUpdateInput = {
    defaultCityName?: StringFieldUpdateOperationsInput | string
    defaultLatitude?: FloatFieldUpdateOperationsInput | number
    defaultLongitude?: FloatFieldUpdateOperationsInput | number
    defaultZoom?: IntFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: UserUpdateOneWithoutSystemUpdatesNestedInput
  }

  export type SystemSettingsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    defaultCityName?: StringFieldUpdateOperationsInput | string
    defaultLatitude?: FloatFieldUpdateOperationsInput | number
    defaultLongitude?: FloatFieldUpdateOperationsInput | number
    defaultZoom?: IntFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type SystemSettingsCreateManyInput = {
    id?: number
    defaultCityName?: string
    defaultLatitude?: number
    defaultLongitude?: number
    defaultZoom?: number
    updatedAt?: Date | string
    updatedById?: number | null
  }

  export type SystemSettingsUpdateManyMutationInput = {
    defaultCityName?: StringFieldUpdateOperationsInput | string
    defaultLatitude?: FloatFieldUpdateOperationsInput | number
    defaultLongitude?: FloatFieldUpdateOperationsInput | number
    defaultZoom?: IntFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SystemSettingsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    defaultCityName?: StringFieldUpdateOperationsInput | string
    defaultLatitude?: FloatFieldUpdateOperationsInput | number
    defaultLongitude?: FloatFieldUpdateOperationsInput | number
    defaultZoom?: IntFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type UserCreateInput = {
    username: string
    password: string
    role: $Enums.UserRole
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    fireStation?: FireStationCreateNestedOneWithoutUsersInput
    reportedFires?: FireIncidentCreateNestedManyWithoutReportedByInput
    assignedFires?: FireIncidentCreateNestedManyWithoutAssignedToInput
    reports?: ReportCreateNestedManyWithoutUserInput
    activities?: UserActivityCreateNestedManyWithoutUserInput
    systemUpdates?: SystemSettingsCreateNestedManyWithoutUpdatedByInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    username: string
    password: string
    role: $Enums.UserRole
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    fireStationId?: number | null
    reportedFires?: FireIncidentUncheckedCreateNestedManyWithoutReportedByInput
    assignedFires?: FireIncidentUncheckedCreateNestedManyWithoutAssignedToInput
    reports?: ReportUncheckedCreateNestedManyWithoutUserInput
    activities?: UserActivityUncheckedCreateNestedManyWithoutUserInput
    systemUpdates?: SystemSettingsUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type UserUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fireStation?: FireStationUpdateOneWithoutUsersNestedInput
    reportedFires?: FireIncidentUpdateManyWithoutReportedByNestedInput
    assignedFires?: FireIncidentUpdateManyWithoutAssignedToNestedInput
    reports?: ReportUpdateManyWithoutUserNestedInput
    activities?: UserActivityUpdateManyWithoutUserNestedInput
    systemUpdates?: SystemSettingsUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fireStationId?: NullableIntFieldUpdateOperationsInput | number | null
    reportedFires?: FireIncidentUncheckedUpdateManyWithoutReportedByNestedInput
    assignedFires?: FireIncidentUncheckedUpdateManyWithoutAssignedToNestedInput
    reports?: ReportUncheckedUpdateManyWithoutUserNestedInput
    activities?: UserActivityUncheckedUpdateManyWithoutUserNestedInput
    systemUpdates?: SystemSettingsUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    username: string
    password: string
    role: $Enums.UserRole
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    fireStationId?: number | null
  }

  export type UserUpdateManyMutationInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fireStationId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type FireStationCreateInput = {
    name: string
    address: string
    latitude: number
    longitude: number
    phoneNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutFireStationInput
    vehicles?: VehicleCreateNestedManyWithoutFireStationInput
    incidents?: FireIncidentCreateNestedManyWithoutFireStationInput
  }

  export type FireStationUncheckedCreateInput = {
    id?: number
    name: string
    address: string
    latitude: number
    longitude: number
    phoneNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutFireStationInput
    vehicles?: VehicleUncheckedCreateNestedManyWithoutFireStationInput
    incidents?: FireIncidentUncheckedCreateNestedManyWithoutFireStationInput
  }

  export type FireStationUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutFireStationNestedInput
    vehicles?: VehicleUpdateManyWithoutFireStationNestedInput
    incidents?: FireIncidentUpdateManyWithoutFireStationNestedInput
  }

  export type FireStationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutFireStationNestedInput
    vehicles?: VehicleUncheckedUpdateManyWithoutFireStationNestedInput
    incidents?: FireIncidentUncheckedUpdateManyWithoutFireStationNestedInput
  }

  export type FireStationCreateManyInput = {
    id?: number
    name: string
    address: string
    latitude: number
    longitude: number
    phoneNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FireStationUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FireStationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VehicleCreateInput = {
    model: string
    type: $Enums.VehicleType
    status?: $Enums.VehicleStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    fireStation: FireStationCreateNestedOneWithoutVehiclesInput
    incidents?: FireIncidentCreateNestedManyWithoutVehiclesInput
  }

  export type VehicleUncheckedCreateInput = {
    id?: number
    model: string
    type: $Enums.VehicleType
    status?: $Enums.VehicleStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    fireStationId: number
    incidents?: FireIncidentUncheckedCreateNestedManyWithoutVehiclesInput
  }

  export type VehicleUpdateInput = {
    model?: StringFieldUpdateOperationsInput | string
    type?: EnumVehicleTypeFieldUpdateOperationsInput | $Enums.VehicleType
    status?: EnumVehicleStatusFieldUpdateOperationsInput | $Enums.VehicleStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fireStation?: FireStationUpdateOneRequiredWithoutVehiclesNestedInput
    incidents?: FireIncidentUpdateManyWithoutVehiclesNestedInput
  }

  export type VehicleUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    model?: StringFieldUpdateOperationsInput | string
    type?: EnumVehicleTypeFieldUpdateOperationsInput | $Enums.VehicleType
    status?: EnumVehicleStatusFieldUpdateOperationsInput | $Enums.VehicleStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fireStationId?: IntFieldUpdateOperationsInput | number
    incidents?: FireIncidentUncheckedUpdateManyWithoutVehiclesNestedInput
  }

  export type VehicleCreateManyInput = {
    id?: number
    model: string
    type: $Enums.VehicleType
    status?: $Enums.VehicleStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    fireStationId: number
  }

  export type VehicleUpdateManyMutationInput = {
    model?: StringFieldUpdateOperationsInput | string
    type?: EnumVehicleTypeFieldUpdateOperationsInput | $Enums.VehicleType
    status?: EnumVehicleStatusFieldUpdateOperationsInput | $Enums.VehicleStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VehicleUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    model?: StringFieldUpdateOperationsInput | string
    type?: EnumVehicleTypeFieldUpdateOperationsInput | $Enums.VehicleType
    status?: EnumVehicleStatusFieldUpdateOperationsInput | $Enums.VehicleStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fireStationId?: IntFieldUpdateOperationsInput | number
  }

  export type FireLevelCreateInput = {
    level: number
    name: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    incidents?: FireIncidentCreateNestedManyWithoutFireLevelInput
    requirements?: FireLevelRequirementCreateNestedManyWithoutFireLevelInput
    addressLevels?: FireAddressLevelCreateNestedManyWithoutFireLevelInput
  }

  export type FireLevelUncheckedCreateInput = {
    id?: number
    level: number
    name: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    incidents?: FireIncidentUncheckedCreateNestedManyWithoutFireLevelInput
    requirements?: FireLevelRequirementUncheckedCreateNestedManyWithoutFireLevelInput
    addressLevels?: FireAddressLevelUncheckedCreateNestedManyWithoutFireLevelInput
  }

  export type FireLevelUpdateInput = {
    level?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    incidents?: FireIncidentUpdateManyWithoutFireLevelNestedInput
    requirements?: FireLevelRequirementUpdateManyWithoutFireLevelNestedInput
    addressLevels?: FireAddressLevelUpdateManyWithoutFireLevelNestedInput
  }

  export type FireLevelUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    incidents?: FireIncidentUncheckedUpdateManyWithoutFireLevelNestedInput
    requirements?: FireLevelRequirementUncheckedUpdateManyWithoutFireLevelNestedInput
    addressLevels?: FireAddressLevelUncheckedUpdateManyWithoutFireLevelNestedInput
  }

  export type FireLevelCreateManyInput = {
    id?: number
    level: number
    name: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FireLevelUpdateManyMutationInput = {
    level?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FireLevelUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FireLevelRequirementCreateInput = {
    count: number
    createdAt?: Date | string
    updatedAt?: Date | string
    vehicleType: $Enums.VehicleType
    fireLevel: FireLevelCreateNestedOneWithoutRequirementsInput
  }

  export type FireLevelRequirementUncheckedCreateInput = {
    id?: number
    count: number
    createdAt?: Date | string
    updatedAt?: Date | string
    fireLevelId: number
    vehicleType: $Enums.VehicleType
  }

  export type FireLevelRequirementUpdateInput = {
    count?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    vehicleType?: EnumVehicleTypeFieldUpdateOperationsInput | $Enums.VehicleType
    fireLevel?: FireLevelUpdateOneRequiredWithoutRequirementsNestedInput
  }

  export type FireLevelRequirementUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fireLevelId?: IntFieldUpdateOperationsInput | number
    vehicleType?: EnumVehicleTypeFieldUpdateOperationsInput | $Enums.VehicleType
  }

  export type FireLevelRequirementCreateManyInput = {
    id?: number
    count: number
    createdAt?: Date | string
    updatedAt?: Date | string
    fireLevelId: number
    vehicleType: $Enums.VehicleType
  }

  export type FireLevelRequirementUpdateManyMutationInput = {
    count?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    vehicleType?: EnumVehicleTypeFieldUpdateOperationsInput | $Enums.VehicleType
  }

  export type FireLevelRequirementUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fireLevelId?: IntFieldUpdateOperationsInput | number
    vehicleType?: EnumVehicleTypeFieldUpdateOperationsInput | $Enums.VehicleType
  }

  export type FireIncidentCreateInput = {
    latitude: number
    longitude: number
    status?: $Enums.IncidentStatus
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    resolvedAt?: Date | string | null
    address?: string | null
    reportedBy: UserCreateNestedOneWithoutReportedFiresInput
    assignedTo: UserCreateNestedOneWithoutAssignedFiresInput
    fireStation: FireStationCreateNestedOneWithoutIncidentsInput
    fireLevel: FireLevelCreateNestedOneWithoutIncidentsInput
    vehicles?: VehicleCreateNestedManyWithoutIncidentsInput
    reports?: ReportCreateNestedManyWithoutFireIncidentInput
    history?: FireHistoryCreateNestedManyWithoutFireIncidentInput
  }

  export type FireIncidentUncheckedCreateInput = {
    id?: number
    latitude: number
    longitude: number
    status?: $Enums.IncidentStatus
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    resolvedAt?: Date | string | null
    address?: string | null
    reportedById: number
    assignedToId: number
    fireStationId: number
    fireLevelId: number
    vehicles?: VehicleUncheckedCreateNestedManyWithoutIncidentsInput
    reports?: ReportUncheckedCreateNestedManyWithoutFireIncidentInput
    history?: FireHistoryUncheckedCreateNestedManyWithoutFireIncidentInput
  }

  export type FireIncidentUpdateInput = {
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    status?: EnumIncidentStatusFieldUpdateOperationsInput | $Enums.IncidentStatus
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    reportedBy?: UserUpdateOneRequiredWithoutReportedFiresNestedInput
    assignedTo?: UserUpdateOneRequiredWithoutAssignedFiresNestedInput
    fireStation?: FireStationUpdateOneRequiredWithoutIncidentsNestedInput
    fireLevel?: FireLevelUpdateOneRequiredWithoutIncidentsNestedInput
    vehicles?: VehicleUpdateManyWithoutIncidentsNestedInput
    reports?: ReportUpdateManyWithoutFireIncidentNestedInput
    history?: FireHistoryUpdateManyWithoutFireIncidentNestedInput
  }

  export type FireIncidentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    status?: EnumIncidentStatusFieldUpdateOperationsInput | $Enums.IncidentStatus
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    reportedById?: IntFieldUpdateOperationsInput | number
    assignedToId?: IntFieldUpdateOperationsInput | number
    fireStationId?: IntFieldUpdateOperationsInput | number
    fireLevelId?: IntFieldUpdateOperationsInput | number
    vehicles?: VehicleUncheckedUpdateManyWithoutIncidentsNestedInput
    reports?: ReportUncheckedUpdateManyWithoutFireIncidentNestedInput
    history?: FireHistoryUncheckedUpdateManyWithoutFireIncidentNestedInput
  }

  export type FireIncidentCreateManyInput = {
    id?: number
    latitude: number
    longitude: number
    status?: $Enums.IncidentStatus
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    resolvedAt?: Date | string | null
    address?: string | null
    reportedById: number
    assignedToId: number
    fireStationId: number
    fireLevelId: number
  }

  export type FireIncidentUpdateManyMutationInput = {
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    status?: EnumIncidentStatusFieldUpdateOperationsInput | $Enums.IncidentStatus
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FireIncidentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    status?: EnumIncidentStatusFieldUpdateOperationsInput | $Enums.IncidentStatus
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    reportedById?: IntFieldUpdateOperationsInput | number
    assignedToId?: IntFieldUpdateOperationsInput | number
    fireStationId?: IntFieldUpdateOperationsInput | number
    fireLevelId?: IntFieldUpdateOperationsInput | number
  }

  export type FireAddressLevelCreateInput = {
    address: string
    description?: string | null
    latitude?: number | null
    longitude?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    fireLevel: FireLevelCreateNestedOneWithoutAddressLevelsInput
  }

  export type FireAddressLevelUncheckedCreateInput = {
    id?: number
    address: string
    description?: string | null
    latitude?: number | null
    longitude?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    fireLevelId: number
  }

  export type FireAddressLevelUpdateInput = {
    address?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fireLevel?: FireLevelUpdateOneRequiredWithoutAddressLevelsNestedInput
  }

  export type FireAddressLevelUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fireLevelId?: IntFieldUpdateOperationsInput | number
  }

  export type FireAddressLevelCreateManyInput = {
    id?: number
    address: string
    description?: string | null
    latitude?: number | null
    longitude?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    fireLevelId: number
  }

  export type FireAddressLevelUpdateManyMutationInput = {
    address?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FireAddressLevelUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fireLevelId?: IntFieldUpdateOperationsInput | number
  }

  export type ReportCreateInput = {
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutReportsInput
    fireIncident: FireIncidentCreateNestedOneWithoutReportsInput
  }

  export type ReportUncheckedCreateInput = {
    id?: number
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: number
    fireIncidentId: number
  }

  export type ReportUpdateInput = {
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutReportsNestedInput
    fireIncident?: FireIncidentUpdateOneRequiredWithoutReportsNestedInput
  }

  export type ReportUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    fireIncidentId?: IntFieldUpdateOperationsInput | number
  }

  export type ReportCreateManyInput = {
    id?: number
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: number
    fireIncidentId: number
  }

  export type ReportUpdateManyMutationInput = {
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    fireIncidentId?: IntFieldUpdateOperationsInput | number
  }

  export type UserActivityCreateInput = {
    action: string
    details?: string | null
    timestamp?: Date | string
    ipAddress?: string | null
    userAgent?: string | null
    user: UserCreateNestedOneWithoutActivitiesInput
  }

  export type UserActivityUncheckedCreateInput = {
    id?: number
    userId: number
    action: string
    details?: string | null
    timestamp?: Date | string
    ipAddress?: string | null
    userAgent?: string | null
  }

  export type UserActivityUpdateInput = {
    action?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutActivitiesNestedInput
  }

  export type UserActivityUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    action?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserActivityCreateManyInput = {
    id?: number
    userId: number
    action: string
    details?: string | null
    timestamp?: Date | string
    ipAddress?: string | null
    userAgent?: string | null
  }

  export type UserActivityUpdateManyMutationInput = {
    action?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserActivityUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    action?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FireHistoryCreateInput = {
    action: string
    details: string
    timestamp?: Date | string
    fireIncident: FireIncidentCreateNestedOneWithoutHistoryInput
  }

  export type FireHistoryUncheckedCreateInput = {
    id?: number
    fireIncidentId: number
    action: string
    details: string
    timestamp?: Date | string
  }

  export type FireHistoryUpdateInput = {
    action?: StringFieldUpdateOperationsInput | string
    details?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    fireIncident?: FireIncidentUpdateOneRequiredWithoutHistoryNestedInput
  }

  export type FireHistoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    fireIncidentId?: IntFieldUpdateOperationsInput | number
    action?: StringFieldUpdateOperationsInput | string
    details?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FireHistoryCreateManyInput = {
    id?: number
    fireIncidentId: number
    action: string
    details: string
    timestamp?: Date | string
  }

  export type FireHistoryUpdateManyMutationInput = {
    action?: StringFieldUpdateOperationsInput | string
    details?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FireHistoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    fireIncidentId?: IntFieldUpdateOperationsInput | number
    action?: StringFieldUpdateOperationsInput | string
    details?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type SystemSettingsCountOrderByAggregateInput = {
    id?: SortOrder
    defaultCityName?: SortOrder
    defaultLatitude?: SortOrder
    defaultLongitude?: SortOrder
    defaultZoom?: SortOrder
    updatedAt?: SortOrder
    updatedById?: SortOrder
  }

  export type SystemSettingsAvgOrderByAggregateInput = {
    id?: SortOrder
    defaultLatitude?: SortOrder
    defaultLongitude?: SortOrder
    defaultZoom?: SortOrder
    updatedById?: SortOrder
  }

  export type SystemSettingsMaxOrderByAggregateInput = {
    id?: SortOrder
    defaultCityName?: SortOrder
    defaultLatitude?: SortOrder
    defaultLongitude?: SortOrder
    defaultZoom?: SortOrder
    updatedAt?: SortOrder
    updatedById?: SortOrder
  }

  export type SystemSettingsMinOrderByAggregateInput = {
    id?: SortOrder
    defaultCityName?: SortOrder
    defaultLatitude?: SortOrder
    defaultLongitude?: SortOrder
    defaultZoom?: SortOrder
    updatedAt?: SortOrder
    updatedById?: SortOrder
  }

  export type SystemSettingsSumOrderByAggregateInput = {
    id?: SortOrder
    defaultLatitude?: SortOrder
    defaultLongitude?: SortOrder
    defaultZoom?: SortOrder
    updatedById?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type EnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type FireStationNullableScalarRelationFilter = {
    is?: FireStationWhereInput | null
    isNot?: FireStationWhereInput | null
  }

  export type FireIncidentListRelationFilter = {
    every?: FireIncidentWhereInput
    some?: FireIncidentWhereInput
    none?: FireIncidentWhereInput
  }

  export type ReportListRelationFilter = {
    every?: ReportWhereInput
    some?: ReportWhereInput
    none?: ReportWhereInput
  }

  export type UserActivityListRelationFilter = {
    every?: UserActivityWhereInput
    some?: UserActivityWhereInput
    none?: UserActivityWhereInput
  }

  export type SystemSettingsListRelationFilter = {
    every?: SystemSettingsWhereInput
    some?: SystemSettingsWhereInput
    none?: SystemSettingsWhereInput
  }

  export type FireIncidentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReportOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserActivityOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SystemSettingsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    role?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    fireStationId?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
    fireStationId?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    role?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    fireStationId?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    role?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    fireStationId?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
    fireStationId?: SortOrder
  }

  export type EnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type VehicleListRelationFilter = {
    every?: VehicleWhereInput
    some?: VehicleWhereInput
    none?: VehicleWhereInput
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type VehicleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FireStationCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    phoneNumber?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FireStationAvgOrderByAggregateInput = {
    id?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
  }

  export type FireStationMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    phoneNumber?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FireStationMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    phoneNumber?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FireStationSumOrderByAggregateInput = {
    id?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumVehicleTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.VehicleType | EnumVehicleTypeFieldRefInput<$PrismaModel>
    in?: $Enums.VehicleType[] | ListEnumVehicleTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.VehicleType[] | ListEnumVehicleTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumVehicleTypeFilter<$PrismaModel> | $Enums.VehicleType
  }

  export type EnumVehicleStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.VehicleStatus | EnumVehicleStatusFieldRefInput<$PrismaModel>
    in?: $Enums.VehicleStatus[] | ListEnumVehicleStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.VehicleStatus[] | ListEnumVehicleStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumVehicleStatusFilter<$PrismaModel> | $Enums.VehicleStatus
  }

  export type FireStationScalarRelationFilter = {
    is?: FireStationWhereInput
    isNot?: FireStationWhereInput
  }

  export type VehicleCountOrderByAggregateInput = {
    id?: SortOrder
    model?: SortOrder
    type?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    fireStationId?: SortOrder
  }

  export type VehicleAvgOrderByAggregateInput = {
    id?: SortOrder
    fireStationId?: SortOrder
  }

  export type VehicleMaxOrderByAggregateInput = {
    id?: SortOrder
    model?: SortOrder
    type?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    fireStationId?: SortOrder
  }

  export type VehicleMinOrderByAggregateInput = {
    id?: SortOrder
    model?: SortOrder
    type?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    fireStationId?: SortOrder
  }

  export type VehicleSumOrderByAggregateInput = {
    id?: SortOrder
    fireStationId?: SortOrder
  }

  export type EnumVehicleTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.VehicleType | EnumVehicleTypeFieldRefInput<$PrismaModel>
    in?: $Enums.VehicleType[] | ListEnumVehicleTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.VehicleType[] | ListEnumVehicleTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumVehicleTypeWithAggregatesFilter<$PrismaModel> | $Enums.VehicleType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumVehicleTypeFilter<$PrismaModel>
    _max?: NestedEnumVehicleTypeFilter<$PrismaModel>
  }

  export type EnumVehicleStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.VehicleStatus | EnumVehicleStatusFieldRefInput<$PrismaModel>
    in?: $Enums.VehicleStatus[] | ListEnumVehicleStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.VehicleStatus[] | ListEnumVehicleStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumVehicleStatusWithAggregatesFilter<$PrismaModel> | $Enums.VehicleStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumVehicleStatusFilter<$PrismaModel>
    _max?: NestedEnumVehicleStatusFilter<$PrismaModel>
  }

  export type FireLevelRequirementListRelationFilter = {
    every?: FireLevelRequirementWhereInput
    some?: FireLevelRequirementWhereInput
    none?: FireLevelRequirementWhereInput
  }

  export type FireAddressLevelListRelationFilter = {
    every?: FireAddressLevelWhereInput
    some?: FireAddressLevelWhereInput
    none?: FireAddressLevelWhereInput
  }

  export type FireLevelRequirementOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FireAddressLevelOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FireLevelCountOrderByAggregateInput = {
    id?: SortOrder
    level?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FireLevelAvgOrderByAggregateInput = {
    id?: SortOrder
    level?: SortOrder
  }

  export type FireLevelMaxOrderByAggregateInput = {
    id?: SortOrder
    level?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FireLevelMinOrderByAggregateInput = {
    id?: SortOrder
    level?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FireLevelSumOrderByAggregateInput = {
    id?: SortOrder
    level?: SortOrder
  }

  export type FireLevelScalarRelationFilter = {
    is?: FireLevelWhereInput
    isNot?: FireLevelWhereInput
  }

  export type FireLevelRequirementFireLevelIdVehicleTypeCompoundUniqueInput = {
    fireLevelId: number
    vehicleType: $Enums.VehicleType
  }

  export type FireLevelRequirementCountOrderByAggregateInput = {
    id?: SortOrder
    count?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    fireLevelId?: SortOrder
    vehicleType?: SortOrder
  }

  export type FireLevelRequirementAvgOrderByAggregateInput = {
    id?: SortOrder
    count?: SortOrder
    fireLevelId?: SortOrder
  }

  export type FireLevelRequirementMaxOrderByAggregateInput = {
    id?: SortOrder
    count?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    fireLevelId?: SortOrder
    vehicleType?: SortOrder
  }

  export type FireLevelRequirementMinOrderByAggregateInput = {
    id?: SortOrder
    count?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    fireLevelId?: SortOrder
    vehicleType?: SortOrder
  }

  export type FireLevelRequirementSumOrderByAggregateInput = {
    id?: SortOrder
    count?: SortOrder
    fireLevelId?: SortOrder
  }

  export type EnumIncidentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.IncidentStatus | EnumIncidentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.IncidentStatus[] | ListEnumIncidentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.IncidentStatus[] | ListEnumIncidentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumIncidentStatusFilter<$PrismaModel> | $Enums.IncidentStatus
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type FireHistoryListRelationFilter = {
    every?: FireHistoryWhereInput
    some?: FireHistoryWhereInput
    none?: FireHistoryWhereInput
  }

  export type FireHistoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FireIncidentCountOrderByAggregateInput = {
    id?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    status?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    resolvedAt?: SortOrder
    address?: SortOrder
    reportedById?: SortOrder
    assignedToId?: SortOrder
    fireStationId?: SortOrder
    fireLevelId?: SortOrder
  }

  export type FireIncidentAvgOrderByAggregateInput = {
    id?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    reportedById?: SortOrder
    assignedToId?: SortOrder
    fireStationId?: SortOrder
    fireLevelId?: SortOrder
  }

  export type FireIncidentMaxOrderByAggregateInput = {
    id?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    status?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    resolvedAt?: SortOrder
    address?: SortOrder
    reportedById?: SortOrder
    assignedToId?: SortOrder
    fireStationId?: SortOrder
    fireLevelId?: SortOrder
  }

  export type FireIncidentMinOrderByAggregateInput = {
    id?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    status?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    resolvedAt?: SortOrder
    address?: SortOrder
    reportedById?: SortOrder
    assignedToId?: SortOrder
    fireStationId?: SortOrder
    fireLevelId?: SortOrder
  }

  export type FireIncidentSumOrderByAggregateInput = {
    id?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    reportedById?: SortOrder
    assignedToId?: SortOrder
    fireStationId?: SortOrder
    fireLevelId?: SortOrder
  }

  export type EnumIncidentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.IncidentStatus | EnumIncidentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.IncidentStatus[] | ListEnumIncidentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.IncidentStatus[] | ListEnumIncidentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumIncidentStatusWithAggregatesFilter<$PrismaModel> | $Enums.IncidentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumIncidentStatusFilter<$PrismaModel>
    _max?: NestedEnumIncidentStatusFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type FireAddressLevelCountOrderByAggregateInput = {
    id?: SortOrder
    address?: SortOrder
    description?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    fireLevelId?: SortOrder
  }

  export type FireAddressLevelAvgOrderByAggregateInput = {
    id?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    fireLevelId?: SortOrder
  }

  export type FireAddressLevelMaxOrderByAggregateInput = {
    id?: SortOrder
    address?: SortOrder
    description?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    fireLevelId?: SortOrder
  }

  export type FireAddressLevelMinOrderByAggregateInput = {
    id?: SortOrder
    address?: SortOrder
    description?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    fireLevelId?: SortOrder
  }

  export type FireAddressLevelSumOrderByAggregateInput = {
    id?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    fireLevelId?: SortOrder
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type FireIncidentScalarRelationFilter = {
    is?: FireIncidentWhereInput
    isNot?: FireIncidentWhereInput
  }

  export type ReportCountOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    fireIncidentId?: SortOrder
  }

  export type ReportAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    fireIncidentId?: SortOrder
  }

  export type ReportMaxOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    fireIncidentId?: SortOrder
  }

  export type ReportMinOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    fireIncidentId?: SortOrder
  }

  export type ReportSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    fireIncidentId?: SortOrder
  }

  export type UserActivityCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    details?: SortOrder
    timestamp?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
  }

  export type UserActivityAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type UserActivityMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    details?: SortOrder
    timestamp?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
  }

  export type UserActivityMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    details?: SortOrder
    timestamp?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
  }

  export type UserActivitySumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type FireHistoryCountOrderByAggregateInput = {
    id?: SortOrder
    fireIncidentId?: SortOrder
    action?: SortOrder
    details?: SortOrder
    timestamp?: SortOrder
  }

  export type FireHistoryAvgOrderByAggregateInput = {
    id?: SortOrder
    fireIncidentId?: SortOrder
  }

  export type FireHistoryMaxOrderByAggregateInput = {
    id?: SortOrder
    fireIncidentId?: SortOrder
    action?: SortOrder
    details?: SortOrder
    timestamp?: SortOrder
  }

  export type FireHistoryMinOrderByAggregateInput = {
    id?: SortOrder
    fireIncidentId?: SortOrder
    action?: SortOrder
    details?: SortOrder
    timestamp?: SortOrder
  }

  export type FireHistorySumOrderByAggregateInput = {
    id?: SortOrder
    fireIncidentId?: SortOrder
  }

  export type UserCreateNestedOneWithoutSystemUpdatesInput = {
    create?: XOR<UserCreateWithoutSystemUpdatesInput, UserUncheckedCreateWithoutSystemUpdatesInput>
    connectOrCreate?: UserCreateOrConnectWithoutSystemUpdatesInput
    connect?: UserWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserUpdateOneWithoutSystemUpdatesNestedInput = {
    create?: XOR<UserCreateWithoutSystemUpdatesInput, UserUncheckedCreateWithoutSystemUpdatesInput>
    connectOrCreate?: UserCreateOrConnectWithoutSystemUpdatesInput
    upsert?: UserUpsertWithoutSystemUpdatesInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSystemUpdatesInput, UserUpdateWithoutSystemUpdatesInput>, UserUncheckedUpdateWithoutSystemUpdatesInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type FireStationCreateNestedOneWithoutUsersInput = {
    create?: XOR<FireStationCreateWithoutUsersInput, FireStationUncheckedCreateWithoutUsersInput>
    connectOrCreate?: FireStationCreateOrConnectWithoutUsersInput
    connect?: FireStationWhereUniqueInput
  }

  export type FireIncidentCreateNestedManyWithoutReportedByInput = {
    create?: XOR<FireIncidentCreateWithoutReportedByInput, FireIncidentUncheckedCreateWithoutReportedByInput> | FireIncidentCreateWithoutReportedByInput[] | FireIncidentUncheckedCreateWithoutReportedByInput[]
    connectOrCreate?: FireIncidentCreateOrConnectWithoutReportedByInput | FireIncidentCreateOrConnectWithoutReportedByInput[]
    createMany?: FireIncidentCreateManyReportedByInputEnvelope
    connect?: FireIncidentWhereUniqueInput | FireIncidentWhereUniqueInput[]
  }

  export type FireIncidentCreateNestedManyWithoutAssignedToInput = {
    create?: XOR<FireIncidentCreateWithoutAssignedToInput, FireIncidentUncheckedCreateWithoutAssignedToInput> | FireIncidentCreateWithoutAssignedToInput[] | FireIncidentUncheckedCreateWithoutAssignedToInput[]
    connectOrCreate?: FireIncidentCreateOrConnectWithoutAssignedToInput | FireIncidentCreateOrConnectWithoutAssignedToInput[]
    createMany?: FireIncidentCreateManyAssignedToInputEnvelope
    connect?: FireIncidentWhereUniqueInput | FireIncidentWhereUniqueInput[]
  }

  export type ReportCreateNestedManyWithoutUserInput = {
    create?: XOR<ReportCreateWithoutUserInput, ReportUncheckedCreateWithoutUserInput> | ReportCreateWithoutUserInput[] | ReportUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutUserInput | ReportCreateOrConnectWithoutUserInput[]
    createMany?: ReportCreateManyUserInputEnvelope
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
  }

  export type UserActivityCreateNestedManyWithoutUserInput = {
    create?: XOR<UserActivityCreateWithoutUserInput, UserActivityUncheckedCreateWithoutUserInput> | UserActivityCreateWithoutUserInput[] | UserActivityUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserActivityCreateOrConnectWithoutUserInput | UserActivityCreateOrConnectWithoutUserInput[]
    createMany?: UserActivityCreateManyUserInputEnvelope
    connect?: UserActivityWhereUniqueInput | UserActivityWhereUniqueInput[]
  }

  export type SystemSettingsCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<SystemSettingsCreateWithoutUpdatedByInput, SystemSettingsUncheckedCreateWithoutUpdatedByInput> | SystemSettingsCreateWithoutUpdatedByInput[] | SystemSettingsUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: SystemSettingsCreateOrConnectWithoutUpdatedByInput | SystemSettingsCreateOrConnectWithoutUpdatedByInput[]
    createMany?: SystemSettingsCreateManyUpdatedByInputEnvelope
    connect?: SystemSettingsWhereUniqueInput | SystemSettingsWhereUniqueInput[]
  }

  export type FireIncidentUncheckedCreateNestedManyWithoutReportedByInput = {
    create?: XOR<FireIncidentCreateWithoutReportedByInput, FireIncidentUncheckedCreateWithoutReportedByInput> | FireIncidentCreateWithoutReportedByInput[] | FireIncidentUncheckedCreateWithoutReportedByInput[]
    connectOrCreate?: FireIncidentCreateOrConnectWithoutReportedByInput | FireIncidentCreateOrConnectWithoutReportedByInput[]
    createMany?: FireIncidentCreateManyReportedByInputEnvelope
    connect?: FireIncidentWhereUniqueInput | FireIncidentWhereUniqueInput[]
  }

  export type FireIncidentUncheckedCreateNestedManyWithoutAssignedToInput = {
    create?: XOR<FireIncidentCreateWithoutAssignedToInput, FireIncidentUncheckedCreateWithoutAssignedToInput> | FireIncidentCreateWithoutAssignedToInput[] | FireIncidentUncheckedCreateWithoutAssignedToInput[]
    connectOrCreate?: FireIncidentCreateOrConnectWithoutAssignedToInput | FireIncidentCreateOrConnectWithoutAssignedToInput[]
    createMany?: FireIncidentCreateManyAssignedToInputEnvelope
    connect?: FireIncidentWhereUniqueInput | FireIncidentWhereUniqueInput[]
  }

  export type ReportUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ReportCreateWithoutUserInput, ReportUncheckedCreateWithoutUserInput> | ReportCreateWithoutUserInput[] | ReportUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutUserInput | ReportCreateOrConnectWithoutUserInput[]
    createMany?: ReportCreateManyUserInputEnvelope
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
  }

  export type UserActivityUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserActivityCreateWithoutUserInput, UserActivityUncheckedCreateWithoutUserInput> | UserActivityCreateWithoutUserInput[] | UserActivityUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserActivityCreateOrConnectWithoutUserInput | UserActivityCreateOrConnectWithoutUserInput[]
    createMany?: UserActivityCreateManyUserInputEnvelope
    connect?: UserActivityWhereUniqueInput | UserActivityWhereUniqueInput[]
  }

  export type SystemSettingsUncheckedCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<SystemSettingsCreateWithoutUpdatedByInput, SystemSettingsUncheckedCreateWithoutUpdatedByInput> | SystemSettingsCreateWithoutUpdatedByInput[] | SystemSettingsUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: SystemSettingsCreateOrConnectWithoutUpdatedByInput | SystemSettingsCreateOrConnectWithoutUpdatedByInput[]
    createMany?: SystemSettingsCreateManyUpdatedByInputEnvelope
    connect?: SystemSettingsWhereUniqueInput | SystemSettingsWhereUniqueInput[]
  }

  export type EnumUserRoleFieldUpdateOperationsInput = {
    set?: $Enums.UserRole
  }

  export type FireStationUpdateOneWithoutUsersNestedInput = {
    create?: XOR<FireStationCreateWithoutUsersInput, FireStationUncheckedCreateWithoutUsersInput>
    connectOrCreate?: FireStationCreateOrConnectWithoutUsersInput
    upsert?: FireStationUpsertWithoutUsersInput
    disconnect?: FireStationWhereInput | boolean
    delete?: FireStationWhereInput | boolean
    connect?: FireStationWhereUniqueInput
    update?: XOR<XOR<FireStationUpdateToOneWithWhereWithoutUsersInput, FireStationUpdateWithoutUsersInput>, FireStationUncheckedUpdateWithoutUsersInput>
  }

  export type FireIncidentUpdateManyWithoutReportedByNestedInput = {
    create?: XOR<FireIncidentCreateWithoutReportedByInput, FireIncidentUncheckedCreateWithoutReportedByInput> | FireIncidentCreateWithoutReportedByInput[] | FireIncidentUncheckedCreateWithoutReportedByInput[]
    connectOrCreate?: FireIncidentCreateOrConnectWithoutReportedByInput | FireIncidentCreateOrConnectWithoutReportedByInput[]
    upsert?: FireIncidentUpsertWithWhereUniqueWithoutReportedByInput | FireIncidentUpsertWithWhereUniqueWithoutReportedByInput[]
    createMany?: FireIncidentCreateManyReportedByInputEnvelope
    set?: FireIncidentWhereUniqueInput | FireIncidentWhereUniqueInput[]
    disconnect?: FireIncidentWhereUniqueInput | FireIncidentWhereUniqueInput[]
    delete?: FireIncidentWhereUniqueInput | FireIncidentWhereUniqueInput[]
    connect?: FireIncidentWhereUniqueInput | FireIncidentWhereUniqueInput[]
    update?: FireIncidentUpdateWithWhereUniqueWithoutReportedByInput | FireIncidentUpdateWithWhereUniqueWithoutReportedByInput[]
    updateMany?: FireIncidentUpdateManyWithWhereWithoutReportedByInput | FireIncidentUpdateManyWithWhereWithoutReportedByInput[]
    deleteMany?: FireIncidentScalarWhereInput | FireIncidentScalarWhereInput[]
  }

  export type FireIncidentUpdateManyWithoutAssignedToNestedInput = {
    create?: XOR<FireIncidentCreateWithoutAssignedToInput, FireIncidentUncheckedCreateWithoutAssignedToInput> | FireIncidentCreateWithoutAssignedToInput[] | FireIncidentUncheckedCreateWithoutAssignedToInput[]
    connectOrCreate?: FireIncidentCreateOrConnectWithoutAssignedToInput | FireIncidentCreateOrConnectWithoutAssignedToInput[]
    upsert?: FireIncidentUpsertWithWhereUniqueWithoutAssignedToInput | FireIncidentUpsertWithWhereUniqueWithoutAssignedToInput[]
    createMany?: FireIncidentCreateManyAssignedToInputEnvelope
    set?: FireIncidentWhereUniqueInput | FireIncidentWhereUniqueInput[]
    disconnect?: FireIncidentWhereUniqueInput | FireIncidentWhereUniqueInput[]
    delete?: FireIncidentWhereUniqueInput | FireIncidentWhereUniqueInput[]
    connect?: FireIncidentWhereUniqueInput | FireIncidentWhereUniqueInput[]
    update?: FireIncidentUpdateWithWhereUniqueWithoutAssignedToInput | FireIncidentUpdateWithWhereUniqueWithoutAssignedToInput[]
    updateMany?: FireIncidentUpdateManyWithWhereWithoutAssignedToInput | FireIncidentUpdateManyWithWhereWithoutAssignedToInput[]
    deleteMany?: FireIncidentScalarWhereInput | FireIncidentScalarWhereInput[]
  }

  export type ReportUpdateManyWithoutUserNestedInput = {
    create?: XOR<ReportCreateWithoutUserInput, ReportUncheckedCreateWithoutUserInput> | ReportCreateWithoutUserInput[] | ReportUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutUserInput | ReportCreateOrConnectWithoutUserInput[]
    upsert?: ReportUpsertWithWhereUniqueWithoutUserInput | ReportUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ReportCreateManyUserInputEnvelope
    set?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    disconnect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    delete?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    update?: ReportUpdateWithWhereUniqueWithoutUserInput | ReportUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ReportUpdateManyWithWhereWithoutUserInput | ReportUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ReportScalarWhereInput | ReportScalarWhereInput[]
  }

  export type UserActivityUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserActivityCreateWithoutUserInput, UserActivityUncheckedCreateWithoutUserInput> | UserActivityCreateWithoutUserInput[] | UserActivityUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserActivityCreateOrConnectWithoutUserInput | UserActivityCreateOrConnectWithoutUserInput[]
    upsert?: UserActivityUpsertWithWhereUniqueWithoutUserInput | UserActivityUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserActivityCreateManyUserInputEnvelope
    set?: UserActivityWhereUniqueInput | UserActivityWhereUniqueInput[]
    disconnect?: UserActivityWhereUniqueInput | UserActivityWhereUniqueInput[]
    delete?: UserActivityWhereUniqueInput | UserActivityWhereUniqueInput[]
    connect?: UserActivityWhereUniqueInput | UserActivityWhereUniqueInput[]
    update?: UserActivityUpdateWithWhereUniqueWithoutUserInput | UserActivityUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserActivityUpdateManyWithWhereWithoutUserInput | UserActivityUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserActivityScalarWhereInput | UserActivityScalarWhereInput[]
  }

  export type SystemSettingsUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<SystemSettingsCreateWithoutUpdatedByInput, SystemSettingsUncheckedCreateWithoutUpdatedByInput> | SystemSettingsCreateWithoutUpdatedByInput[] | SystemSettingsUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: SystemSettingsCreateOrConnectWithoutUpdatedByInput | SystemSettingsCreateOrConnectWithoutUpdatedByInput[]
    upsert?: SystemSettingsUpsertWithWhereUniqueWithoutUpdatedByInput | SystemSettingsUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: SystemSettingsCreateManyUpdatedByInputEnvelope
    set?: SystemSettingsWhereUniqueInput | SystemSettingsWhereUniqueInput[]
    disconnect?: SystemSettingsWhereUniqueInput | SystemSettingsWhereUniqueInput[]
    delete?: SystemSettingsWhereUniqueInput | SystemSettingsWhereUniqueInput[]
    connect?: SystemSettingsWhereUniqueInput | SystemSettingsWhereUniqueInput[]
    update?: SystemSettingsUpdateWithWhereUniqueWithoutUpdatedByInput | SystemSettingsUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: SystemSettingsUpdateManyWithWhereWithoutUpdatedByInput | SystemSettingsUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: SystemSettingsScalarWhereInput | SystemSettingsScalarWhereInput[]
  }

  export type FireIncidentUncheckedUpdateManyWithoutReportedByNestedInput = {
    create?: XOR<FireIncidentCreateWithoutReportedByInput, FireIncidentUncheckedCreateWithoutReportedByInput> | FireIncidentCreateWithoutReportedByInput[] | FireIncidentUncheckedCreateWithoutReportedByInput[]
    connectOrCreate?: FireIncidentCreateOrConnectWithoutReportedByInput | FireIncidentCreateOrConnectWithoutReportedByInput[]
    upsert?: FireIncidentUpsertWithWhereUniqueWithoutReportedByInput | FireIncidentUpsertWithWhereUniqueWithoutReportedByInput[]
    createMany?: FireIncidentCreateManyReportedByInputEnvelope
    set?: FireIncidentWhereUniqueInput | FireIncidentWhereUniqueInput[]
    disconnect?: FireIncidentWhereUniqueInput | FireIncidentWhereUniqueInput[]
    delete?: FireIncidentWhereUniqueInput | FireIncidentWhereUniqueInput[]
    connect?: FireIncidentWhereUniqueInput | FireIncidentWhereUniqueInput[]
    update?: FireIncidentUpdateWithWhereUniqueWithoutReportedByInput | FireIncidentUpdateWithWhereUniqueWithoutReportedByInput[]
    updateMany?: FireIncidentUpdateManyWithWhereWithoutReportedByInput | FireIncidentUpdateManyWithWhereWithoutReportedByInput[]
    deleteMany?: FireIncidentScalarWhereInput | FireIncidentScalarWhereInput[]
  }

  export type FireIncidentUncheckedUpdateManyWithoutAssignedToNestedInput = {
    create?: XOR<FireIncidentCreateWithoutAssignedToInput, FireIncidentUncheckedCreateWithoutAssignedToInput> | FireIncidentCreateWithoutAssignedToInput[] | FireIncidentUncheckedCreateWithoutAssignedToInput[]
    connectOrCreate?: FireIncidentCreateOrConnectWithoutAssignedToInput | FireIncidentCreateOrConnectWithoutAssignedToInput[]
    upsert?: FireIncidentUpsertWithWhereUniqueWithoutAssignedToInput | FireIncidentUpsertWithWhereUniqueWithoutAssignedToInput[]
    createMany?: FireIncidentCreateManyAssignedToInputEnvelope
    set?: FireIncidentWhereUniqueInput | FireIncidentWhereUniqueInput[]
    disconnect?: FireIncidentWhereUniqueInput | FireIncidentWhereUniqueInput[]
    delete?: FireIncidentWhereUniqueInput | FireIncidentWhereUniqueInput[]
    connect?: FireIncidentWhereUniqueInput | FireIncidentWhereUniqueInput[]
    update?: FireIncidentUpdateWithWhereUniqueWithoutAssignedToInput | FireIncidentUpdateWithWhereUniqueWithoutAssignedToInput[]
    updateMany?: FireIncidentUpdateManyWithWhereWithoutAssignedToInput | FireIncidentUpdateManyWithWhereWithoutAssignedToInput[]
    deleteMany?: FireIncidentScalarWhereInput | FireIncidentScalarWhereInput[]
  }

  export type ReportUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ReportCreateWithoutUserInput, ReportUncheckedCreateWithoutUserInput> | ReportCreateWithoutUserInput[] | ReportUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutUserInput | ReportCreateOrConnectWithoutUserInput[]
    upsert?: ReportUpsertWithWhereUniqueWithoutUserInput | ReportUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ReportCreateManyUserInputEnvelope
    set?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    disconnect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    delete?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    update?: ReportUpdateWithWhereUniqueWithoutUserInput | ReportUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ReportUpdateManyWithWhereWithoutUserInput | ReportUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ReportScalarWhereInput | ReportScalarWhereInput[]
  }

  export type UserActivityUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserActivityCreateWithoutUserInput, UserActivityUncheckedCreateWithoutUserInput> | UserActivityCreateWithoutUserInput[] | UserActivityUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserActivityCreateOrConnectWithoutUserInput | UserActivityCreateOrConnectWithoutUserInput[]
    upsert?: UserActivityUpsertWithWhereUniqueWithoutUserInput | UserActivityUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserActivityCreateManyUserInputEnvelope
    set?: UserActivityWhereUniqueInput | UserActivityWhereUniqueInput[]
    disconnect?: UserActivityWhereUniqueInput | UserActivityWhereUniqueInput[]
    delete?: UserActivityWhereUniqueInput | UserActivityWhereUniqueInput[]
    connect?: UserActivityWhereUniqueInput | UserActivityWhereUniqueInput[]
    update?: UserActivityUpdateWithWhereUniqueWithoutUserInput | UserActivityUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserActivityUpdateManyWithWhereWithoutUserInput | UserActivityUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserActivityScalarWhereInput | UserActivityScalarWhereInput[]
  }

  export type SystemSettingsUncheckedUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<SystemSettingsCreateWithoutUpdatedByInput, SystemSettingsUncheckedCreateWithoutUpdatedByInput> | SystemSettingsCreateWithoutUpdatedByInput[] | SystemSettingsUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: SystemSettingsCreateOrConnectWithoutUpdatedByInput | SystemSettingsCreateOrConnectWithoutUpdatedByInput[]
    upsert?: SystemSettingsUpsertWithWhereUniqueWithoutUpdatedByInput | SystemSettingsUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: SystemSettingsCreateManyUpdatedByInputEnvelope
    set?: SystemSettingsWhereUniqueInput | SystemSettingsWhereUniqueInput[]
    disconnect?: SystemSettingsWhereUniqueInput | SystemSettingsWhereUniqueInput[]
    delete?: SystemSettingsWhereUniqueInput | SystemSettingsWhereUniqueInput[]
    connect?: SystemSettingsWhereUniqueInput | SystemSettingsWhereUniqueInput[]
    update?: SystemSettingsUpdateWithWhereUniqueWithoutUpdatedByInput | SystemSettingsUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: SystemSettingsUpdateManyWithWhereWithoutUpdatedByInput | SystemSettingsUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: SystemSettingsScalarWhereInput | SystemSettingsScalarWhereInput[]
  }

  export type UserCreateNestedManyWithoutFireStationInput = {
    create?: XOR<UserCreateWithoutFireStationInput, UserUncheckedCreateWithoutFireStationInput> | UserCreateWithoutFireStationInput[] | UserUncheckedCreateWithoutFireStationInput[]
    connectOrCreate?: UserCreateOrConnectWithoutFireStationInput | UserCreateOrConnectWithoutFireStationInput[]
    createMany?: UserCreateManyFireStationInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type VehicleCreateNestedManyWithoutFireStationInput = {
    create?: XOR<VehicleCreateWithoutFireStationInput, VehicleUncheckedCreateWithoutFireStationInput> | VehicleCreateWithoutFireStationInput[] | VehicleUncheckedCreateWithoutFireStationInput[]
    connectOrCreate?: VehicleCreateOrConnectWithoutFireStationInput | VehicleCreateOrConnectWithoutFireStationInput[]
    createMany?: VehicleCreateManyFireStationInputEnvelope
    connect?: VehicleWhereUniqueInput | VehicleWhereUniqueInput[]
  }

  export type FireIncidentCreateNestedManyWithoutFireStationInput = {
    create?: XOR<FireIncidentCreateWithoutFireStationInput, FireIncidentUncheckedCreateWithoutFireStationInput> | FireIncidentCreateWithoutFireStationInput[] | FireIncidentUncheckedCreateWithoutFireStationInput[]
    connectOrCreate?: FireIncidentCreateOrConnectWithoutFireStationInput | FireIncidentCreateOrConnectWithoutFireStationInput[]
    createMany?: FireIncidentCreateManyFireStationInputEnvelope
    connect?: FireIncidentWhereUniqueInput | FireIncidentWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutFireStationInput = {
    create?: XOR<UserCreateWithoutFireStationInput, UserUncheckedCreateWithoutFireStationInput> | UserCreateWithoutFireStationInput[] | UserUncheckedCreateWithoutFireStationInput[]
    connectOrCreate?: UserCreateOrConnectWithoutFireStationInput | UserCreateOrConnectWithoutFireStationInput[]
    createMany?: UserCreateManyFireStationInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type VehicleUncheckedCreateNestedManyWithoutFireStationInput = {
    create?: XOR<VehicleCreateWithoutFireStationInput, VehicleUncheckedCreateWithoutFireStationInput> | VehicleCreateWithoutFireStationInput[] | VehicleUncheckedCreateWithoutFireStationInput[]
    connectOrCreate?: VehicleCreateOrConnectWithoutFireStationInput | VehicleCreateOrConnectWithoutFireStationInput[]
    createMany?: VehicleCreateManyFireStationInputEnvelope
    connect?: VehicleWhereUniqueInput | VehicleWhereUniqueInput[]
  }

  export type FireIncidentUncheckedCreateNestedManyWithoutFireStationInput = {
    create?: XOR<FireIncidentCreateWithoutFireStationInput, FireIncidentUncheckedCreateWithoutFireStationInput> | FireIncidentCreateWithoutFireStationInput[] | FireIncidentUncheckedCreateWithoutFireStationInput[]
    connectOrCreate?: FireIncidentCreateOrConnectWithoutFireStationInput | FireIncidentCreateOrConnectWithoutFireStationInput[]
    createMany?: FireIncidentCreateManyFireStationInputEnvelope
    connect?: FireIncidentWhereUniqueInput | FireIncidentWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type UserUpdateManyWithoutFireStationNestedInput = {
    create?: XOR<UserCreateWithoutFireStationInput, UserUncheckedCreateWithoutFireStationInput> | UserCreateWithoutFireStationInput[] | UserUncheckedCreateWithoutFireStationInput[]
    connectOrCreate?: UserCreateOrConnectWithoutFireStationInput | UserCreateOrConnectWithoutFireStationInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutFireStationInput | UserUpsertWithWhereUniqueWithoutFireStationInput[]
    createMany?: UserCreateManyFireStationInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutFireStationInput | UserUpdateWithWhereUniqueWithoutFireStationInput[]
    updateMany?: UserUpdateManyWithWhereWithoutFireStationInput | UserUpdateManyWithWhereWithoutFireStationInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type VehicleUpdateManyWithoutFireStationNestedInput = {
    create?: XOR<VehicleCreateWithoutFireStationInput, VehicleUncheckedCreateWithoutFireStationInput> | VehicleCreateWithoutFireStationInput[] | VehicleUncheckedCreateWithoutFireStationInput[]
    connectOrCreate?: VehicleCreateOrConnectWithoutFireStationInput | VehicleCreateOrConnectWithoutFireStationInput[]
    upsert?: VehicleUpsertWithWhereUniqueWithoutFireStationInput | VehicleUpsertWithWhereUniqueWithoutFireStationInput[]
    createMany?: VehicleCreateManyFireStationInputEnvelope
    set?: VehicleWhereUniqueInput | VehicleWhereUniqueInput[]
    disconnect?: VehicleWhereUniqueInput | VehicleWhereUniqueInput[]
    delete?: VehicleWhereUniqueInput | VehicleWhereUniqueInput[]
    connect?: VehicleWhereUniqueInput | VehicleWhereUniqueInput[]
    update?: VehicleUpdateWithWhereUniqueWithoutFireStationInput | VehicleUpdateWithWhereUniqueWithoutFireStationInput[]
    updateMany?: VehicleUpdateManyWithWhereWithoutFireStationInput | VehicleUpdateManyWithWhereWithoutFireStationInput[]
    deleteMany?: VehicleScalarWhereInput | VehicleScalarWhereInput[]
  }

  export type FireIncidentUpdateManyWithoutFireStationNestedInput = {
    create?: XOR<FireIncidentCreateWithoutFireStationInput, FireIncidentUncheckedCreateWithoutFireStationInput> | FireIncidentCreateWithoutFireStationInput[] | FireIncidentUncheckedCreateWithoutFireStationInput[]
    connectOrCreate?: FireIncidentCreateOrConnectWithoutFireStationInput | FireIncidentCreateOrConnectWithoutFireStationInput[]
    upsert?: FireIncidentUpsertWithWhereUniqueWithoutFireStationInput | FireIncidentUpsertWithWhereUniqueWithoutFireStationInput[]
    createMany?: FireIncidentCreateManyFireStationInputEnvelope
    set?: FireIncidentWhereUniqueInput | FireIncidentWhereUniqueInput[]
    disconnect?: FireIncidentWhereUniqueInput | FireIncidentWhereUniqueInput[]
    delete?: FireIncidentWhereUniqueInput | FireIncidentWhereUniqueInput[]
    connect?: FireIncidentWhereUniqueInput | FireIncidentWhereUniqueInput[]
    update?: FireIncidentUpdateWithWhereUniqueWithoutFireStationInput | FireIncidentUpdateWithWhereUniqueWithoutFireStationInput[]
    updateMany?: FireIncidentUpdateManyWithWhereWithoutFireStationInput | FireIncidentUpdateManyWithWhereWithoutFireStationInput[]
    deleteMany?: FireIncidentScalarWhereInput | FireIncidentScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutFireStationNestedInput = {
    create?: XOR<UserCreateWithoutFireStationInput, UserUncheckedCreateWithoutFireStationInput> | UserCreateWithoutFireStationInput[] | UserUncheckedCreateWithoutFireStationInput[]
    connectOrCreate?: UserCreateOrConnectWithoutFireStationInput | UserCreateOrConnectWithoutFireStationInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutFireStationInput | UserUpsertWithWhereUniqueWithoutFireStationInput[]
    createMany?: UserCreateManyFireStationInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutFireStationInput | UserUpdateWithWhereUniqueWithoutFireStationInput[]
    updateMany?: UserUpdateManyWithWhereWithoutFireStationInput | UserUpdateManyWithWhereWithoutFireStationInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type VehicleUncheckedUpdateManyWithoutFireStationNestedInput = {
    create?: XOR<VehicleCreateWithoutFireStationInput, VehicleUncheckedCreateWithoutFireStationInput> | VehicleCreateWithoutFireStationInput[] | VehicleUncheckedCreateWithoutFireStationInput[]
    connectOrCreate?: VehicleCreateOrConnectWithoutFireStationInput | VehicleCreateOrConnectWithoutFireStationInput[]
    upsert?: VehicleUpsertWithWhereUniqueWithoutFireStationInput | VehicleUpsertWithWhereUniqueWithoutFireStationInput[]
    createMany?: VehicleCreateManyFireStationInputEnvelope
    set?: VehicleWhereUniqueInput | VehicleWhereUniqueInput[]
    disconnect?: VehicleWhereUniqueInput | VehicleWhereUniqueInput[]
    delete?: VehicleWhereUniqueInput | VehicleWhereUniqueInput[]
    connect?: VehicleWhereUniqueInput | VehicleWhereUniqueInput[]
    update?: VehicleUpdateWithWhereUniqueWithoutFireStationInput | VehicleUpdateWithWhereUniqueWithoutFireStationInput[]
    updateMany?: VehicleUpdateManyWithWhereWithoutFireStationInput | VehicleUpdateManyWithWhereWithoutFireStationInput[]
    deleteMany?: VehicleScalarWhereInput | VehicleScalarWhereInput[]
  }

  export type FireIncidentUncheckedUpdateManyWithoutFireStationNestedInput = {
    create?: XOR<FireIncidentCreateWithoutFireStationInput, FireIncidentUncheckedCreateWithoutFireStationInput> | FireIncidentCreateWithoutFireStationInput[] | FireIncidentUncheckedCreateWithoutFireStationInput[]
    connectOrCreate?: FireIncidentCreateOrConnectWithoutFireStationInput | FireIncidentCreateOrConnectWithoutFireStationInput[]
    upsert?: FireIncidentUpsertWithWhereUniqueWithoutFireStationInput | FireIncidentUpsertWithWhereUniqueWithoutFireStationInput[]
    createMany?: FireIncidentCreateManyFireStationInputEnvelope
    set?: FireIncidentWhereUniqueInput | FireIncidentWhereUniqueInput[]
    disconnect?: FireIncidentWhereUniqueInput | FireIncidentWhereUniqueInput[]
    delete?: FireIncidentWhereUniqueInput | FireIncidentWhereUniqueInput[]
    connect?: FireIncidentWhereUniqueInput | FireIncidentWhereUniqueInput[]
    update?: FireIncidentUpdateWithWhereUniqueWithoutFireStationInput | FireIncidentUpdateWithWhereUniqueWithoutFireStationInput[]
    updateMany?: FireIncidentUpdateManyWithWhereWithoutFireStationInput | FireIncidentUpdateManyWithWhereWithoutFireStationInput[]
    deleteMany?: FireIncidentScalarWhereInput | FireIncidentScalarWhereInput[]
  }

  export type FireStationCreateNestedOneWithoutVehiclesInput = {
    create?: XOR<FireStationCreateWithoutVehiclesInput, FireStationUncheckedCreateWithoutVehiclesInput>
    connectOrCreate?: FireStationCreateOrConnectWithoutVehiclesInput
    connect?: FireStationWhereUniqueInput
  }

  export type FireIncidentCreateNestedManyWithoutVehiclesInput = {
    create?: XOR<FireIncidentCreateWithoutVehiclesInput, FireIncidentUncheckedCreateWithoutVehiclesInput> | FireIncidentCreateWithoutVehiclesInput[] | FireIncidentUncheckedCreateWithoutVehiclesInput[]
    connectOrCreate?: FireIncidentCreateOrConnectWithoutVehiclesInput | FireIncidentCreateOrConnectWithoutVehiclesInput[]
    connect?: FireIncidentWhereUniqueInput | FireIncidentWhereUniqueInput[]
  }

  export type FireIncidentUncheckedCreateNestedManyWithoutVehiclesInput = {
    create?: XOR<FireIncidentCreateWithoutVehiclesInput, FireIncidentUncheckedCreateWithoutVehiclesInput> | FireIncidentCreateWithoutVehiclesInput[] | FireIncidentUncheckedCreateWithoutVehiclesInput[]
    connectOrCreate?: FireIncidentCreateOrConnectWithoutVehiclesInput | FireIncidentCreateOrConnectWithoutVehiclesInput[]
    connect?: FireIncidentWhereUniqueInput | FireIncidentWhereUniqueInput[]
  }

  export type EnumVehicleTypeFieldUpdateOperationsInput = {
    set?: $Enums.VehicleType
  }

  export type EnumVehicleStatusFieldUpdateOperationsInput = {
    set?: $Enums.VehicleStatus
  }

  export type FireStationUpdateOneRequiredWithoutVehiclesNestedInput = {
    create?: XOR<FireStationCreateWithoutVehiclesInput, FireStationUncheckedCreateWithoutVehiclesInput>
    connectOrCreate?: FireStationCreateOrConnectWithoutVehiclesInput
    upsert?: FireStationUpsertWithoutVehiclesInput
    connect?: FireStationWhereUniqueInput
    update?: XOR<XOR<FireStationUpdateToOneWithWhereWithoutVehiclesInput, FireStationUpdateWithoutVehiclesInput>, FireStationUncheckedUpdateWithoutVehiclesInput>
  }

  export type FireIncidentUpdateManyWithoutVehiclesNestedInput = {
    create?: XOR<FireIncidentCreateWithoutVehiclesInput, FireIncidentUncheckedCreateWithoutVehiclesInput> | FireIncidentCreateWithoutVehiclesInput[] | FireIncidentUncheckedCreateWithoutVehiclesInput[]
    connectOrCreate?: FireIncidentCreateOrConnectWithoutVehiclesInput | FireIncidentCreateOrConnectWithoutVehiclesInput[]
    upsert?: FireIncidentUpsertWithWhereUniqueWithoutVehiclesInput | FireIncidentUpsertWithWhereUniqueWithoutVehiclesInput[]
    set?: FireIncidentWhereUniqueInput | FireIncidentWhereUniqueInput[]
    disconnect?: FireIncidentWhereUniqueInput | FireIncidentWhereUniqueInput[]
    delete?: FireIncidentWhereUniqueInput | FireIncidentWhereUniqueInput[]
    connect?: FireIncidentWhereUniqueInput | FireIncidentWhereUniqueInput[]
    update?: FireIncidentUpdateWithWhereUniqueWithoutVehiclesInput | FireIncidentUpdateWithWhereUniqueWithoutVehiclesInput[]
    updateMany?: FireIncidentUpdateManyWithWhereWithoutVehiclesInput | FireIncidentUpdateManyWithWhereWithoutVehiclesInput[]
    deleteMany?: FireIncidentScalarWhereInput | FireIncidentScalarWhereInput[]
  }

  export type FireIncidentUncheckedUpdateManyWithoutVehiclesNestedInput = {
    create?: XOR<FireIncidentCreateWithoutVehiclesInput, FireIncidentUncheckedCreateWithoutVehiclesInput> | FireIncidentCreateWithoutVehiclesInput[] | FireIncidentUncheckedCreateWithoutVehiclesInput[]
    connectOrCreate?: FireIncidentCreateOrConnectWithoutVehiclesInput | FireIncidentCreateOrConnectWithoutVehiclesInput[]
    upsert?: FireIncidentUpsertWithWhereUniqueWithoutVehiclesInput | FireIncidentUpsertWithWhereUniqueWithoutVehiclesInput[]
    set?: FireIncidentWhereUniqueInput | FireIncidentWhereUniqueInput[]
    disconnect?: FireIncidentWhereUniqueInput | FireIncidentWhereUniqueInput[]
    delete?: FireIncidentWhereUniqueInput | FireIncidentWhereUniqueInput[]
    connect?: FireIncidentWhereUniqueInput | FireIncidentWhereUniqueInput[]
    update?: FireIncidentUpdateWithWhereUniqueWithoutVehiclesInput | FireIncidentUpdateWithWhereUniqueWithoutVehiclesInput[]
    updateMany?: FireIncidentUpdateManyWithWhereWithoutVehiclesInput | FireIncidentUpdateManyWithWhereWithoutVehiclesInput[]
    deleteMany?: FireIncidentScalarWhereInput | FireIncidentScalarWhereInput[]
  }

  export type FireIncidentCreateNestedManyWithoutFireLevelInput = {
    create?: XOR<FireIncidentCreateWithoutFireLevelInput, FireIncidentUncheckedCreateWithoutFireLevelInput> | FireIncidentCreateWithoutFireLevelInput[] | FireIncidentUncheckedCreateWithoutFireLevelInput[]
    connectOrCreate?: FireIncidentCreateOrConnectWithoutFireLevelInput | FireIncidentCreateOrConnectWithoutFireLevelInput[]
    createMany?: FireIncidentCreateManyFireLevelInputEnvelope
    connect?: FireIncidentWhereUniqueInput | FireIncidentWhereUniqueInput[]
  }

  export type FireLevelRequirementCreateNestedManyWithoutFireLevelInput = {
    create?: XOR<FireLevelRequirementCreateWithoutFireLevelInput, FireLevelRequirementUncheckedCreateWithoutFireLevelInput> | FireLevelRequirementCreateWithoutFireLevelInput[] | FireLevelRequirementUncheckedCreateWithoutFireLevelInput[]
    connectOrCreate?: FireLevelRequirementCreateOrConnectWithoutFireLevelInput | FireLevelRequirementCreateOrConnectWithoutFireLevelInput[]
    createMany?: FireLevelRequirementCreateManyFireLevelInputEnvelope
    connect?: FireLevelRequirementWhereUniqueInput | FireLevelRequirementWhereUniqueInput[]
  }

  export type FireAddressLevelCreateNestedManyWithoutFireLevelInput = {
    create?: XOR<FireAddressLevelCreateWithoutFireLevelInput, FireAddressLevelUncheckedCreateWithoutFireLevelInput> | FireAddressLevelCreateWithoutFireLevelInput[] | FireAddressLevelUncheckedCreateWithoutFireLevelInput[]
    connectOrCreate?: FireAddressLevelCreateOrConnectWithoutFireLevelInput | FireAddressLevelCreateOrConnectWithoutFireLevelInput[]
    createMany?: FireAddressLevelCreateManyFireLevelInputEnvelope
    connect?: FireAddressLevelWhereUniqueInput | FireAddressLevelWhereUniqueInput[]
  }

  export type FireIncidentUncheckedCreateNestedManyWithoutFireLevelInput = {
    create?: XOR<FireIncidentCreateWithoutFireLevelInput, FireIncidentUncheckedCreateWithoutFireLevelInput> | FireIncidentCreateWithoutFireLevelInput[] | FireIncidentUncheckedCreateWithoutFireLevelInput[]
    connectOrCreate?: FireIncidentCreateOrConnectWithoutFireLevelInput | FireIncidentCreateOrConnectWithoutFireLevelInput[]
    createMany?: FireIncidentCreateManyFireLevelInputEnvelope
    connect?: FireIncidentWhereUniqueInput | FireIncidentWhereUniqueInput[]
  }

  export type FireLevelRequirementUncheckedCreateNestedManyWithoutFireLevelInput = {
    create?: XOR<FireLevelRequirementCreateWithoutFireLevelInput, FireLevelRequirementUncheckedCreateWithoutFireLevelInput> | FireLevelRequirementCreateWithoutFireLevelInput[] | FireLevelRequirementUncheckedCreateWithoutFireLevelInput[]
    connectOrCreate?: FireLevelRequirementCreateOrConnectWithoutFireLevelInput | FireLevelRequirementCreateOrConnectWithoutFireLevelInput[]
    createMany?: FireLevelRequirementCreateManyFireLevelInputEnvelope
    connect?: FireLevelRequirementWhereUniqueInput | FireLevelRequirementWhereUniqueInput[]
  }

  export type FireAddressLevelUncheckedCreateNestedManyWithoutFireLevelInput = {
    create?: XOR<FireAddressLevelCreateWithoutFireLevelInput, FireAddressLevelUncheckedCreateWithoutFireLevelInput> | FireAddressLevelCreateWithoutFireLevelInput[] | FireAddressLevelUncheckedCreateWithoutFireLevelInput[]
    connectOrCreate?: FireAddressLevelCreateOrConnectWithoutFireLevelInput | FireAddressLevelCreateOrConnectWithoutFireLevelInput[]
    createMany?: FireAddressLevelCreateManyFireLevelInputEnvelope
    connect?: FireAddressLevelWhereUniqueInput | FireAddressLevelWhereUniqueInput[]
  }

  export type FireIncidentUpdateManyWithoutFireLevelNestedInput = {
    create?: XOR<FireIncidentCreateWithoutFireLevelInput, FireIncidentUncheckedCreateWithoutFireLevelInput> | FireIncidentCreateWithoutFireLevelInput[] | FireIncidentUncheckedCreateWithoutFireLevelInput[]
    connectOrCreate?: FireIncidentCreateOrConnectWithoutFireLevelInput | FireIncidentCreateOrConnectWithoutFireLevelInput[]
    upsert?: FireIncidentUpsertWithWhereUniqueWithoutFireLevelInput | FireIncidentUpsertWithWhereUniqueWithoutFireLevelInput[]
    createMany?: FireIncidentCreateManyFireLevelInputEnvelope
    set?: FireIncidentWhereUniqueInput | FireIncidentWhereUniqueInput[]
    disconnect?: FireIncidentWhereUniqueInput | FireIncidentWhereUniqueInput[]
    delete?: FireIncidentWhereUniqueInput | FireIncidentWhereUniqueInput[]
    connect?: FireIncidentWhereUniqueInput | FireIncidentWhereUniqueInput[]
    update?: FireIncidentUpdateWithWhereUniqueWithoutFireLevelInput | FireIncidentUpdateWithWhereUniqueWithoutFireLevelInput[]
    updateMany?: FireIncidentUpdateManyWithWhereWithoutFireLevelInput | FireIncidentUpdateManyWithWhereWithoutFireLevelInput[]
    deleteMany?: FireIncidentScalarWhereInput | FireIncidentScalarWhereInput[]
  }

  export type FireLevelRequirementUpdateManyWithoutFireLevelNestedInput = {
    create?: XOR<FireLevelRequirementCreateWithoutFireLevelInput, FireLevelRequirementUncheckedCreateWithoutFireLevelInput> | FireLevelRequirementCreateWithoutFireLevelInput[] | FireLevelRequirementUncheckedCreateWithoutFireLevelInput[]
    connectOrCreate?: FireLevelRequirementCreateOrConnectWithoutFireLevelInput | FireLevelRequirementCreateOrConnectWithoutFireLevelInput[]
    upsert?: FireLevelRequirementUpsertWithWhereUniqueWithoutFireLevelInput | FireLevelRequirementUpsertWithWhereUniqueWithoutFireLevelInput[]
    createMany?: FireLevelRequirementCreateManyFireLevelInputEnvelope
    set?: FireLevelRequirementWhereUniqueInput | FireLevelRequirementWhereUniqueInput[]
    disconnect?: FireLevelRequirementWhereUniqueInput | FireLevelRequirementWhereUniqueInput[]
    delete?: FireLevelRequirementWhereUniqueInput | FireLevelRequirementWhereUniqueInput[]
    connect?: FireLevelRequirementWhereUniqueInput | FireLevelRequirementWhereUniqueInput[]
    update?: FireLevelRequirementUpdateWithWhereUniqueWithoutFireLevelInput | FireLevelRequirementUpdateWithWhereUniqueWithoutFireLevelInput[]
    updateMany?: FireLevelRequirementUpdateManyWithWhereWithoutFireLevelInput | FireLevelRequirementUpdateManyWithWhereWithoutFireLevelInput[]
    deleteMany?: FireLevelRequirementScalarWhereInput | FireLevelRequirementScalarWhereInput[]
  }

  export type FireAddressLevelUpdateManyWithoutFireLevelNestedInput = {
    create?: XOR<FireAddressLevelCreateWithoutFireLevelInput, FireAddressLevelUncheckedCreateWithoutFireLevelInput> | FireAddressLevelCreateWithoutFireLevelInput[] | FireAddressLevelUncheckedCreateWithoutFireLevelInput[]
    connectOrCreate?: FireAddressLevelCreateOrConnectWithoutFireLevelInput | FireAddressLevelCreateOrConnectWithoutFireLevelInput[]
    upsert?: FireAddressLevelUpsertWithWhereUniqueWithoutFireLevelInput | FireAddressLevelUpsertWithWhereUniqueWithoutFireLevelInput[]
    createMany?: FireAddressLevelCreateManyFireLevelInputEnvelope
    set?: FireAddressLevelWhereUniqueInput | FireAddressLevelWhereUniqueInput[]
    disconnect?: FireAddressLevelWhereUniqueInput | FireAddressLevelWhereUniqueInput[]
    delete?: FireAddressLevelWhereUniqueInput | FireAddressLevelWhereUniqueInput[]
    connect?: FireAddressLevelWhereUniqueInput | FireAddressLevelWhereUniqueInput[]
    update?: FireAddressLevelUpdateWithWhereUniqueWithoutFireLevelInput | FireAddressLevelUpdateWithWhereUniqueWithoutFireLevelInput[]
    updateMany?: FireAddressLevelUpdateManyWithWhereWithoutFireLevelInput | FireAddressLevelUpdateManyWithWhereWithoutFireLevelInput[]
    deleteMany?: FireAddressLevelScalarWhereInput | FireAddressLevelScalarWhereInput[]
  }

  export type FireIncidentUncheckedUpdateManyWithoutFireLevelNestedInput = {
    create?: XOR<FireIncidentCreateWithoutFireLevelInput, FireIncidentUncheckedCreateWithoutFireLevelInput> | FireIncidentCreateWithoutFireLevelInput[] | FireIncidentUncheckedCreateWithoutFireLevelInput[]
    connectOrCreate?: FireIncidentCreateOrConnectWithoutFireLevelInput | FireIncidentCreateOrConnectWithoutFireLevelInput[]
    upsert?: FireIncidentUpsertWithWhereUniqueWithoutFireLevelInput | FireIncidentUpsertWithWhereUniqueWithoutFireLevelInput[]
    createMany?: FireIncidentCreateManyFireLevelInputEnvelope
    set?: FireIncidentWhereUniqueInput | FireIncidentWhereUniqueInput[]
    disconnect?: FireIncidentWhereUniqueInput | FireIncidentWhereUniqueInput[]
    delete?: FireIncidentWhereUniqueInput | FireIncidentWhereUniqueInput[]
    connect?: FireIncidentWhereUniqueInput | FireIncidentWhereUniqueInput[]
    update?: FireIncidentUpdateWithWhereUniqueWithoutFireLevelInput | FireIncidentUpdateWithWhereUniqueWithoutFireLevelInput[]
    updateMany?: FireIncidentUpdateManyWithWhereWithoutFireLevelInput | FireIncidentUpdateManyWithWhereWithoutFireLevelInput[]
    deleteMany?: FireIncidentScalarWhereInput | FireIncidentScalarWhereInput[]
  }

  export type FireLevelRequirementUncheckedUpdateManyWithoutFireLevelNestedInput = {
    create?: XOR<FireLevelRequirementCreateWithoutFireLevelInput, FireLevelRequirementUncheckedCreateWithoutFireLevelInput> | FireLevelRequirementCreateWithoutFireLevelInput[] | FireLevelRequirementUncheckedCreateWithoutFireLevelInput[]
    connectOrCreate?: FireLevelRequirementCreateOrConnectWithoutFireLevelInput | FireLevelRequirementCreateOrConnectWithoutFireLevelInput[]
    upsert?: FireLevelRequirementUpsertWithWhereUniqueWithoutFireLevelInput | FireLevelRequirementUpsertWithWhereUniqueWithoutFireLevelInput[]
    createMany?: FireLevelRequirementCreateManyFireLevelInputEnvelope
    set?: FireLevelRequirementWhereUniqueInput | FireLevelRequirementWhereUniqueInput[]
    disconnect?: FireLevelRequirementWhereUniqueInput | FireLevelRequirementWhereUniqueInput[]
    delete?: FireLevelRequirementWhereUniqueInput | FireLevelRequirementWhereUniqueInput[]
    connect?: FireLevelRequirementWhereUniqueInput | FireLevelRequirementWhereUniqueInput[]
    update?: FireLevelRequirementUpdateWithWhereUniqueWithoutFireLevelInput | FireLevelRequirementUpdateWithWhereUniqueWithoutFireLevelInput[]
    updateMany?: FireLevelRequirementUpdateManyWithWhereWithoutFireLevelInput | FireLevelRequirementUpdateManyWithWhereWithoutFireLevelInput[]
    deleteMany?: FireLevelRequirementScalarWhereInput | FireLevelRequirementScalarWhereInput[]
  }

  export type FireAddressLevelUncheckedUpdateManyWithoutFireLevelNestedInput = {
    create?: XOR<FireAddressLevelCreateWithoutFireLevelInput, FireAddressLevelUncheckedCreateWithoutFireLevelInput> | FireAddressLevelCreateWithoutFireLevelInput[] | FireAddressLevelUncheckedCreateWithoutFireLevelInput[]
    connectOrCreate?: FireAddressLevelCreateOrConnectWithoutFireLevelInput | FireAddressLevelCreateOrConnectWithoutFireLevelInput[]
    upsert?: FireAddressLevelUpsertWithWhereUniqueWithoutFireLevelInput | FireAddressLevelUpsertWithWhereUniqueWithoutFireLevelInput[]
    createMany?: FireAddressLevelCreateManyFireLevelInputEnvelope
    set?: FireAddressLevelWhereUniqueInput | FireAddressLevelWhereUniqueInput[]
    disconnect?: FireAddressLevelWhereUniqueInput | FireAddressLevelWhereUniqueInput[]
    delete?: FireAddressLevelWhereUniqueInput | FireAddressLevelWhereUniqueInput[]
    connect?: FireAddressLevelWhereUniqueInput | FireAddressLevelWhereUniqueInput[]
    update?: FireAddressLevelUpdateWithWhereUniqueWithoutFireLevelInput | FireAddressLevelUpdateWithWhereUniqueWithoutFireLevelInput[]
    updateMany?: FireAddressLevelUpdateManyWithWhereWithoutFireLevelInput | FireAddressLevelUpdateManyWithWhereWithoutFireLevelInput[]
    deleteMany?: FireAddressLevelScalarWhereInput | FireAddressLevelScalarWhereInput[]
  }

  export type FireLevelCreateNestedOneWithoutRequirementsInput = {
    create?: XOR<FireLevelCreateWithoutRequirementsInput, FireLevelUncheckedCreateWithoutRequirementsInput>
    connectOrCreate?: FireLevelCreateOrConnectWithoutRequirementsInput
    connect?: FireLevelWhereUniqueInput
  }

  export type FireLevelUpdateOneRequiredWithoutRequirementsNestedInput = {
    create?: XOR<FireLevelCreateWithoutRequirementsInput, FireLevelUncheckedCreateWithoutRequirementsInput>
    connectOrCreate?: FireLevelCreateOrConnectWithoutRequirementsInput
    upsert?: FireLevelUpsertWithoutRequirementsInput
    connect?: FireLevelWhereUniqueInput
    update?: XOR<XOR<FireLevelUpdateToOneWithWhereWithoutRequirementsInput, FireLevelUpdateWithoutRequirementsInput>, FireLevelUncheckedUpdateWithoutRequirementsInput>
  }

  export type UserCreateNestedOneWithoutReportedFiresInput = {
    create?: XOR<UserCreateWithoutReportedFiresInput, UserUncheckedCreateWithoutReportedFiresInput>
    connectOrCreate?: UserCreateOrConnectWithoutReportedFiresInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutAssignedFiresInput = {
    create?: XOR<UserCreateWithoutAssignedFiresInput, UserUncheckedCreateWithoutAssignedFiresInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssignedFiresInput
    connect?: UserWhereUniqueInput
  }

  export type FireStationCreateNestedOneWithoutIncidentsInput = {
    create?: XOR<FireStationCreateWithoutIncidentsInput, FireStationUncheckedCreateWithoutIncidentsInput>
    connectOrCreate?: FireStationCreateOrConnectWithoutIncidentsInput
    connect?: FireStationWhereUniqueInput
  }

  export type FireLevelCreateNestedOneWithoutIncidentsInput = {
    create?: XOR<FireLevelCreateWithoutIncidentsInput, FireLevelUncheckedCreateWithoutIncidentsInput>
    connectOrCreate?: FireLevelCreateOrConnectWithoutIncidentsInput
    connect?: FireLevelWhereUniqueInput
  }

  export type VehicleCreateNestedManyWithoutIncidentsInput = {
    create?: XOR<VehicleCreateWithoutIncidentsInput, VehicleUncheckedCreateWithoutIncidentsInput> | VehicleCreateWithoutIncidentsInput[] | VehicleUncheckedCreateWithoutIncidentsInput[]
    connectOrCreate?: VehicleCreateOrConnectWithoutIncidentsInput | VehicleCreateOrConnectWithoutIncidentsInput[]
    connect?: VehicleWhereUniqueInput | VehicleWhereUniqueInput[]
  }

  export type ReportCreateNestedManyWithoutFireIncidentInput = {
    create?: XOR<ReportCreateWithoutFireIncidentInput, ReportUncheckedCreateWithoutFireIncidentInput> | ReportCreateWithoutFireIncidentInput[] | ReportUncheckedCreateWithoutFireIncidentInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutFireIncidentInput | ReportCreateOrConnectWithoutFireIncidentInput[]
    createMany?: ReportCreateManyFireIncidentInputEnvelope
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
  }

  export type FireHistoryCreateNestedManyWithoutFireIncidentInput = {
    create?: XOR<FireHistoryCreateWithoutFireIncidentInput, FireHistoryUncheckedCreateWithoutFireIncidentInput> | FireHistoryCreateWithoutFireIncidentInput[] | FireHistoryUncheckedCreateWithoutFireIncidentInput[]
    connectOrCreate?: FireHistoryCreateOrConnectWithoutFireIncidentInput | FireHistoryCreateOrConnectWithoutFireIncidentInput[]
    createMany?: FireHistoryCreateManyFireIncidentInputEnvelope
    connect?: FireHistoryWhereUniqueInput | FireHistoryWhereUniqueInput[]
  }

  export type VehicleUncheckedCreateNestedManyWithoutIncidentsInput = {
    create?: XOR<VehicleCreateWithoutIncidentsInput, VehicleUncheckedCreateWithoutIncidentsInput> | VehicleCreateWithoutIncidentsInput[] | VehicleUncheckedCreateWithoutIncidentsInput[]
    connectOrCreate?: VehicleCreateOrConnectWithoutIncidentsInput | VehicleCreateOrConnectWithoutIncidentsInput[]
    connect?: VehicleWhereUniqueInput | VehicleWhereUniqueInput[]
  }

  export type ReportUncheckedCreateNestedManyWithoutFireIncidentInput = {
    create?: XOR<ReportCreateWithoutFireIncidentInput, ReportUncheckedCreateWithoutFireIncidentInput> | ReportCreateWithoutFireIncidentInput[] | ReportUncheckedCreateWithoutFireIncidentInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutFireIncidentInput | ReportCreateOrConnectWithoutFireIncidentInput[]
    createMany?: ReportCreateManyFireIncidentInputEnvelope
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
  }

  export type FireHistoryUncheckedCreateNestedManyWithoutFireIncidentInput = {
    create?: XOR<FireHistoryCreateWithoutFireIncidentInput, FireHistoryUncheckedCreateWithoutFireIncidentInput> | FireHistoryCreateWithoutFireIncidentInput[] | FireHistoryUncheckedCreateWithoutFireIncidentInput[]
    connectOrCreate?: FireHistoryCreateOrConnectWithoutFireIncidentInput | FireHistoryCreateOrConnectWithoutFireIncidentInput[]
    createMany?: FireHistoryCreateManyFireIncidentInputEnvelope
    connect?: FireHistoryWhereUniqueInput | FireHistoryWhereUniqueInput[]
  }

  export type EnumIncidentStatusFieldUpdateOperationsInput = {
    set?: $Enums.IncidentStatus
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type UserUpdateOneRequiredWithoutReportedFiresNestedInput = {
    create?: XOR<UserCreateWithoutReportedFiresInput, UserUncheckedCreateWithoutReportedFiresInput>
    connectOrCreate?: UserCreateOrConnectWithoutReportedFiresInput
    upsert?: UserUpsertWithoutReportedFiresInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutReportedFiresInput, UserUpdateWithoutReportedFiresInput>, UserUncheckedUpdateWithoutReportedFiresInput>
  }

  export type UserUpdateOneRequiredWithoutAssignedFiresNestedInput = {
    create?: XOR<UserCreateWithoutAssignedFiresInput, UserUncheckedCreateWithoutAssignedFiresInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssignedFiresInput
    upsert?: UserUpsertWithoutAssignedFiresInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAssignedFiresInput, UserUpdateWithoutAssignedFiresInput>, UserUncheckedUpdateWithoutAssignedFiresInput>
  }

  export type FireStationUpdateOneRequiredWithoutIncidentsNestedInput = {
    create?: XOR<FireStationCreateWithoutIncidentsInput, FireStationUncheckedCreateWithoutIncidentsInput>
    connectOrCreate?: FireStationCreateOrConnectWithoutIncidentsInput
    upsert?: FireStationUpsertWithoutIncidentsInput
    connect?: FireStationWhereUniqueInput
    update?: XOR<XOR<FireStationUpdateToOneWithWhereWithoutIncidentsInput, FireStationUpdateWithoutIncidentsInput>, FireStationUncheckedUpdateWithoutIncidentsInput>
  }

  export type FireLevelUpdateOneRequiredWithoutIncidentsNestedInput = {
    create?: XOR<FireLevelCreateWithoutIncidentsInput, FireLevelUncheckedCreateWithoutIncidentsInput>
    connectOrCreate?: FireLevelCreateOrConnectWithoutIncidentsInput
    upsert?: FireLevelUpsertWithoutIncidentsInput
    connect?: FireLevelWhereUniqueInput
    update?: XOR<XOR<FireLevelUpdateToOneWithWhereWithoutIncidentsInput, FireLevelUpdateWithoutIncidentsInput>, FireLevelUncheckedUpdateWithoutIncidentsInput>
  }

  export type VehicleUpdateManyWithoutIncidentsNestedInput = {
    create?: XOR<VehicleCreateWithoutIncidentsInput, VehicleUncheckedCreateWithoutIncidentsInput> | VehicleCreateWithoutIncidentsInput[] | VehicleUncheckedCreateWithoutIncidentsInput[]
    connectOrCreate?: VehicleCreateOrConnectWithoutIncidentsInput | VehicleCreateOrConnectWithoutIncidentsInput[]
    upsert?: VehicleUpsertWithWhereUniqueWithoutIncidentsInput | VehicleUpsertWithWhereUniqueWithoutIncidentsInput[]
    set?: VehicleWhereUniqueInput | VehicleWhereUniqueInput[]
    disconnect?: VehicleWhereUniqueInput | VehicleWhereUniqueInput[]
    delete?: VehicleWhereUniqueInput | VehicleWhereUniqueInput[]
    connect?: VehicleWhereUniqueInput | VehicleWhereUniqueInput[]
    update?: VehicleUpdateWithWhereUniqueWithoutIncidentsInput | VehicleUpdateWithWhereUniqueWithoutIncidentsInput[]
    updateMany?: VehicleUpdateManyWithWhereWithoutIncidentsInput | VehicleUpdateManyWithWhereWithoutIncidentsInput[]
    deleteMany?: VehicleScalarWhereInput | VehicleScalarWhereInput[]
  }

  export type ReportUpdateManyWithoutFireIncidentNestedInput = {
    create?: XOR<ReportCreateWithoutFireIncidentInput, ReportUncheckedCreateWithoutFireIncidentInput> | ReportCreateWithoutFireIncidentInput[] | ReportUncheckedCreateWithoutFireIncidentInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutFireIncidentInput | ReportCreateOrConnectWithoutFireIncidentInput[]
    upsert?: ReportUpsertWithWhereUniqueWithoutFireIncidentInput | ReportUpsertWithWhereUniqueWithoutFireIncidentInput[]
    createMany?: ReportCreateManyFireIncidentInputEnvelope
    set?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    disconnect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    delete?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    update?: ReportUpdateWithWhereUniqueWithoutFireIncidentInput | ReportUpdateWithWhereUniqueWithoutFireIncidentInput[]
    updateMany?: ReportUpdateManyWithWhereWithoutFireIncidentInput | ReportUpdateManyWithWhereWithoutFireIncidentInput[]
    deleteMany?: ReportScalarWhereInput | ReportScalarWhereInput[]
  }

  export type FireHistoryUpdateManyWithoutFireIncidentNestedInput = {
    create?: XOR<FireHistoryCreateWithoutFireIncidentInput, FireHistoryUncheckedCreateWithoutFireIncidentInput> | FireHistoryCreateWithoutFireIncidentInput[] | FireHistoryUncheckedCreateWithoutFireIncidentInput[]
    connectOrCreate?: FireHistoryCreateOrConnectWithoutFireIncidentInput | FireHistoryCreateOrConnectWithoutFireIncidentInput[]
    upsert?: FireHistoryUpsertWithWhereUniqueWithoutFireIncidentInput | FireHistoryUpsertWithWhereUniqueWithoutFireIncidentInput[]
    createMany?: FireHistoryCreateManyFireIncidentInputEnvelope
    set?: FireHistoryWhereUniqueInput | FireHistoryWhereUniqueInput[]
    disconnect?: FireHistoryWhereUniqueInput | FireHistoryWhereUniqueInput[]
    delete?: FireHistoryWhereUniqueInput | FireHistoryWhereUniqueInput[]
    connect?: FireHistoryWhereUniqueInput | FireHistoryWhereUniqueInput[]
    update?: FireHistoryUpdateWithWhereUniqueWithoutFireIncidentInput | FireHistoryUpdateWithWhereUniqueWithoutFireIncidentInput[]
    updateMany?: FireHistoryUpdateManyWithWhereWithoutFireIncidentInput | FireHistoryUpdateManyWithWhereWithoutFireIncidentInput[]
    deleteMany?: FireHistoryScalarWhereInput | FireHistoryScalarWhereInput[]
  }

  export type VehicleUncheckedUpdateManyWithoutIncidentsNestedInput = {
    create?: XOR<VehicleCreateWithoutIncidentsInput, VehicleUncheckedCreateWithoutIncidentsInput> | VehicleCreateWithoutIncidentsInput[] | VehicleUncheckedCreateWithoutIncidentsInput[]
    connectOrCreate?: VehicleCreateOrConnectWithoutIncidentsInput | VehicleCreateOrConnectWithoutIncidentsInput[]
    upsert?: VehicleUpsertWithWhereUniqueWithoutIncidentsInput | VehicleUpsertWithWhereUniqueWithoutIncidentsInput[]
    set?: VehicleWhereUniqueInput | VehicleWhereUniqueInput[]
    disconnect?: VehicleWhereUniqueInput | VehicleWhereUniqueInput[]
    delete?: VehicleWhereUniqueInput | VehicleWhereUniqueInput[]
    connect?: VehicleWhereUniqueInput | VehicleWhereUniqueInput[]
    update?: VehicleUpdateWithWhereUniqueWithoutIncidentsInput | VehicleUpdateWithWhereUniqueWithoutIncidentsInput[]
    updateMany?: VehicleUpdateManyWithWhereWithoutIncidentsInput | VehicleUpdateManyWithWhereWithoutIncidentsInput[]
    deleteMany?: VehicleScalarWhereInput | VehicleScalarWhereInput[]
  }

  export type ReportUncheckedUpdateManyWithoutFireIncidentNestedInput = {
    create?: XOR<ReportCreateWithoutFireIncidentInput, ReportUncheckedCreateWithoutFireIncidentInput> | ReportCreateWithoutFireIncidentInput[] | ReportUncheckedCreateWithoutFireIncidentInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutFireIncidentInput | ReportCreateOrConnectWithoutFireIncidentInput[]
    upsert?: ReportUpsertWithWhereUniqueWithoutFireIncidentInput | ReportUpsertWithWhereUniqueWithoutFireIncidentInput[]
    createMany?: ReportCreateManyFireIncidentInputEnvelope
    set?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    disconnect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    delete?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    update?: ReportUpdateWithWhereUniqueWithoutFireIncidentInput | ReportUpdateWithWhereUniqueWithoutFireIncidentInput[]
    updateMany?: ReportUpdateManyWithWhereWithoutFireIncidentInput | ReportUpdateManyWithWhereWithoutFireIncidentInput[]
    deleteMany?: ReportScalarWhereInput | ReportScalarWhereInput[]
  }

  export type FireHistoryUncheckedUpdateManyWithoutFireIncidentNestedInput = {
    create?: XOR<FireHistoryCreateWithoutFireIncidentInput, FireHistoryUncheckedCreateWithoutFireIncidentInput> | FireHistoryCreateWithoutFireIncidentInput[] | FireHistoryUncheckedCreateWithoutFireIncidentInput[]
    connectOrCreate?: FireHistoryCreateOrConnectWithoutFireIncidentInput | FireHistoryCreateOrConnectWithoutFireIncidentInput[]
    upsert?: FireHistoryUpsertWithWhereUniqueWithoutFireIncidentInput | FireHistoryUpsertWithWhereUniqueWithoutFireIncidentInput[]
    createMany?: FireHistoryCreateManyFireIncidentInputEnvelope
    set?: FireHistoryWhereUniqueInput | FireHistoryWhereUniqueInput[]
    disconnect?: FireHistoryWhereUniqueInput | FireHistoryWhereUniqueInput[]
    delete?: FireHistoryWhereUniqueInput | FireHistoryWhereUniqueInput[]
    connect?: FireHistoryWhereUniqueInput | FireHistoryWhereUniqueInput[]
    update?: FireHistoryUpdateWithWhereUniqueWithoutFireIncidentInput | FireHistoryUpdateWithWhereUniqueWithoutFireIncidentInput[]
    updateMany?: FireHistoryUpdateManyWithWhereWithoutFireIncidentInput | FireHistoryUpdateManyWithWhereWithoutFireIncidentInput[]
    deleteMany?: FireHistoryScalarWhereInput | FireHistoryScalarWhereInput[]
  }

  export type FireLevelCreateNestedOneWithoutAddressLevelsInput = {
    create?: XOR<FireLevelCreateWithoutAddressLevelsInput, FireLevelUncheckedCreateWithoutAddressLevelsInput>
    connectOrCreate?: FireLevelCreateOrConnectWithoutAddressLevelsInput
    connect?: FireLevelWhereUniqueInput
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type FireLevelUpdateOneRequiredWithoutAddressLevelsNestedInput = {
    create?: XOR<FireLevelCreateWithoutAddressLevelsInput, FireLevelUncheckedCreateWithoutAddressLevelsInput>
    connectOrCreate?: FireLevelCreateOrConnectWithoutAddressLevelsInput
    upsert?: FireLevelUpsertWithoutAddressLevelsInput
    connect?: FireLevelWhereUniqueInput
    update?: XOR<XOR<FireLevelUpdateToOneWithWhereWithoutAddressLevelsInput, FireLevelUpdateWithoutAddressLevelsInput>, FireLevelUncheckedUpdateWithoutAddressLevelsInput>
  }

  export type UserCreateNestedOneWithoutReportsInput = {
    create?: XOR<UserCreateWithoutReportsInput, UserUncheckedCreateWithoutReportsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReportsInput
    connect?: UserWhereUniqueInput
  }

  export type FireIncidentCreateNestedOneWithoutReportsInput = {
    create?: XOR<FireIncidentCreateWithoutReportsInput, FireIncidentUncheckedCreateWithoutReportsInput>
    connectOrCreate?: FireIncidentCreateOrConnectWithoutReportsInput
    connect?: FireIncidentWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutReportsNestedInput = {
    create?: XOR<UserCreateWithoutReportsInput, UserUncheckedCreateWithoutReportsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReportsInput
    upsert?: UserUpsertWithoutReportsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutReportsInput, UserUpdateWithoutReportsInput>, UserUncheckedUpdateWithoutReportsInput>
  }

  export type FireIncidentUpdateOneRequiredWithoutReportsNestedInput = {
    create?: XOR<FireIncidentCreateWithoutReportsInput, FireIncidentUncheckedCreateWithoutReportsInput>
    connectOrCreate?: FireIncidentCreateOrConnectWithoutReportsInput
    upsert?: FireIncidentUpsertWithoutReportsInput
    connect?: FireIncidentWhereUniqueInput
    update?: XOR<XOR<FireIncidentUpdateToOneWithWhereWithoutReportsInput, FireIncidentUpdateWithoutReportsInput>, FireIncidentUncheckedUpdateWithoutReportsInput>
  }

  export type UserCreateNestedOneWithoutActivitiesInput = {
    create?: XOR<UserCreateWithoutActivitiesInput, UserUncheckedCreateWithoutActivitiesInput>
    connectOrCreate?: UserCreateOrConnectWithoutActivitiesInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutActivitiesNestedInput = {
    create?: XOR<UserCreateWithoutActivitiesInput, UserUncheckedCreateWithoutActivitiesInput>
    connectOrCreate?: UserCreateOrConnectWithoutActivitiesInput
    upsert?: UserUpsertWithoutActivitiesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutActivitiesInput, UserUpdateWithoutActivitiesInput>, UserUncheckedUpdateWithoutActivitiesInput>
  }

  export type FireIncidentCreateNestedOneWithoutHistoryInput = {
    create?: XOR<FireIncidentCreateWithoutHistoryInput, FireIncidentUncheckedCreateWithoutHistoryInput>
    connectOrCreate?: FireIncidentCreateOrConnectWithoutHistoryInput
    connect?: FireIncidentWhereUniqueInput
  }

  export type FireIncidentUpdateOneRequiredWithoutHistoryNestedInput = {
    create?: XOR<FireIncidentCreateWithoutHistoryInput, FireIncidentUncheckedCreateWithoutHistoryInput>
    connectOrCreate?: FireIncidentCreateOrConnectWithoutHistoryInput
    upsert?: FireIncidentUpsertWithoutHistoryInput
    connect?: FireIncidentWhereUniqueInput
    update?: XOR<XOR<FireIncidentUpdateToOneWithWhereWithoutHistoryInput, FireIncidentUpdateWithoutHistoryInput>, FireIncidentUncheckedUpdateWithoutHistoryInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type NestedEnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedEnumVehicleTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.VehicleType | EnumVehicleTypeFieldRefInput<$PrismaModel>
    in?: $Enums.VehicleType[] | ListEnumVehicleTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.VehicleType[] | ListEnumVehicleTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumVehicleTypeFilter<$PrismaModel> | $Enums.VehicleType
  }

  export type NestedEnumVehicleStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.VehicleStatus | EnumVehicleStatusFieldRefInput<$PrismaModel>
    in?: $Enums.VehicleStatus[] | ListEnumVehicleStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.VehicleStatus[] | ListEnumVehicleStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumVehicleStatusFilter<$PrismaModel> | $Enums.VehicleStatus
  }

  export type NestedEnumVehicleTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.VehicleType | EnumVehicleTypeFieldRefInput<$PrismaModel>
    in?: $Enums.VehicleType[] | ListEnumVehicleTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.VehicleType[] | ListEnumVehicleTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumVehicleTypeWithAggregatesFilter<$PrismaModel> | $Enums.VehicleType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumVehicleTypeFilter<$PrismaModel>
    _max?: NestedEnumVehicleTypeFilter<$PrismaModel>
  }

  export type NestedEnumVehicleStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.VehicleStatus | EnumVehicleStatusFieldRefInput<$PrismaModel>
    in?: $Enums.VehicleStatus[] | ListEnumVehicleStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.VehicleStatus[] | ListEnumVehicleStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumVehicleStatusWithAggregatesFilter<$PrismaModel> | $Enums.VehicleStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumVehicleStatusFilter<$PrismaModel>
    _max?: NestedEnumVehicleStatusFilter<$PrismaModel>
  }

  export type NestedEnumIncidentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.IncidentStatus | EnumIncidentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.IncidentStatus[] | ListEnumIncidentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.IncidentStatus[] | ListEnumIncidentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumIncidentStatusFilter<$PrismaModel> | $Enums.IncidentStatus
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedEnumIncidentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.IncidentStatus | EnumIncidentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.IncidentStatus[] | ListEnumIncidentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.IncidentStatus[] | ListEnumIncidentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumIncidentStatusWithAggregatesFilter<$PrismaModel> | $Enums.IncidentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumIncidentStatusFilter<$PrismaModel>
    _max?: NestedEnumIncidentStatusFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type UserCreateWithoutSystemUpdatesInput = {
    username: string
    password: string
    role: $Enums.UserRole
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    fireStation?: FireStationCreateNestedOneWithoutUsersInput
    reportedFires?: FireIncidentCreateNestedManyWithoutReportedByInput
    assignedFires?: FireIncidentCreateNestedManyWithoutAssignedToInput
    reports?: ReportCreateNestedManyWithoutUserInput
    activities?: UserActivityCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSystemUpdatesInput = {
    id?: number
    username: string
    password: string
    role: $Enums.UserRole
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    fireStationId?: number | null
    reportedFires?: FireIncidentUncheckedCreateNestedManyWithoutReportedByInput
    assignedFires?: FireIncidentUncheckedCreateNestedManyWithoutAssignedToInput
    reports?: ReportUncheckedCreateNestedManyWithoutUserInput
    activities?: UserActivityUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSystemUpdatesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSystemUpdatesInput, UserUncheckedCreateWithoutSystemUpdatesInput>
  }

  export type UserUpsertWithoutSystemUpdatesInput = {
    update: XOR<UserUpdateWithoutSystemUpdatesInput, UserUncheckedUpdateWithoutSystemUpdatesInput>
    create: XOR<UserCreateWithoutSystemUpdatesInput, UserUncheckedCreateWithoutSystemUpdatesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSystemUpdatesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSystemUpdatesInput, UserUncheckedUpdateWithoutSystemUpdatesInput>
  }

  export type UserUpdateWithoutSystemUpdatesInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fireStation?: FireStationUpdateOneWithoutUsersNestedInput
    reportedFires?: FireIncidentUpdateManyWithoutReportedByNestedInput
    assignedFires?: FireIncidentUpdateManyWithoutAssignedToNestedInput
    reports?: ReportUpdateManyWithoutUserNestedInput
    activities?: UserActivityUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSystemUpdatesInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fireStationId?: NullableIntFieldUpdateOperationsInput | number | null
    reportedFires?: FireIncidentUncheckedUpdateManyWithoutReportedByNestedInput
    assignedFires?: FireIncidentUncheckedUpdateManyWithoutAssignedToNestedInput
    reports?: ReportUncheckedUpdateManyWithoutUserNestedInput
    activities?: UserActivityUncheckedUpdateManyWithoutUserNestedInput
  }

  export type FireStationCreateWithoutUsersInput = {
    name: string
    address: string
    latitude: number
    longitude: number
    phoneNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    vehicles?: VehicleCreateNestedManyWithoutFireStationInput
    incidents?: FireIncidentCreateNestedManyWithoutFireStationInput
  }

  export type FireStationUncheckedCreateWithoutUsersInput = {
    id?: number
    name: string
    address: string
    latitude: number
    longitude: number
    phoneNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    vehicles?: VehicleUncheckedCreateNestedManyWithoutFireStationInput
    incidents?: FireIncidentUncheckedCreateNestedManyWithoutFireStationInput
  }

  export type FireStationCreateOrConnectWithoutUsersInput = {
    where: FireStationWhereUniqueInput
    create: XOR<FireStationCreateWithoutUsersInput, FireStationUncheckedCreateWithoutUsersInput>
  }

  export type FireIncidentCreateWithoutReportedByInput = {
    latitude: number
    longitude: number
    status?: $Enums.IncidentStatus
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    resolvedAt?: Date | string | null
    address?: string | null
    assignedTo: UserCreateNestedOneWithoutAssignedFiresInput
    fireStation: FireStationCreateNestedOneWithoutIncidentsInput
    fireLevel: FireLevelCreateNestedOneWithoutIncidentsInput
    vehicles?: VehicleCreateNestedManyWithoutIncidentsInput
    reports?: ReportCreateNestedManyWithoutFireIncidentInput
    history?: FireHistoryCreateNestedManyWithoutFireIncidentInput
  }

  export type FireIncidentUncheckedCreateWithoutReportedByInput = {
    id?: number
    latitude: number
    longitude: number
    status?: $Enums.IncidentStatus
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    resolvedAt?: Date | string | null
    address?: string | null
    assignedToId: number
    fireStationId: number
    fireLevelId: number
    vehicles?: VehicleUncheckedCreateNestedManyWithoutIncidentsInput
    reports?: ReportUncheckedCreateNestedManyWithoutFireIncidentInput
    history?: FireHistoryUncheckedCreateNestedManyWithoutFireIncidentInput
  }

  export type FireIncidentCreateOrConnectWithoutReportedByInput = {
    where: FireIncidentWhereUniqueInput
    create: XOR<FireIncidentCreateWithoutReportedByInput, FireIncidentUncheckedCreateWithoutReportedByInput>
  }

  export type FireIncidentCreateManyReportedByInputEnvelope = {
    data: FireIncidentCreateManyReportedByInput | FireIncidentCreateManyReportedByInput[]
    skipDuplicates?: boolean
  }

  export type FireIncidentCreateWithoutAssignedToInput = {
    latitude: number
    longitude: number
    status?: $Enums.IncidentStatus
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    resolvedAt?: Date | string | null
    address?: string | null
    reportedBy: UserCreateNestedOneWithoutReportedFiresInput
    fireStation: FireStationCreateNestedOneWithoutIncidentsInput
    fireLevel: FireLevelCreateNestedOneWithoutIncidentsInput
    vehicles?: VehicleCreateNestedManyWithoutIncidentsInput
    reports?: ReportCreateNestedManyWithoutFireIncidentInput
    history?: FireHistoryCreateNestedManyWithoutFireIncidentInput
  }

  export type FireIncidentUncheckedCreateWithoutAssignedToInput = {
    id?: number
    latitude: number
    longitude: number
    status?: $Enums.IncidentStatus
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    resolvedAt?: Date | string | null
    address?: string | null
    reportedById: number
    fireStationId: number
    fireLevelId: number
    vehicles?: VehicleUncheckedCreateNestedManyWithoutIncidentsInput
    reports?: ReportUncheckedCreateNestedManyWithoutFireIncidentInput
    history?: FireHistoryUncheckedCreateNestedManyWithoutFireIncidentInput
  }

  export type FireIncidentCreateOrConnectWithoutAssignedToInput = {
    where: FireIncidentWhereUniqueInput
    create: XOR<FireIncidentCreateWithoutAssignedToInput, FireIncidentUncheckedCreateWithoutAssignedToInput>
  }

  export type FireIncidentCreateManyAssignedToInputEnvelope = {
    data: FireIncidentCreateManyAssignedToInput | FireIncidentCreateManyAssignedToInput[]
    skipDuplicates?: boolean
  }

  export type ReportCreateWithoutUserInput = {
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    fireIncident: FireIncidentCreateNestedOneWithoutReportsInput
  }

  export type ReportUncheckedCreateWithoutUserInput = {
    id?: number
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    fireIncidentId: number
  }

  export type ReportCreateOrConnectWithoutUserInput = {
    where: ReportWhereUniqueInput
    create: XOR<ReportCreateWithoutUserInput, ReportUncheckedCreateWithoutUserInput>
  }

  export type ReportCreateManyUserInputEnvelope = {
    data: ReportCreateManyUserInput | ReportCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserActivityCreateWithoutUserInput = {
    action: string
    details?: string | null
    timestamp?: Date | string
    ipAddress?: string | null
    userAgent?: string | null
  }

  export type UserActivityUncheckedCreateWithoutUserInput = {
    id?: number
    action: string
    details?: string | null
    timestamp?: Date | string
    ipAddress?: string | null
    userAgent?: string | null
  }

  export type UserActivityCreateOrConnectWithoutUserInput = {
    where: UserActivityWhereUniqueInput
    create: XOR<UserActivityCreateWithoutUserInput, UserActivityUncheckedCreateWithoutUserInput>
  }

  export type UserActivityCreateManyUserInputEnvelope = {
    data: UserActivityCreateManyUserInput | UserActivityCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type SystemSettingsCreateWithoutUpdatedByInput = {
    defaultCityName?: string
    defaultLatitude?: number
    defaultLongitude?: number
    defaultZoom?: number
    updatedAt?: Date | string
  }

  export type SystemSettingsUncheckedCreateWithoutUpdatedByInput = {
    id?: number
    defaultCityName?: string
    defaultLatitude?: number
    defaultLongitude?: number
    defaultZoom?: number
    updatedAt?: Date | string
  }

  export type SystemSettingsCreateOrConnectWithoutUpdatedByInput = {
    where: SystemSettingsWhereUniqueInput
    create: XOR<SystemSettingsCreateWithoutUpdatedByInput, SystemSettingsUncheckedCreateWithoutUpdatedByInput>
  }

  export type SystemSettingsCreateManyUpdatedByInputEnvelope = {
    data: SystemSettingsCreateManyUpdatedByInput | SystemSettingsCreateManyUpdatedByInput[]
    skipDuplicates?: boolean
  }

  export type FireStationUpsertWithoutUsersInput = {
    update: XOR<FireStationUpdateWithoutUsersInput, FireStationUncheckedUpdateWithoutUsersInput>
    create: XOR<FireStationCreateWithoutUsersInput, FireStationUncheckedCreateWithoutUsersInput>
    where?: FireStationWhereInput
  }

  export type FireStationUpdateToOneWithWhereWithoutUsersInput = {
    where?: FireStationWhereInput
    data: XOR<FireStationUpdateWithoutUsersInput, FireStationUncheckedUpdateWithoutUsersInput>
  }

  export type FireStationUpdateWithoutUsersInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    vehicles?: VehicleUpdateManyWithoutFireStationNestedInput
    incidents?: FireIncidentUpdateManyWithoutFireStationNestedInput
  }

  export type FireStationUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    vehicles?: VehicleUncheckedUpdateManyWithoutFireStationNestedInput
    incidents?: FireIncidentUncheckedUpdateManyWithoutFireStationNestedInput
  }

  export type FireIncidentUpsertWithWhereUniqueWithoutReportedByInput = {
    where: FireIncidentWhereUniqueInput
    update: XOR<FireIncidentUpdateWithoutReportedByInput, FireIncidentUncheckedUpdateWithoutReportedByInput>
    create: XOR<FireIncidentCreateWithoutReportedByInput, FireIncidentUncheckedCreateWithoutReportedByInput>
  }

  export type FireIncidentUpdateWithWhereUniqueWithoutReportedByInput = {
    where: FireIncidentWhereUniqueInput
    data: XOR<FireIncidentUpdateWithoutReportedByInput, FireIncidentUncheckedUpdateWithoutReportedByInput>
  }

  export type FireIncidentUpdateManyWithWhereWithoutReportedByInput = {
    where: FireIncidentScalarWhereInput
    data: XOR<FireIncidentUpdateManyMutationInput, FireIncidentUncheckedUpdateManyWithoutReportedByInput>
  }

  export type FireIncidentScalarWhereInput = {
    AND?: FireIncidentScalarWhereInput | FireIncidentScalarWhereInput[]
    OR?: FireIncidentScalarWhereInput[]
    NOT?: FireIncidentScalarWhereInput | FireIncidentScalarWhereInput[]
    id?: IntFilter<"FireIncident"> | number
    latitude?: FloatFilter<"FireIncident"> | number
    longitude?: FloatFilter<"FireIncident"> | number
    status?: EnumIncidentStatusFilter<"FireIncident"> | $Enums.IncidentStatus
    description?: StringNullableFilter<"FireIncident"> | string | null
    createdAt?: DateTimeFilter<"FireIncident"> | Date | string
    updatedAt?: DateTimeFilter<"FireIncident"> | Date | string
    resolvedAt?: DateTimeNullableFilter<"FireIncident"> | Date | string | null
    address?: StringNullableFilter<"FireIncident"> | string | null
    reportedById?: IntFilter<"FireIncident"> | number
    assignedToId?: IntFilter<"FireIncident"> | number
    fireStationId?: IntFilter<"FireIncident"> | number
    fireLevelId?: IntFilter<"FireIncident"> | number
  }

  export type FireIncidentUpsertWithWhereUniqueWithoutAssignedToInput = {
    where: FireIncidentWhereUniqueInput
    update: XOR<FireIncidentUpdateWithoutAssignedToInput, FireIncidentUncheckedUpdateWithoutAssignedToInput>
    create: XOR<FireIncidentCreateWithoutAssignedToInput, FireIncidentUncheckedCreateWithoutAssignedToInput>
  }

  export type FireIncidentUpdateWithWhereUniqueWithoutAssignedToInput = {
    where: FireIncidentWhereUniqueInput
    data: XOR<FireIncidentUpdateWithoutAssignedToInput, FireIncidentUncheckedUpdateWithoutAssignedToInput>
  }

  export type FireIncidentUpdateManyWithWhereWithoutAssignedToInput = {
    where: FireIncidentScalarWhereInput
    data: XOR<FireIncidentUpdateManyMutationInput, FireIncidentUncheckedUpdateManyWithoutAssignedToInput>
  }

  export type ReportUpsertWithWhereUniqueWithoutUserInput = {
    where: ReportWhereUniqueInput
    update: XOR<ReportUpdateWithoutUserInput, ReportUncheckedUpdateWithoutUserInput>
    create: XOR<ReportCreateWithoutUserInput, ReportUncheckedCreateWithoutUserInput>
  }

  export type ReportUpdateWithWhereUniqueWithoutUserInput = {
    where: ReportWhereUniqueInput
    data: XOR<ReportUpdateWithoutUserInput, ReportUncheckedUpdateWithoutUserInput>
  }

  export type ReportUpdateManyWithWhereWithoutUserInput = {
    where: ReportScalarWhereInput
    data: XOR<ReportUpdateManyMutationInput, ReportUncheckedUpdateManyWithoutUserInput>
  }

  export type ReportScalarWhereInput = {
    AND?: ReportScalarWhereInput | ReportScalarWhereInput[]
    OR?: ReportScalarWhereInput[]
    NOT?: ReportScalarWhereInput | ReportScalarWhereInput[]
    id?: IntFilter<"Report"> | number
    content?: StringFilter<"Report"> | string
    createdAt?: DateTimeFilter<"Report"> | Date | string
    updatedAt?: DateTimeFilter<"Report"> | Date | string
    userId?: IntFilter<"Report"> | number
    fireIncidentId?: IntFilter<"Report"> | number
  }

  export type UserActivityUpsertWithWhereUniqueWithoutUserInput = {
    where: UserActivityWhereUniqueInput
    update: XOR<UserActivityUpdateWithoutUserInput, UserActivityUncheckedUpdateWithoutUserInput>
    create: XOR<UserActivityCreateWithoutUserInput, UserActivityUncheckedCreateWithoutUserInput>
  }

  export type UserActivityUpdateWithWhereUniqueWithoutUserInput = {
    where: UserActivityWhereUniqueInput
    data: XOR<UserActivityUpdateWithoutUserInput, UserActivityUncheckedUpdateWithoutUserInput>
  }

  export type UserActivityUpdateManyWithWhereWithoutUserInput = {
    where: UserActivityScalarWhereInput
    data: XOR<UserActivityUpdateManyMutationInput, UserActivityUncheckedUpdateManyWithoutUserInput>
  }

  export type UserActivityScalarWhereInput = {
    AND?: UserActivityScalarWhereInput | UserActivityScalarWhereInput[]
    OR?: UserActivityScalarWhereInput[]
    NOT?: UserActivityScalarWhereInput | UserActivityScalarWhereInput[]
    id?: IntFilter<"UserActivity"> | number
    userId?: IntFilter<"UserActivity"> | number
    action?: StringFilter<"UserActivity"> | string
    details?: StringNullableFilter<"UserActivity"> | string | null
    timestamp?: DateTimeFilter<"UserActivity"> | Date | string
    ipAddress?: StringNullableFilter<"UserActivity"> | string | null
    userAgent?: StringNullableFilter<"UserActivity"> | string | null
  }

  export type SystemSettingsUpsertWithWhereUniqueWithoutUpdatedByInput = {
    where: SystemSettingsWhereUniqueInput
    update: XOR<SystemSettingsUpdateWithoutUpdatedByInput, SystemSettingsUncheckedUpdateWithoutUpdatedByInput>
    create: XOR<SystemSettingsCreateWithoutUpdatedByInput, SystemSettingsUncheckedCreateWithoutUpdatedByInput>
  }

  export type SystemSettingsUpdateWithWhereUniqueWithoutUpdatedByInput = {
    where: SystemSettingsWhereUniqueInput
    data: XOR<SystemSettingsUpdateWithoutUpdatedByInput, SystemSettingsUncheckedUpdateWithoutUpdatedByInput>
  }

  export type SystemSettingsUpdateManyWithWhereWithoutUpdatedByInput = {
    where: SystemSettingsScalarWhereInput
    data: XOR<SystemSettingsUpdateManyMutationInput, SystemSettingsUncheckedUpdateManyWithoutUpdatedByInput>
  }

  export type SystemSettingsScalarWhereInput = {
    AND?: SystemSettingsScalarWhereInput | SystemSettingsScalarWhereInput[]
    OR?: SystemSettingsScalarWhereInput[]
    NOT?: SystemSettingsScalarWhereInput | SystemSettingsScalarWhereInput[]
    id?: IntFilter<"SystemSettings"> | number
    defaultCityName?: StringFilter<"SystemSettings"> | string
    defaultLatitude?: FloatFilter<"SystemSettings"> | number
    defaultLongitude?: FloatFilter<"SystemSettings"> | number
    defaultZoom?: IntFilter<"SystemSettings"> | number
    updatedAt?: DateTimeFilter<"SystemSettings"> | Date | string
    updatedById?: IntNullableFilter<"SystemSettings"> | number | null
  }

  export type UserCreateWithoutFireStationInput = {
    username: string
    password: string
    role: $Enums.UserRole
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    reportedFires?: FireIncidentCreateNestedManyWithoutReportedByInput
    assignedFires?: FireIncidentCreateNestedManyWithoutAssignedToInput
    reports?: ReportCreateNestedManyWithoutUserInput
    activities?: UserActivityCreateNestedManyWithoutUserInput
    systemUpdates?: SystemSettingsCreateNestedManyWithoutUpdatedByInput
  }

  export type UserUncheckedCreateWithoutFireStationInput = {
    id?: number
    username: string
    password: string
    role: $Enums.UserRole
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    reportedFires?: FireIncidentUncheckedCreateNestedManyWithoutReportedByInput
    assignedFires?: FireIncidentUncheckedCreateNestedManyWithoutAssignedToInput
    reports?: ReportUncheckedCreateNestedManyWithoutUserInput
    activities?: UserActivityUncheckedCreateNestedManyWithoutUserInput
    systemUpdates?: SystemSettingsUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type UserCreateOrConnectWithoutFireStationInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFireStationInput, UserUncheckedCreateWithoutFireStationInput>
  }

  export type UserCreateManyFireStationInputEnvelope = {
    data: UserCreateManyFireStationInput | UserCreateManyFireStationInput[]
    skipDuplicates?: boolean
  }

  export type VehicleCreateWithoutFireStationInput = {
    model: string
    type: $Enums.VehicleType
    status?: $Enums.VehicleStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    incidents?: FireIncidentCreateNestedManyWithoutVehiclesInput
  }

  export type VehicleUncheckedCreateWithoutFireStationInput = {
    id?: number
    model: string
    type: $Enums.VehicleType
    status?: $Enums.VehicleStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    incidents?: FireIncidentUncheckedCreateNestedManyWithoutVehiclesInput
  }

  export type VehicleCreateOrConnectWithoutFireStationInput = {
    where: VehicleWhereUniqueInput
    create: XOR<VehicleCreateWithoutFireStationInput, VehicleUncheckedCreateWithoutFireStationInput>
  }

  export type VehicleCreateManyFireStationInputEnvelope = {
    data: VehicleCreateManyFireStationInput | VehicleCreateManyFireStationInput[]
    skipDuplicates?: boolean
  }

  export type FireIncidentCreateWithoutFireStationInput = {
    latitude: number
    longitude: number
    status?: $Enums.IncidentStatus
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    resolvedAt?: Date | string | null
    address?: string | null
    reportedBy: UserCreateNestedOneWithoutReportedFiresInput
    assignedTo: UserCreateNestedOneWithoutAssignedFiresInput
    fireLevel: FireLevelCreateNestedOneWithoutIncidentsInput
    vehicles?: VehicleCreateNestedManyWithoutIncidentsInput
    reports?: ReportCreateNestedManyWithoutFireIncidentInput
    history?: FireHistoryCreateNestedManyWithoutFireIncidentInput
  }

  export type FireIncidentUncheckedCreateWithoutFireStationInput = {
    id?: number
    latitude: number
    longitude: number
    status?: $Enums.IncidentStatus
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    resolvedAt?: Date | string | null
    address?: string | null
    reportedById: number
    assignedToId: number
    fireLevelId: number
    vehicles?: VehicleUncheckedCreateNestedManyWithoutIncidentsInput
    reports?: ReportUncheckedCreateNestedManyWithoutFireIncidentInput
    history?: FireHistoryUncheckedCreateNestedManyWithoutFireIncidentInput
  }

  export type FireIncidentCreateOrConnectWithoutFireStationInput = {
    where: FireIncidentWhereUniqueInput
    create: XOR<FireIncidentCreateWithoutFireStationInput, FireIncidentUncheckedCreateWithoutFireStationInput>
  }

  export type FireIncidentCreateManyFireStationInputEnvelope = {
    data: FireIncidentCreateManyFireStationInput | FireIncidentCreateManyFireStationInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithWhereUniqueWithoutFireStationInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutFireStationInput, UserUncheckedUpdateWithoutFireStationInput>
    create: XOR<UserCreateWithoutFireStationInput, UserUncheckedCreateWithoutFireStationInput>
  }

  export type UserUpdateWithWhereUniqueWithoutFireStationInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutFireStationInput, UserUncheckedUpdateWithoutFireStationInput>
  }

  export type UserUpdateManyWithWhereWithoutFireStationInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutFireStationInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: IntFilter<"User"> | number
    username?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    name?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    fireStationId?: IntNullableFilter<"User"> | number | null
  }

  export type VehicleUpsertWithWhereUniqueWithoutFireStationInput = {
    where: VehicleWhereUniqueInput
    update: XOR<VehicleUpdateWithoutFireStationInput, VehicleUncheckedUpdateWithoutFireStationInput>
    create: XOR<VehicleCreateWithoutFireStationInput, VehicleUncheckedCreateWithoutFireStationInput>
  }

  export type VehicleUpdateWithWhereUniqueWithoutFireStationInput = {
    where: VehicleWhereUniqueInput
    data: XOR<VehicleUpdateWithoutFireStationInput, VehicleUncheckedUpdateWithoutFireStationInput>
  }

  export type VehicleUpdateManyWithWhereWithoutFireStationInput = {
    where: VehicleScalarWhereInput
    data: XOR<VehicleUpdateManyMutationInput, VehicleUncheckedUpdateManyWithoutFireStationInput>
  }

  export type VehicleScalarWhereInput = {
    AND?: VehicleScalarWhereInput | VehicleScalarWhereInput[]
    OR?: VehicleScalarWhereInput[]
    NOT?: VehicleScalarWhereInput | VehicleScalarWhereInput[]
    id?: IntFilter<"Vehicle"> | number
    model?: StringFilter<"Vehicle"> | string
    type?: EnumVehicleTypeFilter<"Vehicle"> | $Enums.VehicleType
    status?: EnumVehicleStatusFilter<"Vehicle"> | $Enums.VehicleStatus
    createdAt?: DateTimeFilter<"Vehicle"> | Date | string
    updatedAt?: DateTimeFilter<"Vehicle"> | Date | string
    fireStationId?: IntFilter<"Vehicle"> | number
  }

  export type FireIncidentUpsertWithWhereUniqueWithoutFireStationInput = {
    where: FireIncidentWhereUniqueInput
    update: XOR<FireIncidentUpdateWithoutFireStationInput, FireIncidentUncheckedUpdateWithoutFireStationInput>
    create: XOR<FireIncidentCreateWithoutFireStationInput, FireIncidentUncheckedCreateWithoutFireStationInput>
  }

  export type FireIncidentUpdateWithWhereUniqueWithoutFireStationInput = {
    where: FireIncidentWhereUniqueInput
    data: XOR<FireIncidentUpdateWithoutFireStationInput, FireIncidentUncheckedUpdateWithoutFireStationInput>
  }

  export type FireIncidentUpdateManyWithWhereWithoutFireStationInput = {
    where: FireIncidentScalarWhereInput
    data: XOR<FireIncidentUpdateManyMutationInput, FireIncidentUncheckedUpdateManyWithoutFireStationInput>
  }

  export type FireStationCreateWithoutVehiclesInput = {
    name: string
    address: string
    latitude: number
    longitude: number
    phoneNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutFireStationInput
    incidents?: FireIncidentCreateNestedManyWithoutFireStationInput
  }

  export type FireStationUncheckedCreateWithoutVehiclesInput = {
    id?: number
    name: string
    address: string
    latitude: number
    longitude: number
    phoneNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutFireStationInput
    incidents?: FireIncidentUncheckedCreateNestedManyWithoutFireStationInput
  }

  export type FireStationCreateOrConnectWithoutVehiclesInput = {
    where: FireStationWhereUniqueInput
    create: XOR<FireStationCreateWithoutVehiclesInput, FireStationUncheckedCreateWithoutVehiclesInput>
  }

  export type FireIncidentCreateWithoutVehiclesInput = {
    latitude: number
    longitude: number
    status?: $Enums.IncidentStatus
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    resolvedAt?: Date | string | null
    address?: string | null
    reportedBy: UserCreateNestedOneWithoutReportedFiresInput
    assignedTo: UserCreateNestedOneWithoutAssignedFiresInput
    fireStation: FireStationCreateNestedOneWithoutIncidentsInput
    fireLevel: FireLevelCreateNestedOneWithoutIncidentsInput
    reports?: ReportCreateNestedManyWithoutFireIncidentInput
    history?: FireHistoryCreateNestedManyWithoutFireIncidentInput
  }

  export type FireIncidentUncheckedCreateWithoutVehiclesInput = {
    id?: number
    latitude: number
    longitude: number
    status?: $Enums.IncidentStatus
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    resolvedAt?: Date | string | null
    address?: string | null
    reportedById: number
    assignedToId: number
    fireStationId: number
    fireLevelId: number
    reports?: ReportUncheckedCreateNestedManyWithoutFireIncidentInput
    history?: FireHistoryUncheckedCreateNestedManyWithoutFireIncidentInput
  }

  export type FireIncidentCreateOrConnectWithoutVehiclesInput = {
    where: FireIncidentWhereUniqueInput
    create: XOR<FireIncidentCreateWithoutVehiclesInput, FireIncidentUncheckedCreateWithoutVehiclesInput>
  }

  export type FireStationUpsertWithoutVehiclesInput = {
    update: XOR<FireStationUpdateWithoutVehiclesInput, FireStationUncheckedUpdateWithoutVehiclesInput>
    create: XOR<FireStationCreateWithoutVehiclesInput, FireStationUncheckedCreateWithoutVehiclesInput>
    where?: FireStationWhereInput
  }

  export type FireStationUpdateToOneWithWhereWithoutVehiclesInput = {
    where?: FireStationWhereInput
    data: XOR<FireStationUpdateWithoutVehiclesInput, FireStationUncheckedUpdateWithoutVehiclesInput>
  }

  export type FireStationUpdateWithoutVehiclesInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutFireStationNestedInput
    incidents?: FireIncidentUpdateManyWithoutFireStationNestedInput
  }

  export type FireStationUncheckedUpdateWithoutVehiclesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutFireStationNestedInput
    incidents?: FireIncidentUncheckedUpdateManyWithoutFireStationNestedInput
  }

  export type FireIncidentUpsertWithWhereUniqueWithoutVehiclesInput = {
    where: FireIncidentWhereUniqueInput
    update: XOR<FireIncidentUpdateWithoutVehiclesInput, FireIncidentUncheckedUpdateWithoutVehiclesInput>
    create: XOR<FireIncidentCreateWithoutVehiclesInput, FireIncidentUncheckedCreateWithoutVehiclesInput>
  }

  export type FireIncidentUpdateWithWhereUniqueWithoutVehiclesInput = {
    where: FireIncidentWhereUniqueInput
    data: XOR<FireIncidentUpdateWithoutVehiclesInput, FireIncidentUncheckedUpdateWithoutVehiclesInput>
  }

  export type FireIncidentUpdateManyWithWhereWithoutVehiclesInput = {
    where: FireIncidentScalarWhereInput
    data: XOR<FireIncidentUpdateManyMutationInput, FireIncidentUncheckedUpdateManyWithoutVehiclesInput>
  }

  export type FireIncidentCreateWithoutFireLevelInput = {
    latitude: number
    longitude: number
    status?: $Enums.IncidentStatus
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    resolvedAt?: Date | string | null
    address?: string | null
    reportedBy: UserCreateNestedOneWithoutReportedFiresInput
    assignedTo: UserCreateNestedOneWithoutAssignedFiresInput
    fireStation: FireStationCreateNestedOneWithoutIncidentsInput
    vehicles?: VehicleCreateNestedManyWithoutIncidentsInput
    reports?: ReportCreateNestedManyWithoutFireIncidentInput
    history?: FireHistoryCreateNestedManyWithoutFireIncidentInput
  }

  export type FireIncidentUncheckedCreateWithoutFireLevelInput = {
    id?: number
    latitude: number
    longitude: number
    status?: $Enums.IncidentStatus
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    resolvedAt?: Date | string | null
    address?: string | null
    reportedById: number
    assignedToId: number
    fireStationId: number
    vehicles?: VehicleUncheckedCreateNestedManyWithoutIncidentsInput
    reports?: ReportUncheckedCreateNestedManyWithoutFireIncidentInput
    history?: FireHistoryUncheckedCreateNestedManyWithoutFireIncidentInput
  }

  export type FireIncidentCreateOrConnectWithoutFireLevelInput = {
    where: FireIncidentWhereUniqueInput
    create: XOR<FireIncidentCreateWithoutFireLevelInput, FireIncidentUncheckedCreateWithoutFireLevelInput>
  }

  export type FireIncidentCreateManyFireLevelInputEnvelope = {
    data: FireIncidentCreateManyFireLevelInput | FireIncidentCreateManyFireLevelInput[]
    skipDuplicates?: boolean
  }

  export type FireLevelRequirementCreateWithoutFireLevelInput = {
    count: number
    createdAt?: Date | string
    updatedAt?: Date | string
    vehicleType: $Enums.VehicleType
  }

  export type FireLevelRequirementUncheckedCreateWithoutFireLevelInput = {
    id?: number
    count: number
    createdAt?: Date | string
    updatedAt?: Date | string
    vehicleType: $Enums.VehicleType
  }

  export type FireLevelRequirementCreateOrConnectWithoutFireLevelInput = {
    where: FireLevelRequirementWhereUniqueInput
    create: XOR<FireLevelRequirementCreateWithoutFireLevelInput, FireLevelRequirementUncheckedCreateWithoutFireLevelInput>
  }

  export type FireLevelRequirementCreateManyFireLevelInputEnvelope = {
    data: FireLevelRequirementCreateManyFireLevelInput | FireLevelRequirementCreateManyFireLevelInput[]
    skipDuplicates?: boolean
  }

  export type FireAddressLevelCreateWithoutFireLevelInput = {
    address: string
    description?: string | null
    latitude?: number | null
    longitude?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FireAddressLevelUncheckedCreateWithoutFireLevelInput = {
    id?: number
    address: string
    description?: string | null
    latitude?: number | null
    longitude?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FireAddressLevelCreateOrConnectWithoutFireLevelInput = {
    where: FireAddressLevelWhereUniqueInput
    create: XOR<FireAddressLevelCreateWithoutFireLevelInput, FireAddressLevelUncheckedCreateWithoutFireLevelInput>
  }

  export type FireAddressLevelCreateManyFireLevelInputEnvelope = {
    data: FireAddressLevelCreateManyFireLevelInput | FireAddressLevelCreateManyFireLevelInput[]
    skipDuplicates?: boolean
  }

  export type FireIncidentUpsertWithWhereUniqueWithoutFireLevelInput = {
    where: FireIncidentWhereUniqueInput
    update: XOR<FireIncidentUpdateWithoutFireLevelInput, FireIncidentUncheckedUpdateWithoutFireLevelInput>
    create: XOR<FireIncidentCreateWithoutFireLevelInput, FireIncidentUncheckedCreateWithoutFireLevelInput>
  }

  export type FireIncidentUpdateWithWhereUniqueWithoutFireLevelInput = {
    where: FireIncidentWhereUniqueInput
    data: XOR<FireIncidentUpdateWithoutFireLevelInput, FireIncidentUncheckedUpdateWithoutFireLevelInput>
  }

  export type FireIncidentUpdateManyWithWhereWithoutFireLevelInput = {
    where: FireIncidentScalarWhereInput
    data: XOR<FireIncidentUpdateManyMutationInput, FireIncidentUncheckedUpdateManyWithoutFireLevelInput>
  }

  export type FireLevelRequirementUpsertWithWhereUniqueWithoutFireLevelInput = {
    where: FireLevelRequirementWhereUniqueInput
    update: XOR<FireLevelRequirementUpdateWithoutFireLevelInput, FireLevelRequirementUncheckedUpdateWithoutFireLevelInput>
    create: XOR<FireLevelRequirementCreateWithoutFireLevelInput, FireLevelRequirementUncheckedCreateWithoutFireLevelInput>
  }

  export type FireLevelRequirementUpdateWithWhereUniqueWithoutFireLevelInput = {
    where: FireLevelRequirementWhereUniqueInput
    data: XOR<FireLevelRequirementUpdateWithoutFireLevelInput, FireLevelRequirementUncheckedUpdateWithoutFireLevelInput>
  }

  export type FireLevelRequirementUpdateManyWithWhereWithoutFireLevelInput = {
    where: FireLevelRequirementScalarWhereInput
    data: XOR<FireLevelRequirementUpdateManyMutationInput, FireLevelRequirementUncheckedUpdateManyWithoutFireLevelInput>
  }

  export type FireLevelRequirementScalarWhereInput = {
    AND?: FireLevelRequirementScalarWhereInput | FireLevelRequirementScalarWhereInput[]
    OR?: FireLevelRequirementScalarWhereInput[]
    NOT?: FireLevelRequirementScalarWhereInput | FireLevelRequirementScalarWhereInput[]
    id?: IntFilter<"FireLevelRequirement"> | number
    count?: IntFilter<"FireLevelRequirement"> | number
    createdAt?: DateTimeFilter<"FireLevelRequirement"> | Date | string
    updatedAt?: DateTimeFilter<"FireLevelRequirement"> | Date | string
    fireLevelId?: IntFilter<"FireLevelRequirement"> | number
    vehicleType?: EnumVehicleTypeFilter<"FireLevelRequirement"> | $Enums.VehicleType
  }

  export type FireAddressLevelUpsertWithWhereUniqueWithoutFireLevelInput = {
    where: FireAddressLevelWhereUniqueInput
    update: XOR<FireAddressLevelUpdateWithoutFireLevelInput, FireAddressLevelUncheckedUpdateWithoutFireLevelInput>
    create: XOR<FireAddressLevelCreateWithoutFireLevelInput, FireAddressLevelUncheckedCreateWithoutFireLevelInput>
  }

  export type FireAddressLevelUpdateWithWhereUniqueWithoutFireLevelInput = {
    where: FireAddressLevelWhereUniqueInput
    data: XOR<FireAddressLevelUpdateWithoutFireLevelInput, FireAddressLevelUncheckedUpdateWithoutFireLevelInput>
  }

  export type FireAddressLevelUpdateManyWithWhereWithoutFireLevelInput = {
    where: FireAddressLevelScalarWhereInput
    data: XOR<FireAddressLevelUpdateManyMutationInput, FireAddressLevelUncheckedUpdateManyWithoutFireLevelInput>
  }

  export type FireAddressLevelScalarWhereInput = {
    AND?: FireAddressLevelScalarWhereInput | FireAddressLevelScalarWhereInput[]
    OR?: FireAddressLevelScalarWhereInput[]
    NOT?: FireAddressLevelScalarWhereInput | FireAddressLevelScalarWhereInput[]
    id?: IntFilter<"FireAddressLevel"> | number
    address?: StringFilter<"FireAddressLevel"> | string
    description?: StringNullableFilter<"FireAddressLevel"> | string | null
    latitude?: FloatNullableFilter<"FireAddressLevel"> | number | null
    longitude?: FloatNullableFilter<"FireAddressLevel"> | number | null
    createdAt?: DateTimeFilter<"FireAddressLevel"> | Date | string
    updatedAt?: DateTimeFilter<"FireAddressLevel"> | Date | string
    fireLevelId?: IntFilter<"FireAddressLevel"> | number
  }

  export type FireLevelCreateWithoutRequirementsInput = {
    level: number
    name: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    incidents?: FireIncidentCreateNestedManyWithoutFireLevelInput
    addressLevels?: FireAddressLevelCreateNestedManyWithoutFireLevelInput
  }

  export type FireLevelUncheckedCreateWithoutRequirementsInput = {
    id?: number
    level: number
    name: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    incidents?: FireIncidentUncheckedCreateNestedManyWithoutFireLevelInput
    addressLevels?: FireAddressLevelUncheckedCreateNestedManyWithoutFireLevelInput
  }

  export type FireLevelCreateOrConnectWithoutRequirementsInput = {
    where: FireLevelWhereUniqueInput
    create: XOR<FireLevelCreateWithoutRequirementsInput, FireLevelUncheckedCreateWithoutRequirementsInput>
  }

  export type FireLevelUpsertWithoutRequirementsInput = {
    update: XOR<FireLevelUpdateWithoutRequirementsInput, FireLevelUncheckedUpdateWithoutRequirementsInput>
    create: XOR<FireLevelCreateWithoutRequirementsInput, FireLevelUncheckedCreateWithoutRequirementsInput>
    where?: FireLevelWhereInput
  }

  export type FireLevelUpdateToOneWithWhereWithoutRequirementsInput = {
    where?: FireLevelWhereInput
    data: XOR<FireLevelUpdateWithoutRequirementsInput, FireLevelUncheckedUpdateWithoutRequirementsInput>
  }

  export type FireLevelUpdateWithoutRequirementsInput = {
    level?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    incidents?: FireIncidentUpdateManyWithoutFireLevelNestedInput
    addressLevels?: FireAddressLevelUpdateManyWithoutFireLevelNestedInput
  }

  export type FireLevelUncheckedUpdateWithoutRequirementsInput = {
    id?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    incidents?: FireIncidentUncheckedUpdateManyWithoutFireLevelNestedInput
    addressLevels?: FireAddressLevelUncheckedUpdateManyWithoutFireLevelNestedInput
  }

  export type UserCreateWithoutReportedFiresInput = {
    username: string
    password: string
    role: $Enums.UserRole
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    fireStation?: FireStationCreateNestedOneWithoutUsersInput
    assignedFires?: FireIncidentCreateNestedManyWithoutAssignedToInput
    reports?: ReportCreateNestedManyWithoutUserInput
    activities?: UserActivityCreateNestedManyWithoutUserInput
    systemUpdates?: SystemSettingsCreateNestedManyWithoutUpdatedByInput
  }

  export type UserUncheckedCreateWithoutReportedFiresInput = {
    id?: number
    username: string
    password: string
    role: $Enums.UserRole
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    fireStationId?: number | null
    assignedFires?: FireIncidentUncheckedCreateNestedManyWithoutAssignedToInput
    reports?: ReportUncheckedCreateNestedManyWithoutUserInput
    activities?: UserActivityUncheckedCreateNestedManyWithoutUserInput
    systemUpdates?: SystemSettingsUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type UserCreateOrConnectWithoutReportedFiresInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReportedFiresInput, UserUncheckedCreateWithoutReportedFiresInput>
  }

  export type UserCreateWithoutAssignedFiresInput = {
    username: string
    password: string
    role: $Enums.UserRole
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    fireStation?: FireStationCreateNestedOneWithoutUsersInput
    reportedFires?: FireIncidentCreateNestedManyWithoutReportedByInput
    reports?: ReportCreateNestedManyWithoutUserInput
    activities?: UserActivityCreateNestedManyWithoutUserInput
    systemUpdates?: SystemSettingsCreateNestedManyWithoutUpdatedByInput
  }

  export type UserUncheckedCreateWithoutAssignedFiresInput = {
    id?: number
    username: string
    password: string
    role: $Enums.UserRole
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    fireStationId?: number | null
    reportedFires?: FireIncidentUncheckedCreateNestedManyWithoutReportedByInput
    reports?: ReportUncheckedCreateNestedManyWithoutUserInput
    activities?: UserActivityUncheckedCreateNestedManyWithoutUserInput
    systemUpdates?: SystemSettingsUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type UserCreateOrConnectWithoutAssignedFiresInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAssignedFiresInput, UserUncheckedCreateWithoutAssignedFiresInput>
  }

  export type FireStationCreateWithoutIncidentsInput = {
    name: string
    address: string
    latitude: number
    longitude: number
    phoneNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutFireStationInput
    vehicles?: VehicleCreateNestedManyWithoutFireStationInput
  }

  export type FireStationUncheckedCreateWithoutIncidentsInput = {
    id?: number
    name: string
    address: string
    latitude: number
    longitude: number
    phoneNumber?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutFireStationInput
    vehicles?: VehicleUncheckedCreateNestedManyWithoutFireStationInput
  }

  export type FireStationCreateOrConnectWithoutIncidentsInput = {
    where: FireStationWhereUniqueInput
    create: XOR<FireStationCreateWithoutIncidentsInput, FireStationUncheckedCreateWithoutIncidentsInput>
  }

  export type FireLevelCreateWithoutIncidentsInput = {
    level: number
    name: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    requirements?: FireLevelRequirementCreateNestedManyWithoutFireLevelInput
    addressLevels?: FireAddressLevelCreateNestedManyWithoutFireLevelInput
  }

  export type FireLevelUncheckedCreateWithoutIncidentsInput = {
    id?: number
    level: number
    name: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    requirements?: FireLevelRequirementUncheckedCreateNestedManyWithoutFireLevelInput
    addressLevels?: FireAddressLevelUncheckedCreateNestedManyWithoutFireLevelInput
  }

  export type FireLevelCreateOrConnectWithoutIncidentsInput = {
    where: FireLevelWhereUniqueInput
    create: XOR<FireLevelCreateWithoutIncidentsInput, FireLevelUncheckedCreateWithoutIncidentsInput>
  }

  export type VehicleCreateWithoutIncidentsInput = {
    model: string
    type: $Enums.VehicleType
    status?: $Enums.VehicleStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    fireStation: FireStationCreateNestedOneWithoutVehiclesInput
  }

  export type VehicleUncheckedCreateWithoutIncidentsInput = {
    id?: number
    model: string
    type: $Enums.VehicleType
    status?: $Enums.VehicleStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    fireStationId: number
  }

  export type VehicleCreateOrConnectWithoutIncidentsInput = {
    where: VehicleWhereUniqueInput
    create: XOR<VehicleCreateWithoutIncidentsInput, VehicleUncheckedCreateWithoutIncidentsInput>
  }

  export type ReportCreateWithoutFireIncidentInput = {
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutReportsInput
  }

  export type ReportUncheckedCreateWithoutFireIncidentInput = {
    id?: number
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: number
  }

  export type ReportCreateOrConnectWithoutFireIncidentInput = {
    where: ReportWhereUniqueInput
    create: XOR<ReportCreateWithoutFireIncidentInput, ReportUncheckedCreateWithoutFireIncidentInput>
  }

  export type ReportCreateManyFireIncidentInputEnvelope = {
    data: ReportCreateManyFireIncidentInput | ReportCreateManyFireIncidentInput[]
    skipDuplicates?: boolean
  }

  export type FireHistoryCreateWithoutFireIncidentInput = {
    action: string
    details: string
    timestamp?: Date | string
  }

  export type FireHistoryUncheckedCreateWithoutFireIncidentInput = {
    id?: number
    action: string
    details: string
    timestamp?: Date | string
  }

  export type FireHistoryCreateOrConnectWithoutFireIncidentInput = {
    where: FireHistoryWhereUniqueInput
    create: XOR<FireHistoryCreateWithoutFireIncidentInput, FireHistoryUncheckedCreateWithoutFireIncidentInput>
  }

  export type FireHistoryCreateManyFireIncidentInputEnvelope = {
    data: FireHistoryCreateManyFireIncidentInput | FireHistoryCreateManyFireIncidentInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutReportedFiresInput = {
    update: XOR<UserUpdateWithoutReportedFiresInput, UserUncheckedUpdateWithoutReportedFiresInput>
    create: XOR<UserCreateWithoutReportedFiresInput, UserUncheckedCreateWithoutReportedFiresInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutReportedFiresInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutReportedFiresInput, UserUncheckedUpdateWithoutReportedFiresInput>
  }

  export type UserUpdateWithoutReportedFiresInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fireStation?: FireStationUpdateOneWithoutUsersNestedInput
    assignedFires?: FireIncidentUpdateManyWithoutAssignedToNestedInput
    reports?: ReportUpdateManyWithoutUserNestedInput
    activities?: UserActivityUpdateManyWithoutUserNestedInput
    systemUpdates?: SystemSettingsUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutReportedFiresInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fireStationId?: NullableIntFieldUpdateOperationsInput | number | null
    assignedFires?: FireIncidentUncheckedUpdateManyWithoutAssignedToNestedInput
    reports?: ReportUncheckedUpdateManyWithoutUserNestedInput
    activities?: UserActivityUncheckedUpdateManyWithoutUserNestedInput
    systemUpdates?: SystemSettingsUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserUpsertWithoutAssignedFiresInput = {
    update: XOR<UserUpdateWithoutAssignedFiresInput, UserUncheckedUpdateWithoutAssignedFiresInput>
    create: XOR<UserCreateWithoutAssignedFiresInput, UserUncheckedCreateWithoutAssignedFiresInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAssignedFiresInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAssignedFiresInput, UserUncheckedUpdateWithoutAssignedFiresInput>
  }

  export type UserUpdateWithoutAssignedFiresInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fireStation?: FireStationUpdateOneWithoutUsersNestedInput
    reportedFires?: FireIncidentUpdateManyWithoutReportedByNestedInput
    reports?: ReportUpdateManyWithoutUserNestedInput
    activities?: UserActivityUpdateManyWithoutUserNestedInput
    systemUpdates?: SystemSettingsUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutAssignedFiresInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fireStationId?: NullableIntFieldUpdateOperationsInput | number | null
    reportedFires?: FireIncidentUncheckedUpdateManyWithoutReportedByNestedInput
    reports?: ReportUncheckedUpdateManyWithoutUserNestedInput
    activities?: UserActivityUncheckedUpdateManyWithoutUserNestedInput
    systemUpdates?: SystemSettingsUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type FireStationUpsertWithoutIncidentsInput = {
    update: XOR<FireStationUpdateWithoutIncidentsInput, FireStationUncheckedUpdateWithoutIncidentsInput>
    create: XOR<FireStationCreateWithoutIncidentsInput, FireStationUncheckedCreateWithoutIncidentsInput>
    where?: FireStationWhereInput
  }

  export type FireStationUpdateToOneWithWhereWithoutIncidentsInput = {
    where?: FireStationWhereInput
    data: XOR<FireStationUpdateWithoutIncidentsInput, FireStationUncheckedUpdateWithoutIncidentsInput>
  }

  export type FireStationUpdateWithoutIncidentsInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutFireStationNestedInput
    vehicles?: VehicleUpdateManyWithoutFireStationNestedInput
  }

  export type FireStationUncheckedUpdateWithoutIncidentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutFireStationNestedInput
    vehicles?: VehicleUncheckedUpdateManyWithoutFireStationNestedInput
  }

  export type FireLevelUpsertWithoutIncidentsInput = {
    update: XOR<FireLevelUpdateWithoutIncidentsInput, FireLevelUncheckedUpdateWithoutIncidentsInput>
    create: XOR<FireLevelCreateWithoutIncidentsInput, FireLevelUncheckedCreateWithoutIncidentsInput>
    where?: FireLevelWhereInput
  }

  export type FireLevelUpdateToOneWithWhereWithoutIncidentsInput = {
    where?: FireLevelWhereInput
    data: XOR<FireLevelUpdateWithoutIncidentsInput, FireLevelUncheckedUpdateWithoutIncidentsInput>
  }

  export type FireLevelUpdateWithoutIncidentsInput = {
    level?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    requirements?: FireLevelRequirementUpdateManyWithoutFireLevelNestedInput
    addressLevels?: FireAddressLevelUpdateManyWithoutFireLevelNestedInput
  }

  export type FireLevelUncheckedUpdateWithoutIncidentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    requirements?: FireLevelRequirementUncheckedUpdateManyWithoutFireLevelNestedInput
    addressLevels?: FireAddressLevelUncheckedUpdateManyWithoutFireLevelNestedInput
  }

  export type VehicleUpsertWithWhereUniqueWithoutIncidentsInput = {
    where: VehicleWhereUniqueInput
    update: XOR<VehicleUpdateWithoutIncidentsInput, VehicleUncheckedUpdateWithoutIncidentsInput>
    create: XOR<VehicleCreateWithoutIncidentsInput, VehicleUncheckedCreateWithoutIncidentsInput>
  }

  export type VehicleUpdateWithWhereUniqueWithoutIncidentsInput = {
    where: VehicleWhereUniqueInput
    data: XOR<VehicleUpdateWithoutIncidentsInput, VehicleUncheckedUpdateWithoutIncidentsInput>
  }

  export type VehicleUpdateManyWithWhereWithoutIncidentsInput = {
    where: VehicleScalarWhereInput
    data: XOR<VehicleUpdateManyMutationInput, VehicleUncheckedUpdateManyWithoutIncidentsInput>
  }

  export type ReportUpsertWithWhereUniqueWithoutFireIncidentInput = {
    where: ReportWhereUniqueInput
    update: XOR<ReportUpdateWithoutFireIncidentInput, ReportUncheckedUpdateWithoutFireIncidentInput>
    create: XOR<ReportCreateWithoutFireIncidentInput, ReportUncheckedCreateWithoutFireIncidentInput>
  }

  export type ReportUpdateWithWhereUniqueWithoutFireIncidentInput = {
    where: ReportWhereUniqueInput
    data: XOR<ReportUpdateWithoutFireIncidentInput, ReportUncheckedUpdateWithoutFireIncidentInput>
  }

  export type ReportUpdateManyWithWhereWithoutFireIncidentInput = {
    where: ReportScalarWhereInput
    data: XOR<ReportUpdateManyMutationInput, ReportUncheckedUpdateManyWithoutFireIncidentInput>
  }

  export type FireHistoryUpsertWithWhereUniqueWithoutFireIncidentInput = {
    where: FireHistoryWhereUniqueInput
    update: XOR<FireHistoryUpdateWithoutFireIncidentInput, FireHistoryUncheckedUpdateWithoutFireIncidentInput>
    create: XOR<FireHistoryCreateWithoutFireIncidentInput, FireHistoryUncheckedCreateWithoutFireIncidentInput>
  }

  export type FireHistoryUpdateWithWhereUniqueWithoutFireIncidentInput = {
    where: FireHistoryWhereUniqueInput
    data: XOR<FireHistoryUpdateWithoutFireIncidentInput, FireHistoryUncheckedUpdateWithoutFireIncidentInput>
  }

  export type FireHistoryUpdateManyWithWhereWithoutFireIncidentInput = {
    where: FireHistoryScalarWhereInput
    data: XOR<FireHistoryUpdateManyMutationInput, FireHistoryUncheckedUpdateManyWithoutFireIncidentInput>
  }

  export type FireHistoryScalarWhereInput = {
    AND?: FireHistoryScalarWhereInput | FireHistoryScalarWhereInput[]
    OR?: FireHistoryScalarWhereInput[]
    NOT?: FireHistoryScalarWhereInput | FireHistoryScalarWhereInput[]
    id?: IntFilter<"FireHistory"> | number
    fireIncidentId?: IntFilter<"FireHistory"> | number
    action?: StringFilter<"FireHistory"> | string
    details?: StringFilter<"FireHistory"> | string
    timestamp?: DateTimeFilter<"FireHistory"> | Date | string
  }

  export type FireLevelCreateWithoutAddressLevelsInput = {
    level: number
    name: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    incidents?: FireIncidentCreateNestedManyWithoutFireLevelInput
    requirements?: FireLevelRequirementCreateNestedManyWithoutFireLevelInput
  }

  export type FireLevelUncheckedCreateWithoutAddressLevelsInput = {
    id?: number
    level: number
    name: string
    description: string
    createdAt?: Date | string
    updatedAt?: Date | string
    incidents?: FireIncidentUncheckedCreateNestedManyWithoutFireLevelInput
    requirements?: FireLevelRequirementUncheckedCreateNestedManyWithoutFireLevelInput
  }

  export type FireLevelCreateOrConnectWithoutAddressLevelsInput = {
    where: FireLevelWhereUniqueInput
    create: XOR<FireLevelCreateWithoutAddressLevelsInput, FireLevelUncheckedCreateWithoutAddressLevelsInput>
  }

  export type FireLevelUpsertWithoutAddressLevelsInput = {
    update: XOR<FireLevelUpdateWithoutAddressLevelsInput, FireLevelUncheckedUpdateWithoutAddressLevelsInput>
    create: XOR<FireLevelCreateWithoutAddressLevelsInput, FireLevelUncheckedCreateWithoutAddressLevelsInput>
    where?: FireLevelWhereInput
  }

  export type FireLevelUpdateToOneWithWhereWithoutAddressLevelsInput = {
    where?: FireLevelWhereInput
    data: XOR<FireLevelUpdateWithoutAddressLevelsInput, FireLevelUncheckedUpdateWithoutAddressLevelsInput>
  }

  export type FireLevelUpdateWithoutAddressLevelsInput = {
    level?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    incidents?: FireIncidentUpdateManyWithoutFireLevelNestedInput
    requirements?: FireLevelRequirementUpdateManyWithoutFireLevelNestedInput
  }

  export type FireLevelUncheckedUpdateWithoutAddressLevelsInput = {
    id?: IntFieldUpdateOperationsInput | number
    level?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    incidents?: FireIncidentUncheckedUpdateManyWithoutFireLevelNestedInput
    requirements?: FireLevelRequirementUncheckedUpdateManyWithoutFireLevelNestedInput
  }

  export type UserCreateWithoutReportsInput = {
    username: string
    password: string
    role: $Enums.UserRole
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    fireStation?: FireStationCreateNestedOneWithoutUsersInput
    reportedFires?: FireIncidentCreateNestedManyWithoutReportedByInput
    assignedFires?: FireIncidentCreateNestedManyWithoutAssignedToInput
    activities?: UserActivityCreateNestedManyWithoutUserInput
    systemUpdates?: SystemSettingsCreateNestedManyWithoutUpdatedByInput
  }

  export type UserUncheckedCreateWithoutReportsInput = {
    id?: number
    username: string
    password: string
    role: $Enums.UserRole
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    fireStationId?: number | null
    reportedFires?: FireIncidentUncheckedCreateNestedManyWithoutReportedByInput
    assignedFires?: FireIncidentUncheckedCreateNestedManyWithoutAssignedToInput
    activities?: UserActivityUncheckedCreateNestedManyWithoutUserInput
    systemUpdates?: SystemSettingsUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type UserCreateOrConnectWithoutReportsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReportsInput, UserUncheckedCreateWithoutReportsInput>
  }

  export type FireIncidentCreateWithoutReportsInput = {
    latitude: number
    longitude: number
    status?: $Enums.IncidentStatus
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    resolvedAt?: Date | string | null
    address?: string | null
    reportedBy: UserCreateNestedOneWithoutReportedFiresInput
    assignedTo: UserCreateNestedOneWithoutAssignedFiresInput
    fireStation: FireStationCreateNestedOneWithoutIncidentsInput
    fireLevel: FireLevelCreateNestedOneWithoutIncidentsInput
    vehicles?: VehicleCreateNestedManyWithoutIncidentsInput
    history?: FireHistoryCreateNestedManyWithoutFireIncidentInput
  }

  export type FireIncidentUncheckedCreateWithoutReportsInput = {
    id?: number
    latitude: number
    longitude: number
    status?: $Enums.IncidentStatus
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    resolvedAt?: Date | string | null
    address?: string | null
    reportedById: number
    assignedToId: number
    fireStationId: number
    fireLevelId: number
    vehicles?: VehicleUncheckedCreateNestedManyWithoutIncidentsInput
    history?: FireHistoryUncheckedCreateNestedManyWithoutFireIncidentInput
  }

  export type FireIncidentCreateOrConnectWithoutReportsInput = {
    where: FireIncidentWhereUniqueInput
    create: XOR<FireIncidentCreateWithoutReportsInput, FireIncidentUncheckedCreateWithoutReportsInput>
  }

  export type UserUpsertWithoutReportsInput = {
    update: XOR<UserUpdateWithoutReportsInput, UserUncheckedUpdateWithoutReportsInput>
    create: XOR<UserCreateWithoutReportsInput, UserUncheckedCreateWithoutReportsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutReportsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutReportsInput, UserUncheckedUpdateWithoutReportsInput>
  }

  export type UserUpdateWithoutReportsInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fireStation?: FireStationUpdateOneWithoutUsersNestedInput
    reportedFires?: FireIncidentUpdateManyWithoutReportedByNestedInput
    assignedFires?: FireIncidentUpdateManyWithoutAssignedToNestedInput
    activities?: UserActivityUpdateManyWithoutUserNestedInput
    systemUpdates?: SystemSettingsUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutReportsInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fireStationId?: NullableIntFieldUpdateOperationsInput | number | null
    reportedFires?: FireIncidentUncheckedUpdateManyWithoutReportedByNestedInput
    assignedFires?: FireIncidentUncheckedUpdateManyWithoutAssignedToNestedInput
    activities?: UserActivityUncheckedUpdateManyWithoutUserNestedInput
    systemUpdates?: SystemSettingsUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type FireIncidentUpsertWithoutReportsInput = {
    update: XOR<FireIncidentUpdateWithoutReportsInput, FireIncidentUncheckedUpdateWithoutReportsInput>
    create: XOR<FireIncidentCreateWithoutReportsInput, FireIncidentUncheckedCreateWithoutReportsInput>
    where?: FireIncidentWhereInput
  }

  export type FireIncidentUpdateToOneWithWhereWithoutReportsInput = {
    where?: FireIncidentWhereInput
    data: XOR<FireIncidentUpdateWithoutReportsInput, FireIncidentUncheckedUpdateWithoutReportsInput>
  }

  export type FireIncidentUpdateWithoutReportsInput = {
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    status?: EnumIncidentStatusFieldUpdateOperationsInput | $Enums.IncidentStatus
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    reportedBy?: UserUpdateOneRequiredWithoutReportedFiresNestedInput
    assignedTo?: UserUpdateOneRequiredWithoutAssignedFiresNestedInput
    fireStation?: FireStationUpdateOneRequiredWithoutIncidentsNestedInput
    fireLevel?: FireLevelUpdateOneRequiredWithoutIncidentsNestedInput
    vehicles?: VehicleUpdateManyWithoutIncidentsNestedInput
    history?: FireHistoryUpdateManyWithoutFireIncidentNestedInput
  }

  export type FireIncidentUncheckedUpdateWithoutReportsInput = {
    id?: IntFieldUpdateOperationsInput | number
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    status?: EnumIncidentStatusFieldUpdateOperationsInput | $Enums.IncidentStatus
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    reportedById?: IntFieldUpdateOperationsInput | number
    assignedToId?: IntFieldUpdateOperationsInput | number
    fireStationId?: IntFieldUpdateOperationsInput | number
    fireLevelId?: IntFieldUpdateOperationsInput | number
    vehicles?: VehicleUncheckedUpdateManyWithoutIncidentsNestedInput
    history?: FireHistoryUncheckedUpdateManyWithoutFireIncidentNestedInput
  }

  export type UserCreateWithoutActivitiesInput = {
    username: string
    password: string
    role: $Enums.UserRole
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    fireStation?: FireStationCreateNestedOneWithoutUsersInput
    reportedFires?: FireIncidentCreateNestedManyWithoutReportedByInput
    assignedFires?: FireIncidentCreateNestedManyWithoutAssignedToInput
    reports?: ReportCreateNestedManyWithoutUserInput
    systemUpdates?: SystemSettingsCreateNestedManyWithoutUpdatedByInput
  }

  export type UserUncheckedCreateWithoutActivitiesInput = {
    id?: number
    username: string
    password: string
    role: $Enums.UserRole
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    fireStationId?: number | null
    reportedFires?: FireIncidentUncheckedCreateNestedManyWithoutReportedByInput
    assignedFires?: FireIncidentUncheckedCreateNestedManyWithoutAssignedToInput
    reports?: ReportUncheckedCreateNestedManyWithoutUserInput
    systemUpdates?: SystemSettingsUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type UserCreateOrConnectWithoutActivitiesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutActivitiesInput, UserUncheckedCreateWithoutActivitiesInput>
  }

  export type UserUpsertWithoutActivitiesInput = {
    update: XOR<UserUpdateWithoutActivitiesInput, UserUncheckedUpdateWithoutActivitiesInput>
    create: XOR<UserCreateWithoutActivitiesInput, UserUncheckedCreateWithoutActivitiesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutActivitiesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutActivitiesInput, UserUncheckedUpdateWithoutActivitiesInput>
  }

  export type UserUpdateWithoutActivitiesInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fireStation?: FireStationUpdateOneWithoutUsersNestedInput
    reportedFires?: FireIncidentUpdateManyWithoutReportedByNestedInput
    assignedFires?: FireIncidentUpdateManyWithoutAssignedToNestedInput
    reports?: ReportUpdateManyWithoutUserNestedInput
    systemUpdates?: SystemSettingsUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutActivitiesInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fireStationId?: NullableIntFieldUpdateOperationsInput | number | null
    reportedFires?: FireIncidentUncheckedUpdateManyWithoutReportedByNestedInput
    assignedFires?: FireIncidentUncheckedUpdateManyWithoutAssignedToNestedInput
    reports?: ReportUncheckedUpdateManyWithoutUserNestedInput
    systemUpdates?: SystemSettingsUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type FireIncidentCreateWithoutHistoryInput = {
    latitude: number
    longitude: number
    status?: $Enums.IncidentStatus
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    resolvedAt?: Date | string | null
    address?: string | null
    reportedBy: UserCreateNestedOneWithoutReportedFiresInput
    assignedTo: UserCreateNestedOneWithoutAssignedFiresInput
    fireStation: FireStationCreateNestedOneWithoutIncidentsInput
    fireLevel: FireLevelCreateNestedOneWithoutIncidentsInput
    vehicles?: VehicleCreateNestedManyWithoutIncidentsInput
    reports?: ReportCreateNestedManyWithoutFireIncidentInput
  }

  export type FireIncidentUncheckedCreateWithoutHistoryInput = {
    id?: number
    latitude: number
    longitude: number
    status?: $Enums.IncidentStatus
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    resolvedAt?: Date | string | null
    address?: string | null
    reportedById: number
    assignedToId: number
    fireStationId: number
    fireLevelId: number
    vehicles?: VehicleUncheckedCreateNestedManyWithoutIncidentsInput
    reports?: ReportUncheckedCreateNestedManyWithoutFireIncidentInput
  }

  export type FireIncidentCreateOrConnectWithoutHistoryInput = {
    where: FireIncidentWhereUniqueInput
    create: XOR<FireIncidentCreateWithoutHistoryInput, FireIncidentUncheckedCreateWithoutHistoryInput>
  }

  export type FireIncidentUpsertWithoutHistoryInput = {
    update: XOR<FireIncidentUpdateWithoutHistoryInput, FireIncidentUncheckedUpdateWithoutHistoryInput>
    create: XOR<FireIncidentCreateWithoutHistoryInput, FireIncidentUncheckedCreateWithoutHistoryInput>
    where?: FireIncidentWhereInput
  }

  export type FireIncidentUpdateToOneWithWhereWithoutHistoryInput = {
    where?: FireIncidentWhereInput
    data: XOR<FireIncidentUpdateWithoutHistoryInput, FireIncidentUncheckedUpdateWithoutHistoryInput>
  }

  export type FireIncidentUpdateWithoutHistoryInput = {
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    status?: EnumIncidentStatusFieldUpdateOperationsInput | $Enums.IncidentStatus
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    reportedBy?: UserUpdateOneRequiredWithoutReportedFiresNestedInput
    assignedTo?: UserUpdateOneRequiredWithoutAssignedFiresNestedInput
    fireStation?: FireStationUpdateOneRequiredWithoutIncidentsNestedInput
    fireLevel?: FireLevelUpdateOneRequiredWithoutIncidentsNestedInput
    vehicles?: VehicleUpdateManyWithoutIncidentsNestedInput
    reports?: ReportUpdateManyWithoutFireIncidentNestedInput
  }

  export type FireIncidentUncheckedUpdateWithoutHistoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    status?: EnumIncidentStatusFieldUpdateOperationsInput | $Enums.IncidentStatus
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    reportedById?: IntFieldUpdateOperationsInput | number
    assignedToId?: IntFieldUpdateOperationsInput | number
    fireStationId?: IntFieldUpdateOperationsInput | number
    fireLevelId?: IntFieldUpdateOperationsInput | number
    vehicles?: VehicleUncheckedUpdateManyWithoutIncidentsNestedInput
    reports?: ReportUncheckedUpdateManyWithoutFireIncidentNestedInput
  }

  export type FireIncidentCreateManyReportedByInput = {
    id?: number
    latitude: number
    longitude: number
    status?: $Enums.IncidentStatus
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    resolvedAt?: Date | string | null
    address?: string | null
    assignedToId: number
    fireStationId: number
    fireLevelId: number
  }

  export type FireIncidentCreateManyAssignedToInput = {
    id?: number
    latitude: number
    longitude: number
    status?: $Enums.IncidentStatus
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    resolvedAt?: Date | string | null
    address?: string | null
    reportedById: number
    fireStationId: number
    fireLevelId: number
  }

  export type ReportCreateManyUserInput = {
    id?: number
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    fireIncidentId: number
  }

  export type UserActivityCreateManyUserInput = {
    id?: number
    action: string
    details?: string | null
    timestamp?: Date | string
    ipAddress?: string | null
    userAgent?: string | null
  }

  export type SystemSettingsCreateManyUpdatedByInput = {
    id?: number
    defaultCityName?: string
    defaultLatitude?: number
    defaultLongitude?: number
    defaultZoom?: number
    updatedAt?: Date | string
  }

  export type FireIncidentUpdateWithoutReportedByInput = {
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    status?: EnumIncidentStatusFieldUpdateOperationsInput | $Enums.IncidentStatus
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    assignedTo?: UserUpdateOneRequiredWithoutAssignedFiresNestedInput
    fireStation?: FireStationUpdateOneRequiredWithoutIncidentsNestedInput
    fireLevel?: FireLevelUpdateOneRequiredWithoutIncidentsNestedInput
    vehicles?: VehicleUpdateManyWithoutIncidentsNestedInput
    reports?: ReportUpdateManyWithoutFireIncidentNestedInput
    history?: FireHistoryUpdateManyWithoutFireIncidentNestedInput
  }

  export type FireIncidentUncheckedUpdateWithoutReportedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    status?: EnumIncidentStatusFieldUpdateOperationsInput | $Enums.IncidentStatus
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    assignedToId?: IntFieldUpdateOperationsInput | number
    fireStationId?: IntFieldUpdateOperationsInput | number
    fireLevelId?: IntFieldUpdateOperationsInput | number
    vehicles?: VehicleUncheckedUpdateManyWithoutIncidentsNestedInput
    reports?: ReportUncheckedUpdateManyWithoutFireIncidentNestedInput
    history?: FireHistoryUncheckedUpdateManyWithoutFireIncidentNestedInput
  }

  export type FireIncidentUncheckedUpdateManyWithoutReportedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    status?: EnumIncidentStatusFieldUpdateOperationsInput | $Enums.IncidentStatus
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    assignedToId?: IntFieldUpdateOperationsInput | number
    fireStationId?: IntFieldUpdateOperationsInput | number
    fireLevelId?: IntFieldUpdateOperationsInput | number
  }

  export type FireIncidentUpdateWithoutAssignedToInput = {
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    status?: EnumIncidentStatusFieldUpdateOperationsInput | $Enums.IncidentStatus
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    reportedBy?: UserUpdateOneRequiredWithoutReportedFiresNestedInput
    fireStation?: FireStationUpdateOneRequiredWithoutIncidentsNestedInput
    fireLevel?: FireLevelUpdateOneRequiredWithoutIncidentsNestedInput
    vehicles?: VehicleUpdateManyWithoutIncidentsNestedInput
    reports?: ReportUpdateManyWithoutFireIncidentNestedInput
    history?: FireHistoryUpdateManyWithoutFireIncidentNestedInput
  }

  export type FireIncidentUncheckedUpdateWithoutAssignedToInput = {
    id?: IntFieldUpdateOperationsInput | number
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    status?: EnumIncidentStatusFieldUpdateOperationsInput | $Enums.IncidentStatus
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    reportedById?: IntFieldUpdateOperationsInput | number
    fireStationId?: IntFieldUpdateOperationsInput | number
    fireLevelId?: IntFieldUpdateOperationsInput | number
    vehicles?: VehicleUncheckedUpdateManyWithoutIncidentsNestedInput
    reports?: ReportUncheckedUpdateManyWithoutFireIncidentNestedInput
    history?: FireHistoryUncheckedUpdateManyWithoutFireIncidentNestedInput
  }

  export type FireIncidentUncheckedUpdateManyWithoutAssignedToInput = {
    id?: IntFieldUpdateOperationsInput | number
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    status?: EnumIncidentStatusFieldUpdateOperationsInput | $Enums.IncidentStatus
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    reportedById?: IntFieldUpdateOperationsInput | number
    fireStationId?: IntFieldUpdateOperationsInput | number
    fireLevelId?: IntFieldUpdateOperationsInput | number
  }

  export type ReportUpdateWithoutUserInput = {
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fireIncident?: FireIncidentUpdateOneRequiredWithoutReportsNestedInput
  }

  export type ReportUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fireIncidentId?: IntFieldUpdateOperationsInput | number
  }

  export type ReportUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fireIncidentId?: IntFieldUpdateOperationsInput | number
  }

  export type UserActivityUpdateWithoutUserInput = {
    action?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserActivityUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    action?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserActivityUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    action?: StringFieldUpdateOperationsInput | string
    details?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SystemSettingsUpdateWithoutUpdatedByInput = {
    defaultCityName?: StringFieldUpdateOperationsInput | string
    defaultLatitude?: FloatFieldUpdateOperationsInput | number
    defaultLongitude?: FloatFieldUpdateOperationsInput | number
    defaultZoom?: IntFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SystemSettingsUncheckedUpdateWithoutUpdatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    defaultCityName?: StringFieldUpdateOperationsInput | string
    defaultLatitude?: FloatFieldUpdateOperationsInput | number
    defaultLongitude?: FloatFieldUpdateOperationsInput | number
    defaultZoom?: IntFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SystemSettingsUncheckedUpdateManyWithoutUpdatedByInput = {
    id?: IntFieldUpdateOperationsInput | number
    defaultCityName?: StringFieldUpdateOperationsInput | string
    defaultLatitude?: FloatFieldUpdateOperationsInput | number
    defaultLongitude?: FloatFieldUpdateOperationsInput | number
    defaultZoom?: IntFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateManyFireStationInput = {
    id?: number
    username: string
    password: string
    role: $Enums.UserRole
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VehicleCreateManyFireStationInput = {
    id?: number
    model: string
    type: $Enums.VehicleType
    status?: $Enums.VehicleStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FireIncidentCreateManyFireStationInput = {
    id?: number
    latitude: number
    longitude: number
    status?: $Enums.IncidentStatus
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    resolvedAt?: Date | string | null
    address?: string | null
    reportedById: number
    assignedToId: number
    fireLevelId: number
  }

  export type UserUpdateWithoutFireStationInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reportedFires?: FireIncidentUpdateManyWithoutReportedByNestedInput
    assignedFires?: FireIncidentUpdateManyWithoutAssignedToNestedInput
    reports?: ReportUpdateManyWithoutUserNestedInput
    activities?: UserActivityUpdateManyWithoutUserNestedInput
    systemUpdates?: SystemSettingsUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutFireStationInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reportedFires?: FireIncidentUncheckedUpdateManyWithoutReportedByNestedInput
    assignedFires?: FireIncidentUncheckedUpdateManyWithoutAssignedToNestedInput
    reports?: ReportUncheckedUpdateManyWithoutUserNestedInput
    activities?: UserActivityUncheckedUpdateManyWithoutUserNestedInput
    systemUpdates?: SystemSettingsUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserUncheckedUpdateManyWithoutFireStationInput = {
    id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VehicleUpdateWithoutFireStationInput = {
    model?: StringFieldUpdateOperationsInput | string
    type?: EnumVehicleTypeFieldUpdateOperationsInput | $Enums.VehicleType
    status?: EnumVehicleStatusFieldUpdateOperationsInput | $Enums.VehicleStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    incidents?: FireIncidentUpdateManyWithoutVehiclesNestedInput
  }

  export type VehicleUncheckedUpdateWithoutFireStationInput = {
    id?: IntFieldUpdateOperationsInput | number
    model?: StringFieldUpdateOperationsInput | string
    type?: EnumVehicleTypeFieldUpdateOperationsInput | $Enums.VehicleType
    status?: EnumVehicleStatusFieldUpdateOperationsInput | $Enums.VehicleStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    incidents?: FireIncidentUncheckedUpdateManyWithoutVehiclesNestedInput
  }

  export type VehicleUncheckedUpdateManyWithoutFireStationInput = {
    id?: IntFieldUpdateOperationsInput | number
    model?: StringFieldUpdateOperationsInput | string
    type?: EnumVehicleTypeFieldUpdateOperationsInput | $Enums.VehicleType
    status?: EnumVehicleStatusFieldUpdateOperationsInput | $Enums.VehicleStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FireIncidentUpdateWithoutFireStationInput = {
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    status?: EnumIncidentStatusFieldUpdateOperationsInput | $Enums.IncidentStatus
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    reportedBy?: UserUpdateOneRequiredWithoutReportedFiresNestedInput
    assignedTo?: UserUpdateOneRequiredWithoutAssignedFiresNestedInput
    fireLevel?: FireLevelUpdateOneRequiredWithoutIncidentsNestedInput
    vehicles?: VehicleUpdateManyWithoutIncidentsNestedInput
    reports?: ReportUpdateManyWithoutFireIncidentNestedInput
    history?: FireHistoryUpdateManyWithoutFireIncidentNestedInput
  }

  export type FireIncidentUncheckedUpdateWithoutFireStationInput = {
    id?: IntFieldUpdateOperationsInput | number
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    status?: EnumIncidentStatusFieldUpdateOperationsInput | $Enums.IncidentStatus
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    reportedById?: IntFieldUpdateOperationsInput | number
    assignedToId?: IntFieldUpdateOperationsInput | number
    fireLevelId?: IntFieldUpdateOperationsInput | number
    vehicles?: VehicleUncheckedUpdateManyWithoutIncidentsNestedInput
    reports?: ReportUncheckedUpdateManyWithoutFireIncidentNestedInput
    history?: FireHistoryUncheckedUpdateManyWithoutFireIncidentNestedInput
  }

  export type FireIncidentUncheckedUpdateManyWithoutFireStationInput = {
    id?: IntFieldUpdateOperationsInput | number
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    status?: EnumIncidentStatusFieldUpdateOperationsInput | $Enums.IncidentStatus
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    reportedById?: IntFieldUpdateOperationsInput | number
    assignedToId?: IntFieldUpdateOperationsInput | number
    fireLevelId?: IntFieldUpdateOperationsInput | number
  }

  export type FireIncidentUpdateWithoutVehiclesInput = {
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    status?: EnumIncidentStatusFieldUpdateOperationsInput | $Enums.IncidentStatus
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    reportedBy?: UserUpdateOneRequiredWithoutReportedFiresNestedInput
    assignedTo?: UserUpdateOneRequiredWithoutAssignedFiresNestedInput
    fireStation?: FireStationUpdateOneRequiredWithoutIncidentsNestedInput
    fireLevel?: FireLevelUpdateOneRequiredWithoutIncidentsNestedInput
    reports?: ReportUpdateManyWithoutFireIncidentNestedInput
    history?: FireHistoryUpdateManyWithoutFireIncidentNestedInput
  }

  export type FireIncidentUncheckedUpdateWithoutVehiclesInput = {
    id?: IntFieldUpdateOperationsInput | number
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    status?: EnumIncidentStatusFieldUpdateOperationsInput | $Enums.IncidentStatus
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    reportedById?: IntFieldUpdateOperationsInput | number
    assignedToId?: IntFieldUpdateOperationsInput | number
    fireStationId?: IntFieldUpdateOperationsInput | number
    fireLevelId?: IntFieldUpdateOperationsInput | number
    reports?: ReportUncheckedUpdateManyWithoutFireIncidentNestedInput
    history?: FireHistoryUncheckedUpdateManyWithoutFireIncidentNestedInput
  }

  export type FireIncidentUncheckedUpdateManyWithoutVehiclesInput = {
    id?: IntFieldUpdateOperationsInput | number
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    status?: EnumIncidentStatusFieldUpdateOperationsInput | $Enums.IncidentStatus
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    reportedById?: IntFieldUpdateOperationsInput | number
    assignedToId?: IntFieldUpdateOperationsInput | number
    fireStationId?: IntFieldUpdateOperationsInput | number
    fireLevelId?: IntFieldUpdateOperationsInput | number
  }

  export type FireIncidentCreateManyFireLevelInput = {
    id?: number
    latitude: number
    longitude: number
    status?: $Enums.IncidentStatus
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    resolvedAt?: Date | string | null
    address?: string | null
    reportedById: number
    assignedToId: number
    fireStationId: number
  }

  export type FireLevelRequirementCreateManyFireLevelInput = {
    id?: number
    count: number
    createdAt?: Date | string
    updatedAt?: Date | string
    vehicleType: $Enums.VehicleType
  }

  export type FireAddressLevelCreateManyFireLevelInput = {
    id?: number
    address: string
    description?: string | null
    latitude?: number | null
    longitude?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FireIncidentUpdateWithoutFireLevelInput = {
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    status?: EnumIncidentStatusFieldUpdateOperationsInput | $Enums.IncidentStatus
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    reportedBy?: UserUpdateOneRequiredWithoutReportedFiresNestedInput
    assignedTo?: UserUpdateOneRequiredWithoutAssignedFiresNestedInput
    fireStation?: FireStationUpdateOneRequiredWithoutIncidentsNestedInput
    vehicles?: VehicleUpdateManyWithoutIncidentsNestedInput
    reports?: ReportUpdateManyWithoutFireIncidentNestedInput
    history?: FireHistoryUpdateManyWithoutFireIncidentNestedInput
  }

  export type FireIncidentUncheckedUpdateWithoutFireLevelInput = {
    id?: IntFieldUpdateOperationsInput | number
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    status?: EnumIncidentStatusFieldUpdateOperationsInput | $Enums.IncidentStatus
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    reportedById?: IntFieldUpdateOperationsInput | number
    assignedToId?: IntFieldUpdateOperationsInput | number
    fireStationId?: IntFieldUpdateOperationsInput | number
    vehicles?: VehicleUncheckedUpdateManyWithoutIncidentsNestedInput
    reports?: ReportUncheckedUpdateManyWithoutFireIncidentNestedInput
    history?: FireHistoryUncheckedUpdateManyWithoutFireIncidentNestedInput
  }

  export type FireIncidentUncheckedUpdateManyWithoutFireLevelInput = {
    id?: IntFieldUpdateOperationsInput | number
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    status?: EnumIncidentStatusFieldUpdateOperationsInput | $Enums.IncidentStatus
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    reportedById?: IntFieldUpdateOperationsInput | number
    assignedToId?: IntFieldUpdateOperationsInput | number
    fireStationId?: IntFieldUpdateOperationsInput | number
  }

  export type FireLevelRequirementUpdateWithoutFireLevelInput = {
    count?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    vehicleType?: EnumVehicleTypeFieldUpdateOperationsInput | $Enums.VehicleType
  }

  export type FireLevelRequirementUncheckedUpdateWithoutFireLevelInput = {
    id?: IntFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    vehicleType?: EnumVehicleTypeFieldUpdateOperationsInput | $Enums.VehicleType
  }

  export type FireLevelRequirementUncheckedUpdateManyWithoutFireLevelInput = {
    id?: IntFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    vehicleType?: EnumVehicleTypeFieldUpdateOperationsInput | $Enums.VehicleType
  }

  export type FireAddressLevelUpdateWithoutFireLevelInput = {
    address?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FireAddressLevelUncheckedUpdateWithoutFireLevelInput = {
    id?: IntFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FireAddressLevelUncheckedUpdateManyWithoutFireLevelInput = {
    id?: IntFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    latitude?: NullableFloatFieldUpdateOperationsInput | number | null
    longitude?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportCreateManyFireIncidentInput = {
    id?: number
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: number
  }

  export type FireHistoryCreateManyFireIncidentInput = {
    id?: number
    action: string
    details: string
    timestamp?: Date | string
  }

  export type VehicleUpdateWithoutIncidentsInput = {
    model?: StringFieldUpdateOperationsInput | string
    type?: EnumVehicleTypeFieldUpdateOperationsInput | $Enums.VehicleType
    status?: EnumVehicleStatusFieldUpdateOperationsInput | $Enums.VehicleStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fireStation?: FireStationUpdateOneRequiredWithoutVehiclesNestedInput
  }

  export type VehicleUncheckedUpdateWithoutIncidentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    model?: StringFieldUpdateOperationsInput | string
    type?: EnumVehicleTypeFieldUpdateOperationsInput | $Enums.VehicleType
    status?: EnumVehicleStatusFieldUpdateOperationsInput | $Enums.VehicleStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fireStationId?: IntFieldUpdateOperationsInput | number
  }

  export type VehicleUncheckedUpdateManyWithoutIncidentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    model?: StringFieldUpdateOperationsInput | string
    type?: EnumVehicleTypeFieldUpdateOperationsInput | $Enums.VehicleType
    status?: EnumVehicleStatusFieldUpdateOperationsInput | $Enums.VehicleStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fireStationId?: IntFieldUpdateOperationsInput | number
  }

  export type ReportUpdateWithoutFireIncidentInput = {
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutReportsNestedInput
  }

  export type ReportUncheckedUpdateWithoutFireIncidentInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type ReportUncheckedUpdateManyWithoutFireIncidentInput = {
    id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type FireHistoryUpdateWithoutFireIncidentInput = {
    action?: StringFieldUpdateOperationsInput | string
    details?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FireHistoryUncheckedUpdateWithoutFireIncidentInput = {
    id?: IntFieldUpdateOperationsInput | number
    action?: StringFieldUpdateOperationsInput | string
    details?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FireHistoryUncheckedUpdateManyWithoutFireIncidentInput = {
    id?: IntFieldUpdateOperationsInput | number
    action?: StringFieldUpdateOperationsInput | string
    details?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}