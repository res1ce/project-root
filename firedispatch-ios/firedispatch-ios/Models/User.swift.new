import Foundation

enum UserRole: String, Codable {
    case admin = "ADMIN"
    case central_dispatcher = "CENTRAL_DISPATCHER"
    case station_dispatcher = "STATION_DISPATCHER"
    
    var displayName: String {
        switch self {
        case .admin:
            return "Администратор"
        case .central_dispatcher:
            return "Центральный диспетчер"
        case .station_dispatcher:
            return "Диспетчер пожарной части"
        }
    }
}

struct User: Codable, Identifiable {
    let id: Int
    let username: String
    let role: UserRole
    let fireStationId: Int?
    let name: String?
    
    enum CodingKeys: String, CodingKey {
        case id
        case username
        case role
        case roleId
        case roleName
        case fireStationId = "firestation_id"
        case fireStation
        case name
    }
    
    init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        
        // Декодируем id, который может быть представлен как Int или String
        if let idInt = try? container.decode(Int.self, forKey: .id) {
            id = idInt
        } else if let idString = try? container.decode(String.self, forKey: .id),
                  let idInt = Int(idString) {
            id = idInt
        } else {
            throw DecodingError.dataCorruptedError(forKey: .id, in: container, debugDescription: "Expected Int or String for id")
        }
        
        // Декодируем username
        username = try container.decode(String.self, forKey: .username)
        
        // Декодируем name (опционально)
        name = try container.decodeIfPresent(String.self, forKey: .name)
        
        // Декодируем role, которая может быть представлена разными способами
        if let roleEnum = try? container.decode(UserRole.self, forKey: .role) {
            // Если role напрямую декодируется как UserRole
            role = roleEnum
        } else if let roleString = try? container.decode(String.self, forKey: .role),
                  let roleEnum = UserRole(rawValue: roleString) {
            // Если role представлена как строка
            role = roleEnum
        } else if let roleObject = try? container.decodeIfPresent([String: Any].self, forKey: .role) as? [String: String],
                  let roleValue = roleObject["value"],
                  let roleEnum = UserRole(rawValue: roleValue) {
            // Если role представлена как объект с полем value
            role = roleEnum
        } else if let roleId = try? container.decodeIfPresent(Int.self, forKey: .roleId) {
            // Если есть roleId, определяем роль по нему
            switch roleId {
            case 1:
                role = .admin
            case 2:
                role = .central_dispatcher
            case 3:
                role = .station_dispatcher
            default:
                throw DecodingError.dataCorruptedError(forKey: .roleId, in: container, debugDescription: "Unknown roleId")
            }
        } else if let roleName = try? container.decodeIfPresent(String.self, forKey: .roleName),
                  let roleEnum = UserRole(rawValue: roleName) {
            // Если есть roleName, определяем роль по нему
            role = roleEnum
        } else {
            // Если не удалось определить роль, используем значение по умолчанию
            role = .station_dispatcher
        }
        
        // Декодируем fireStationId, который может быть представлен разными способами
        if let fireStationIdInt = try? container.decodeIfPresent(Int.self, forKey: .fireStationId) {
            // Если fireStationId представлен как Int
            fireStationId = fireStationIdInt
        } else if let fireStationIdString = try? container.decodeIfPresent(String.self, forKey: .fireStationId),
                  let fireStationIdInt = Int(fireStationIdString) {
            // Если fireStationId представлен как String
            fireStationId = fireStationIdInt
        } else if let fireStationObject = try? container.decodeIfPresent([String: Any].self, forKey: .fireStation) as? [String: Any],
                  let fireStationIdValue = fireStationObject["id"] as? Int {
            // Если есть объект fireStation с полем id
            fireStationId = fireStationIdValue
        } else {
            // Если не удалось определить fireStationId
            fireStationId = nil
        }
    }
}

struct AuthResponse: Codable {
    let access_token: String
    let user: User
}

struct LoginRequest: Codable {
    let username: String
    let password: String
}

struct CreateUserRequest: Codable {
    let username: String
    let password: String
    let role: UserRole
    let name: String?
    let fireStationId: Int?
}
